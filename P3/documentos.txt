
1 | Preliminary Report-International Algebraic Language | Perlis, A. J.Samelson,K.
2 | Extraction of Roots by Repeated Subtractions for Digital Computers | Sugai, I.
3 | Techniques Department on Matrix Program Schemes | Friedman, M. D.
4 | Glossary of Computer Engineering and Programming Terminology
5 | Two Square-Root Approximations | Wadey, W. G.
6 | The Use of Computers in Inspection Procedures | Muller, M. E.
7 | Glossary of Computer Engineering and Programming Terminology
8 | On The Equivalence and Transformation of Program Schemes | Friedman, M. D.
9 | Proposal for an UNCOL | Conway, M. E.
10 | Glossary of Computer Engineering and Programming Terminology
11 | The Problem of Programming Communication withChanging Machines A Proposed Solution-Part 2 | Strong, J.Wegstein, J.Tritter, A.Olsztyn, J.Mock, O.Steel, T.
12 | Error Estimation in Runge-Kutta Procedures | Call, D. H.Reeves, R. F.
13 | Glossary of Computer Engineering and Programming Terminology
14 | The Problem of Programming Communication withChanging Machines A Proposed Solution (Part 1) | Strong, J.Wegstein, J.Tritter, A.Olsztyn, J.Mock, O.Steel, T.
15 | Recursive Curve Fitting Technique | Giblin, J.
16 | Secant Modification of Newton's Method | Jeeves, T. A.
17 | On Programming of Arithmetic Operations | Ershov, A. P.
18 | Simple Automatic Coding Systems | Adams, E. S.Schlesinger, S. I.
19 | Glossary of Computer Engineering and Programming Terminology
20 | Accelerating Convergence of Iterative Processes | A technique is discussed which, when appliedto an iterative procedure for the solution ofan equation, accelerates the rate of convergence ifthe iteration converges and induces convergence ifthe iteration diverges.  An illustrative example is given. | Wegstein, J. H.
21 | Algebraic Formulation of Flow Diagrams | Voorhees, E. A.
22 | Unusual Applications Department--AutomaticImplementation of Computer Logic | Morris, E. F.Wohr, T. E.
23 | Binary and Truth-Function Operations ona Decimal Computer with an Extract Command | Kautz, W. H.
24 | An Improved Decimal Redundancy Check | Sisson, R. L.
25 | General Purpose Programming Systems | Holt, A. W.
26 | A Subroutine Method for Calculating Logarithms | Bemer, R. W.
27 | Note On Empirical Bounds For Generating Bessel Functions | Randels, J. B.Reeves, R. F.
28 | Request for Methods or Programs | Corley, H. P. T.
29 | Need for an Algorithm | Selden, W.
30 | Algorithm for Analyzing Logical Statementsto Produce a Truth Function Table | Wolpe, H.
31 | IBM 704 Code-Nundrums | Grumette, M.
32 | Variable-Width Tables with Binary-Search Facility | Halpern, M.
33 | A Programmed Binary Counter For The IBM Type 650 Calculator | Kenny, B. C.Hunter, J. A.
34 | Tables for Automatic Computation | Wilf, H. S.
35 | A Machine Method for Square-Root Computation | Bemer, R. W.
36 | A Queue Network Simulator for the IBM 650 and Burroughs 220 | Conway, R. W.Johnson, B. M.Maxwell, W. L.
37 | Impact of Computer Developments | Humphrey, S. M.
38 | A Proposed Interpretation in ALGOL | Irons, E. T.Acton, F. S.
39 | The Secant Method for Simultaneous Nonlinear Equations  | A procedure for the simultaneous solutionof a system of not-necessarily-linear equations, a generalization of the secant method for asingle function of one variable, is given. | Wolfe, P.
40 | Fingers or Fists? (The Choice of Decimal or Binary Representation) | The binary number system offers many advantagesover a decimal representation for a high-performance, general-purpose computer.  The greater simplicity ofa binary arithmetic unit and the greater compactness of binary numbers both contribute directly to arithmeticspeed.  Less obvious and perhaps more important is the way binary addressing and instruction formats canincrease the overall performance.  Binary addresses are also essential to certain powerful operations whichare not practical with decimal instruction formats.  On the other hand, decimal numbers are essential forcommunicating between man and the computer.  In applications requiring the processing of a large volumeof inherently decimal input and output data, the time for decimal-binary conversion needed by a purelybinary computer may be significant.  A slower decimal adder may take less time than a fast binary adderdoing an addition and two conversions.  A careful review of the significance of decimal and binary addressingand both binary and decimal data arithmetic, supplemented by efficient conversion instructions. | Buchholz, W.
41 | Some Notes on Computer Research in Eastern Europe | Nadler, M.
42 | A New Method of Computation of Square Roots Without Using Division | Sarafyan, D.
43 | A Technique for Handling Macro Instructions | Greenwald, I. D.
44 | RUNCIBLE-Algebraic Translation on a Limited Computer | Knuth, D. E.
45 | Flow Outlining-A Substitute for Flow Charting | Gant, W. T.
46 | Multiprogramming STRETCH: Feasibility Considerations | The tendency towards increased parallelism incomputers is noted.  Exploitation of this parallelism presents a number of new problems in machine designand in programming systems.  Minimum requirements for successful concurrent execution of several independentproblem programs are discussed.  These requirements are met in the STRETCH system by a carefully balancedcombination of built-in and programmed logic.  Techniques are described which place the burden of theprogrammed logic on system programs (supervisory program and compiler) rather than on problem programs. | Codd, E. F.Lowry, E. S.McDonough, E.Scalzi, C. A.
47 | Russian Visit to U.S. Computers | Zaitzeff, E. M.Astrahan, M. M.
48 | Shift-Register Code for Indexing Applications | In this communication the use of a shift-registercode with n = 10 is described for calling 64 wireless telemetering stations in a fixed cyclical order. A high degree of redundancy is used, permitting a single-error correcting code ("minimum-distance-three"code) with 64 10-bit code words to be employed as the station identification code.  Embedding this inthe shift-register code with period 1023 permits the code to be employed without punctuation, each ofthe telemetering station receivers simply putting received ones and zeros into a shift register.  Eachtime the given code combination arises identifying the particular station (barring for tuitous error combinationsof very low probability) it has been called.  The communication describes the properties and applicationof the code in some detail and the finding of the particular example to be employed on URAL, theSoviet-built drum computer donated to the Indian Statistical Institute by the United NationsTechnical Aid Administration (UNTAA). | Nadler, M.Sengupta, A.
49 | Scientific and Business Applications (Oracle Curve Plotter) | Fike, C. T.
50 | Statistical Programs for the IBM 650-Part II | Hamblen, J. W.
51 | On the Construction of Micro-Flowcharts | Gorn, S.Ingerman, P. Z.Crozier, J. B.
52 | An Efficient Method for Generating Uniformly DistributedPoints on the Surface on an n-Dimensional Sphere (Corrigendum) | Cook, J. M.
53 | Recommendations of the SHARE ALGOL Committee
54 | SALE, a Simple Algebraic Language for Engineers | Brittenham, W. R.Clark, K.Kuss, G.Thompson, H.Smith, A. O.
55 | An Algebraic Translator | Kaner, H.
56 | Proposed Standard Flow Chart Symbols
57 | J.E.I.D.A. and Its Computer Center
58 | LEM-1, Small Size General Purpose DigitalComputer Using Magnetic (Ferrite) Elements | The paper examines some of the questions ofdevelopment and construction of a general purpose digital computer using contactless magnetic (ferrite)and capacitive "DEZU" (long duration capacitive memory) elements, developed at the Laboratory of ElectricalModeling VINITYI AN SSSR, under the supervision of Professor L.I. Gutenmacher. | Machmudov, U. A.
59 | Survey of Progress and Trend of Developmentand Use of Automatic Data Processing in Businessand Management control Systems of the FederalGovernment, as of December 1957-III
60 | The Alpha Vector Transformation of a System of Linear Constraints | Wersan, S. J.
61 | IBM 709 Tape Matrix Compiler | Hornick, S. D.
62 | Multi-Dimensional Least-Squares Polynomial Curve Fitting | Lesh, F. H.
63 | Octal Diagrams of Binary Conception andTheir Applicability to Computer Design Logic | This paper dates back the genesis of binaryconception circa 5000 years ago, and octal diagrams about 4800 years ago, as derived by the Chinese ancients. It analyzes the applicability of binary trinities of the octal diagrams to modern electronic-digital-computer design logic. | Li, S. T.
64 | Remarks on ALGOL and Symbol Manipulation  | Green, J.
65 | ALGOL Sub-Committee Report - Extensions | Dijkstra, E. W.Heise, W.Perlis, J. A.Samelson, K.
66 | A Proposal for a Generalized Card Code for 256 Characters | Bemer, R. W.
67 | Central-European Computers | Blachman, N. M.
68 | The Role of the University in Computers,Data Processing and Related Fields | A study was made of university programs inthe United States in the fields of computers, data processing, operations research, and other closely relatedfields.  University policies, organization, administration, faculties, students, researches, curricula,equipment, and financing were investigated.  An integrated university program is recommended reflectingthe conviction that many present activities related to computers will develop into disciplines andas such are the legitimate province of the university scholar.  Details on a recommended GraduateSchool of "Computer Sciences" are given. | Fein, L.
69 | Statistical Programs for the IBM 650-Part I | A collection is given of brief descriptionsof statistical programs now in use in university computing centers which have IBM 650's. | Hamblen, J. W.
70 | Construction of a Set of Test Matrices | This paper develops the equations and propertiesof a set of test matrices which are useful in the determination of the accuracy of routines forfinding the inverse, determinant and/or eigenvalues of a matrix. | Aegerter, M. J.
71 | Proposal for a Feasible Programming System | This paper proposes designing a programmingfacility (itself involving a digital computer and a program) which will assist the preparation of large-scalereal-time programs.  This facility is to be capable of preparing programs for any of a varietyof machines having characteristics similar to those of the facility's computer.  One of the basic assumptionsis that there will be enough random-access storage available to avoid the necessity for segmentinga constructed program in any fashion other than a trivial one.  While this assumption is somewhat unrealistic,it is intended to provide an opportunity to concentrate on the other aspects of program construction. The programming system should stress the discovery in source program statements of as many errorsas possible, before attempting to construct an object program.  Among the computer characteristicswhich are advocated are a program interrupt scheme, a large set of characters, and indirect addressing. | Bagley, P. R.
72 | An Educational Program in Computing  | Hollingsworth, J.
73 | A Real Time Data Assimilator | Gschwind, H. W.
74 | A High-Speed Sorting Procedure | Shell, D. L.
75 | Parameter Estimation for Simple Nonlinear Models | Chow, W. M.
76 | Binary Conversion, With Fixed Decimal Precision, Of a Decimal Fraction | Taranto, D.
77 | On GAT and the Construction of Translators | Arden, B.Graham, R.
78 | Remarks on the Practical Solution of Characteristic Value Problems | This paper is concerned with the practicalsolution of characteristic value problem for an ordinary differential equation.  It is at once apparentthat sequential computers, be they digital or analog, solve initial value problems, rather than boundaryvalue problems, and some mathematical process must be found to compensate for the machine's inadequacy. (Compensating for machine imperfection is, of course, the normal activity of the numerical analyst.) A number of other papers have applied particular devices to particular problems.  The purpose of thisnote is to establish a mathematical framework or model for these practical procedures and thus assist inthe use and extension of the ideas in other particular problems. | Wouk, A.
79 | Programming for a Machine With an ExtendedAddress Calculational Mechanism | Schecher, H.
80 | A Technique for Computing Critical RotationalSpeeds of Flexible Shafts on an Automatic Computer | Schwartz, B. L.
81 | NORC High-Speed Printer | Gleissner, G. H.
82 | Handling Identifiers as Internal Symbols in Language Processors | Substitution of computer-oriented symbols forprogrammer-oriented symbols in language processors is examined and a feasible method for doing so is presented. | Williams, F. A.
83 | A Visit to Computation Centers in the Soviet Union | Carr III, J. W.
84 | Survey of Progress and Trend of Developmentand Use of Automatic Data Processing in Businessand Management Control Systems of the Federal Government,as of December 1957-II (Part 2 see CA590406)
85 | Error Analysis in Floating Point Arithmetic | Carr III, J. W.
86 | Survey of Progress and Trend of Developmentand Use of Automatic Data Processing in Business and Management Control Systems of the Federal Government, as of December 1957 | Controller General of the United States to the Congress of the United States
87 | A Note on a Method for Generating PointsUniformly on N-Dimensional Spheres | Muller, M. E.
88 | An Efficient Method for Generating Uniformly DistributedPoints on the Surface of an n-DimensionalSphere | Hicks, J. S.Wheeling, R. F.
89 | A Routine to Find the Solution of SimultaneousLinear Equations with Polynomial Coefficients | Larson, E. H.Marshall, D. P.
90 | Binary Arithmetic for Discretely VariableWord Length in a Serial Computer | Ercoli, P.Vacca, R.
91 | A Mathematical Procedure for Machine Division | Gilman, R. E.
92 | A Checklist of Intelligence for Programming Systems | A remarkable variation exists in the degreeof sophistication of various programming systems.  A particular manifestation is the jungle of assorteddevices for reproducing limited human decision procedures.  An attempt is made here to begin a systematicclassification of the various devices for educating the computer to take over the decision-makingfunctions of one or many human operators, both those that have been demonstrated feasible to date andthose that are highly desirable for the future. | Bemer, R. W.
93 | From Formulas to Computer Oriented Language | A technique is shown for enabling a computerto translate simple algebraic formulas into a three address computer code. | Wegstein, J. H.
94 | An Iterative Method for Fitting the Logistic Curve | An iterative method is given for finding alogistic curve of best least squares fit to a set of two-dimensional points. | Howell, J.R.
95 | Elimination of Special Functions from Differential Equations | A set of ordinary differential equations whichcontains mathematical functions requiring the use of subroutines for numerical solution by electroniccomputer, tabular data for numerical solution by hand calculation or function generators when analogmethods are applied can sometimes be expanded to an equivalent set of equations which do not containthe functions.  This is practical if these functions satisfy sufficiently simple differential equations. Thus among those functions which can be eliminated by this procedure are the trigonometric, inverse trigonometric,exponential, and many other transcendental functions. | Powers, J. E.
96 | On Computing Radiation Integrals | The relative merit and cost of four ways ofevaluating typical radiation integrals containing spherical Bessel functions are investigated.  These methodsare desk machine evaluation of a finite series, integration of the appropriate differential equationby a Reeves Electronic Analog Computer and by a Litton 40 IBM 704 computer.  Results are generally applicableto equations separated from a Helmholtz or wave equation. | Hansen, R. C.Bailin, L. L.Rutishauser, R. W.
97 | Signal Corps Research and Development onAutomatic Programming of Digital Computers | Luebbert, Capt. W. F.Collom Jr., Capt. P. W.
98 | The Arithmetic Translator-Compiler ofthe IBM FORTRAN Automatic Coding System | Sheridan, P. B.
99 | Possible Modifications to the International Algebraic Language | Green, J.
100 | Recursive Subscripting Compilers and List-Types Memories | Carr III, J. W.
101 | Nuclear Reactor Codes | Nather, V.Sangren, W.
102 | A Comparison of 650 Programming Methods | Curtz, T. B.Riordan, J. F.Spohn,M.
103 | COPE (Console Operator Proficiency Examination)* | Each year electronic computers become moresophisticated, and the programs they must process become more complex.  Because of this,dependence ofthose in computing on the skill and experience of operators is increasing.  At the same time, selectionand training of qualified operators grows more difficult.  To meet the need for a quick, accurate, uniformoperator test and training aid, the authors have developed COPE (Console Operator Proficiency Examination),outlined below.  While this examination is programmed specifically for the IBM 705 Model II withtwo Tape Record Coordinators, similar programs could be developed for other computers. | Farbman, D.Ketover, R.
104 | Digital Simulation of Discrete Flow Systems* | The discrete flow systems discussed are characterizedby the movement of randomly arriving items along interacting channels.  Programing a digitalcomputer to simulate such systems utilizes some techniques not common in other approaches to physicalproblems.  The principal portion of the paper is a discussion of two simulation studies that illustratesome of the programming problems involved. One is of an extensive package-handling plant, with theobjective being optimization of parameters such as storage capacities and processing rates.  In the other,air traffic flow and control procedures are simulated to compare the effects of alternative control decisions. | Moore, C. J.Lewis, T. S.
105 | Two Methods for Word Inversion on the IBM 709 | Price, R. A.Jardins, P. D.
106 | A Method for Overlapping and Erasure of Lists | An important property of the Newell-Shaw-Simonscheme for computer storage of lists is that data having multiple occurrences need not be storedat more than one place in the computer.  That is, lists may be "overlapped."  Unfortunately, overlappingposes a problem for subsequent erasure.  Given a list that is no longer needed, it is desired to erasejust those parts that do not overlap other lists.  In LISP, McCarthy employs an elegant but inefficient solutionto the problem.  The present paper describes a general method which enables efficient erasure.  Themethod employs interspersed reference counts to describe the extent of the overlapping. | Collins, G. E.
107 | Multiple Precision Arithmetic | Pope, D. A.Stein, M. L.
108 | Programmed Error Correction in Project Mercury | Dimsdale, B.Weinberg, G. M.
109 | A Note on Approximating e^x | Lubkin, S.
110 | Fibonaccian Searching | Ferguson, D. E.
111 | On Programming the Numerical Solution of Polynomial Equations | Numerical techniques are presented for computingthe roots of polynomial equations.  By applying the recommended scaling and inversion rules, the basicBairstow and Newton-Raphson iterative techniques can be applied with great reliability.  Both a high degreeof accuracy and rapid convergence are realized.  Numerical examples are shown to illustrate the pitfallsand to show how these are circumvented by application of the recommended procedures. | Ellenberger, K. W.
112 | Numerical Solution of the Polynomial Equation (Algorithm 30) | Ellenberger, K. W.
113 | Survey of Coded Character Representation | Bemer, R. W.
114 | Survey of Punched Card Codes | Smith, H. J.Williams, F. A.
115 | Optimizers: Their Structure | Wheeling, R. F.
116 | The Sumador Chino | On a recent motor trip through Mexico, the writercame across on adding device which was referred to as a sumador chino (Chinese adder).  A survey of the moreavailable literature on the history of mathematics and on instruments of calculation has uncovered no referenceto such a device.  The purpose of this communication is to enlist the help of other members in bringing tolight whatever may be known concerning the evolution and present status of the sumador chino. | Rogers, J. L.
117 | An Estimation of the Relative Efficiency of Two Internal Sorting Methods | Nagler, H.
118 | Character Scanning on the IBM 7070 | Speckhard, A. E.
119 | Note on Eigenvalue Computation | Andrus, J. F.
120 | A Simple Technique for Coding Differential Equations | Sefton, P.Vaillancourt, R.
121 | Over-all Computation Control and Labelling | Holt, A.
122 | Least Squares Fitting of a Great Circle Through Points on a Sphere | DeWitte, L.
123 | Compilation for Two Computers with NELIAC | NELIAC, a compiler based on ALGOL, was developedat the U.S. Navy Electronics Laboratory, San Diego,California, as a"boot-strap" compiler for the RemingtonRand Univac COUNTESS computer. This compiler was used to generate a version of itself which, runningas a COUNTESS program, generated machine code for the Control Data Corporation CDC-1604.  All threeversions of NELIAC accepted essentially identical input language. | Masterson Jr., K. S.
124 | An Algorithm for the Assignment Problem | The assignment problem is formulated and brieflydiscussed.  An efficient algorithm for its solution is presented in ALGOL code.  An empirical relationbetween solution time and the size of the problem is given, based on extensive experimentscarried out on a digital computer. | Silver, R.
125 | Polynomial Transformer (Algorithm 29) | Mackinney, J. G.
126 | Least Squares Fit By Orthogonal polynomials (Algorithm 28) | Mackinney, J. G.
127 | ASSIGNMENT (Algorithm 27) | Silver, R.
128 | ROOTFINDER III (Algorithm 26) | Herroit, J. G.
129 | ROOTFINDER II (Algorithm 15) | Forsythe, G. E.Herriot, J. G.
130 | Real Zeros of an Arbitrary Function (Algorithm 25) | Leavenworth, B.
131 | Solution of Tri-Diagonal Linear Equations (Algorithm 24) | Leavenworth, B.
132 | Math Sort (Algorithm 23) | Feurzeig, W.
133 | Riccati-Bessel Functions of First And Second Kind (Algorithm 22) | Oser, H.
134 | Bessel Function for a Set of Integer Orders(Algorithm 21) | Borsch-Supan, W.
135 | Digital Computers in Universities-IV | Reeves, R. F.
136 | A Note on the Calculation of Interest | Ingerman, P. Z.
137 | Evaluating Numbers Expressed as Strings of English Words | Swift, C. J.
138 | Some Thoughts on Reconciling VariousCharacter Set Proposals (Corrigenda) | Voorhees, E. A.
139 | Binomial Coefficients (Algorithm 19) | Kenyon, R. R.
140 | Crout with Pivoting (Algorithm 16) | Forsythe, G. E.
141 | Some Thoughts on Parallel Processing | Yarbrough, L. D.
142 | Comments on a Technique for Counting Ones  | Sherman, P. M.
143 | A List of Computer Systems Programs forthe IBM 650, DATATRON 205, and UNIVAC SS-80 | Romberg, A.
144 | Do It by the Numbers-Digital Shorthand | Present communications systems transmit singlecharacters in groups of coded pulses between simple terminal equipments.  Since English words form onlya sparse set of all possible alphabetic combinations, present methods are inefficient when computer systemsare substituted for these terminals.  Using numeric representations of entire words or common phrases (ratherthan character-by-character representations) requires approximately one-third of present transmissiontime.  This saving is reflected in overall costs.  Other benefits accrue in code and language translationschemes. Provision is made for transmission of purely numeric and/or binary streams, and for singlecharacter-transmission of non-dictionary words such as the names of people or places. | Bemer, R. W.
145 | Automatic Graders for Programming Classes | Hollingsworth, J.
146 | The Use of Computers in Engineering Classroom Instruction  | On April 29-30, the Computer Committee of theCollege of Engineering, University of Michigan, which acts as a steering committee for The Ford FoundationProject on the Use of Computers in Engineering Education, held a special conference to discuss certaintimely topics pertinent to the Ford Project.  This report contains a condensed transcription ofthe key ideas offered by the conference attendees on selected topics.  | Katz, D. L.
147 | Report on a Conference of University Computing Center Directors
148 | Digital Computers in Universities-III | Reeves, R. F.
149 | A Decision Rule for Improved Efficiency in SolvingLinear Programming Problems with the Simplex Algorithm | Dickson, J. C.Frederick, F. P.
150 | Rational Interpolation by Continued Fractions (Algorithm 18) | Floyd, R. W.
151 | TRDIAG (Algorithm 17) | Sprague III, C. D.
152 | CROUT With Pivoting (Algorithm 16) | Forsythe, G. E.
153 | Comments from a FORTRAN User | Blatt, J. M.
154 | Rapidly Convergent Expressions for Evaluating e^x | Berin, A.
155 | Trie Memory | Fredkin, E.
156 | An Introductory Problem in Symbol Manipulation for the Student | Rosin, R. F.
157 | Digital Computers in Universities -II | Reeves, R. F.
158 | ROOTFINDER II (Algorithm 15) | Thacher Jr., H. C.
159 | ROOTFINDER (Algorithm 2) | Thacher Jr., H. C.
160 | ROOTFINDER II (Algorithm 15) | Thacher Jr., H. C.
161 | Abbreviating Words Systematically (Corrigendum) | Barrett, J. A.Grems, M.
162 | A Variant Technique for Counting Ones | Frieden, H.
163 | Counting Ones on the IBM 7090  | Kutler, S. S.
164 | A Short Study of Notation Efficiency | Smith Jr., H. J.
165 | NELIAC-A Dialect of ALGOL | Huskey, H. D.Halstead, M. H.
166 | Programming Compatibility in a Familyof Closely Related Digital Computers | Luebbert, W. F.
167 | Combining ALGOL Statement Analysis with Validity Checking | McIsaac, P.
168 | Multiprogram Scheduling Parts 3 and 4 SchedulingAlgorithm and External Constraints | Codd, E. F.
169 | The Multilingual Terminology Project | Holmstrom, J. E.
170 | Some Thoughts on Reconciling Various Character Set Proposals | Voorhees, E. A.
171 | Digital Computers in Universities (Part I)  | Reeves, R. F.
172 | Complex Exponential Integral (Algorithm 13) | Beam, A.
173 | ATLAS a new concept in large computer design
174 | Interval Estimation of the Time in One Stateto Total Time Ratio in a DoubleExponential Process | Neal, W. R.
175 | The Solution of Simultaneous Ordinary DifferentialEquations Using a General Purpose Digital Computer | Anderson, W. H.
176 | Symbol Manipulation by Threaded Lists (Corrigendum) | Perlis, A. J.Thornton, C.
177 | Solution of Polynomial Equation by BairstowHitchcock Method, A. A. Grau Communications ACM, February, 1960 (Algorithm) | Thacher Jr., H. C.
178 | ROOTFINDER (Algorithm) | Thacher Jr., H. C.
179 | Evaluation of the Legendre Polynomial Pn(X) by Recursion (Algorithm) | Galler, G. M.
180 | Evaluation of the Laguerre Polynomial Ln(X) by Recursion (Algorithm) | Galler, G. M.
181 | Evaluation of the Hermite Polynomial Hn(X) by Recursion (Algorithm) | Galler, G. M.
182 | Evaluation of the Chebyshev Polynomial Tn(X) by Recursion (Algorithm)  | Galler, G. M.
183 | Conversion Between Floating Point Representations | Perry, C.
184 | A Short Method for Measuring Error in a Least-Squares Power Series | Robinson, S. M.Struble, G. W.
185 | Multiprogram Scheduling Parts 1 and 2.  Introduction and Theory* | In order to exploit fully a fast computer whichpossesses simultaneous processing abilities, it should to a large extent schedule its own workload. The scheduling routine must be capable of extremely rapid execution if it is not to prove self-defeating. The construction of a schedule entails determining which programs are to be run concurrently and which sequentiallywith respect to each other.  A concise scheduling algorithm is described which tends to minimizethe time for executing the entire pending workload (or any subset of it), subject to external constraintssuch as precedence, urgency, etc.  The algorithm is applicable to a wide class of machines. | Codd, E. F.
186 | An Algorithm Defining ALGOL Assignment Statements (Addendum) | Floyd, R. W.
187 | Compiling Connectives | Swift, C. J.
188 | The Department of Computer Mathematics at Moscow State University | Berezin, I. S.
189 | The Future of Automatic Digital Computers | Booth, A. D.
190 | Bendix G-20 System
191 | Abbreviating Words Systematically | Barrett, J. A.Grems, M.
192 | A Technique for Counting Ones in a Binary Computer | Wegner, P.
193 | A Start at Automatic Storage Assignment | Patrick, R. L.
194 | Divisionless Computation of Square Roots Through Continued Squaring | Sarafyan, D.
195 | What is a Code? | Patterson, G. W.
196 | Report on the Algorithmic Language ALGOL 60 | Naur, P.Backus, J.
197 | An Imaginary Number System | Knuth, D. E.
198 | A High-Speed Multiplication Process for Digital Computers | Gurzi, F.
199 | Euclidian Algorithm (Algorithm 7) | Claussen, R.
200 | Bessel Function I, Asymptotic Expansion (Algorithm 6) | Clarke, D. S.
201 | Bessel Funtion I, Series Expansion (Algorithm 5) | Clarke, D. S.
202 | A Control System For Logical Block Diagnosis With Data Loading | This paper describes a section of an integrateddiagnostic monitor system which facilitates the checking of sections of instructions or subroutinesanywhere in the object program.  A new method of specifying all diagnostic operations in a format similarto a computer program makes the system convenient to use and relatively simple to understand.  The paperalso describes a number of other novel diagnostic features which can be included in the system. | Senko, M. E.
203 | Decoding Combinations of the First n Integers Taken k at a Time | Brown, R. M.
204 | Proving Theorems by Pattern Recognition I | Wang, H.
205 | Macro Instruction Extensions of Compiler Languages | Macroinstruction compilers constructed froma small set of functions can be made extremely powerful.  In particular, conditional assembly, nesteddefinitions, and parenthetical notation serve to make a compiler capable of accepting verygeneral extensions to its ground language. | McIlroy, M. D.
206 | Symbol Manipulation in XTRAN | Green, J.
207 | Syntactic and Semantic Augments to ALGOL | Smith, J. W.
208 | An Introduction to Information Processing Language V | Newell, A.Tonge, F. M.
209 | Symbol Manipulation by Threaded Lists | Perlis, A. J.Thornton, C.
210 | Recursive Functions of Symbolic Expressionsand Their Computation by Machine, Part I | McCarthy, J.
211 | Share Standard Flow Chart Symbols | Grems, M.
212 | Bisection Routine (Algorithm 4) | Gorn,S.
213 | Numerical Inversion of Laplace Transforms | Schmittroth, L. A.
214 | An Algorithm Defining ALGOL Assignment Statements | Floyd, R. W.
215 | The Execute Operations-A Fourth Mode of Instruction Sequencing | Brooks, F. P.
216 | A Note on the Use of the Abacus in Number Conversion | Kanner, H.
217 | Soviet Computer Technology-1959
218 | Computer Preparation of a Poetry Concordance | Painter, J. A.
219 | Marriage-with Problems | Shuchter, J. P.
220 | A New Method of Computation of Square Roots Without Using Division | Traub, J. F.
221 | The Basic Side of Tape Labeling | Logan, W. A.
222 | Coding Isomorphisms | The coding of external symbols into symbolsinternal to a compute can sometimes be carried out in such a way that relevant informational propertiesare preserved, but in a form much more easily dealt with.  A case in point is presented. | Lynch, W. C.
223 | Selfcipher: Programming | Pelta, H. N.
224 | Sequential Formula Translation | The syntax of an algorithmic language suchas ALGOL is conveniently described as a sequence of states indicated by an element called cellar.  Transitionsare controlled by admissible state-symbol pairs which may be represented by a transition matrix.This description of syntax furnishes at the same time an extremely simple rule for translating into machineprograms statements in the algorithmic language.  Sequential treatment, however, is not feasible in the caseof certain optimizing processes such as recursive address calculation. | Samelson, K.Bauer, F. L.
225 | A Techniquefor Handling Macro Instructions (Corrigendum) | Greenwald, I. D.
226 | Solution of Polynomial Equation byBairstow-Hitchcock Method (Algorithm 3) | Grau, A. A.
227 | ROOTFINDER (Algorithm 2) | Wegstein, J.
228 | QUADI (Algorithm 1) | Herbold, R. J.
229 | A Terminology Proposal | Gruenberger, F.
230 | A Proposal for Character Code Compatibility | Bemer, R. W.
231 | A Proposal for a Set of Publication Standards for Use by the ACM | Kent, E. R.
232 | A High-Speed Sorting Procedure | Frank, R. M.Lazarus, R. B.
233 | Abstracts-Additional Nuclear Reactor Codes | Nather, V.Sangren, W.
234 | A SAP-Like Assembly Program for the IBM 650 | Speckhard, A. E.
235 | Two Think Pieces | Bagley, P. R.
236 | Soviet Cybernetics and Computer | This article records observations on Sovietresearch and technology in cybernetics and computer science, made by the author during a visit to the SovietUnion as a delegate to the IFAC Congress on Automatic Control held in Moscow in the summer of 1960. | Feigenbaum, E. A.
237 | Computer Production of Peek-A-Boo Sheets | Robbins, D.
238 | Simulation and Analysis of Biochemical Systems | Garfinkel, D.Rutledge, J. D.Higgins, J. J.
239 | Inefficiency of the Use of Boolean Functionsfor Information Retrieval Systems | Verhoeff, J.Goffman, W.Belzer, J.
240 | Processing Magnetic Tape Files with Variable Blocks | Graham, J. W.Sprott, D. A.
241 | Machine Calculation of Moments of a Probability Distribution | A method is presented for the calculation on amachine of the moments of a probability distribution, necessitating little more than n additions and n referencesto memory for each moment, instead of the minimum of n multiplication, 2n additions, and 2n referencesto memory required by the most straightforward method (where n is the number of entries in the probabilitydistribution).  The method is directly applicable when a tabulated distribution exists, as when it hasbeen computed by repeated convolution; but in this case it conserves both time and accuracy. | Lechner, J. A.
242 | Notes on Geometric Weighted Check Digit Verification | This note describes a method for utilizinggeometric weight modulus 11 checking digits on a computer which does not have either multiplication ordivision.  In addition some attempt has been made to show some limitations of this system. | Wilson, J. G.
243 | N-Dimensional Codes for Detecting and Correcting Multiple Errors | The paper introduces a new family of codesfor detecting and correcting multiple errors in a binary-coded message.  The message itself is arranged(conceptually) into a multidimensional rectangular array.  The processes of encoding and error detectionare based upon parity evaluations along prescribed dimensions of the array.  Effectiveness of the codesis increased by introducing a "system check bit", which is essentially a parity check on the other paritybits.  Only three-dimensional codes are discussed in this paper with parity evaluations along the horizontal,the vertical, and one main diagonal.  However, the family of codes is not restricted to three dimensions,as evidenced by the discussion by Minnick and Ashenhurst on a similar multidimensional single-bitselection plan used for another purpose [6].  A four-dimensional code, correcting three and detectingfour errors, has been developed; the extension to higher-dimensional codes with greater correction power is straightforward. | Rubinoff, M.
244 | Incomplete Elliptic Integrals (Algorithm 73) | Kriebel, D. C.
245 | A Set of Associate Legendre Polynomials of the Second Kind (Algorithm 62) | Herndon, J. R.
246 | Least-Squares Fit by Orthogonal Polynomials (Algorithm 28) | MacMillan, D. B.
247 | Incomplete Elliptic Integrals (Algorithm 73) | Jefferson, D. K.
248 | What is Proprietary In Mathematical Programming?-Impressionsof a Panel Discussion | A panel discussion on "What is Proprietaryin Mathematical Programming?" was sponsored by the Special Interest Committee on Mathematical Programmingof the ACM during a Hall of Discussion/on September 7th at the 16th National ACM meeting in Los Angeles.  Thisnote consists solely of the impressions garnered by the moderator of the panel and does not necessarilyrepresent the position of any of the panelists or other participants in the discussion. | Smith, L. W.
249 | Specification Languages for Mechanical Languagesand Their Processors*-A Baker's Dozen | Gorn, S.
250 | An Engineering Application of Logic-Structure Tables | Nickerson, R. C.
251 | Ballistic Cam Design  | This paper presents a digital computer programfor the rapid calculation of manufacturing data essential to the design of preproduction cams whichare utilized in ballistic computers of tank fire control systems.  The cam profile generated introducesthe superelevation angle required by tank main armament for a particular type ammunition. | Archambault, M.
252 | Programming a Duplex Computer System | This paper describes a method of duplex-computerprogramming that has been used with two computers in a military defense system.  The method combines specialprograms with a basic data processing program package.  The duplex operation gives the system greaterreliability.  After achieving the required level of integration, both computers do similar processingon the same inputs and continually cross-check the intermediate and final results. | Dow, J.
253 | On a Program for Ray-Chaudhuri's Algorithmfor a Minimum Cover of an Abstract Complex | Foata, D. C.
254 | SMALGOL-61 | Prior to and during the 1961 Western JointComputer Conference, several people in the Joint Users Groups had expressed interest in defining a "smalgol"language.  This is to be an ALGOL language for use with compilers on relatively small size computers. A preliminary report resulted.  At the ACM National Conference four months later, after consideringseveral counter proposals, a final version was agreed upon by a subcommittee.  The recommendationsof the Subcommittee for a standard subset of ALGOL 60 for use on small computers is presented here. | Bachelork, G. A.Dempster, J. R. H.Knuth, D. E.Speroni, J.
255 | Augmentation (Algorithm 68) | Breed, L. M.
256 | A Set of Test Matrices (Algorithm 52) | Dubay, G. H.
257 | Invert (Algorithm 42) | Knapp, A. W.Shaman, P.
258 | Composition Generator (Algorithm 72) | Hellerman, O.Ogden, S.
259 | Permutation (Algorithm 71) | Coveyou, R. R.Sullivan, J. G.
260 | Interpolation By Aitken (Algorithm 70) | Mifsud, C. J.
261 | Tape Splitting | Moore, D. P.
262 | MAP | Moore, C. L.Ruwe, M. L.
263 | Library Loading with Alternate Routine Selection | Moore, D. P.
264 | A Generalized Polyphase Merge Algorithm  | Reynolds, S. W.
265 | Low Level Language Subroutines for Use Within Fortran | This paper describes some subroutines, codedin symbolic languages and for use within Fortran coded programs, to deal with "special arithmetic" (e.g.multi-precision arithmetic), symbol manipulation, bit manipulation and expanded character set input-output, and visual display. | Barnett, M. P.
266 | Fitting Spheres by the Method of Least Squares | Robinson, S. M.
267 | Some Proposals for Improving the Efficiency of ALGOL 60 | Wilkes, M. V.
268 | Stochastic Evaluation of a Static Storage Allocation | Cohen, L. J.
269 | Core Allocation Based on Probability | Riskin, B. N.
270 | Techniques for Storage Allocation Algorithms  | Kelley Jr., J. E.
271 | A Semi-Automatic Storage Allocation System at Loading Time | Heising, W. P.Larner, R. A.
272 | A Storage Allocation Scheme for ALGOL 60 | A storage allocation scheme for a machinewith a 2048 instruction core store and a magnetic drum is described.  The use of the drum for storingprogram blocks and/or data must be directed by the programmer through auxiliary information in the ALGOLprogram.  The administrative routines controlling the storage at run time are described in full.  A detailed example is given. | Jensen, J.Mondrup, P.Naur, P.
273 | Experience in Automatic Storage Allocation  | Collins Jr., G. O.
274 | Dynamic Storage Allocation in the Atlas Computer,Including an Automatic Use of a Backing Store | Fotheringham, J.
275 | Dynamic Storage Allocation for an Information Retrieval System | Sams, B. H.
276 | Program Organization and Record Keeping for Dynamic Storage Allocation | The material presented in this paper is partof the design plan of the core allocation portion of the ASCII-MATIC Programming System.  Project ASCII-MATICis concerned with the application of computer techniques to the activities of certain headquartersmilitary intelligence operations of the U.S. Army. | Holt, A. W.
277 | Problems of Storage Allocation ina Multiprocessor Multiprogrammed System | Maher, R. J.
278 | A General Formulation of storage Allocation | Formalization of a general computer storageallocation process is attempted.  With a given computer M is associated a fictitious computer M' essentiallyidentical to M except in respect to possession of unbounded primary storage.  Mappings of the totalstorage set (internal and external) of M into the direct address set of M' are introduced.  A programsequence P for M' is termed M-admissible (relative to a specific execution time period) if there is a mappingunderwhich P and its effective data referents are all located in the direct address set of M.  Storageallocation is considered as a process of establishing for an arbitrary M' program  a sequence of mappings, a decouplingof the program into M-admissible subprograms and a linking set of interludes.  An existence proofin terms of a completely interpretive M program as indicated.  Some special cases are discussed.  Variousrestrictions on generality of M' programs are considered under which more practical realizationof allocation processes becomes tractable. | Roberts Jr., A. E.
279 | The Case for Dynamic storage Allocation  | Sams, B. H.
280 | A Preplanned Approach to a Storage Allocating Compiler | O'Neil, R. W.
281 | Putting a Hex on e^x | Recent notes on approximate natural antilogyhave not considered indirect formulations for describing e^x.  In this note we produce a particularfamily of very fast, high precision and eminently practical exponential evaluation formulas derived from one such formulation. | Feurzeig, W.
282 | Optimum Tape-Writing Procedures | Consider a magnetic tape system with a readcheck after writing.  Where an error occurs in writing a record, a programmed error routine may eitherbypass some or all of the area on tape or try to rewrite the record on the same area.  This paper evaluatesthese two procedures on the basis of expected loss of computer time and develops a decision rule forselecting the optimum procedure.  The rule depends critically on the number of times the tape being writtenwill be used in the future.  In the case where the optimum procedure is to bypass an area, a seconddecision-the size of the area to be bypassed-is necessary.  A formula is developed to determine theoptimum area to be bypassed for each procedure. | Hutchinson, K.
283 | Inversion of a Complex Matrix | Tornheim, L.
284 | Manipulation of Algebraic Expressions | An algorithm for algebraically manipulatingexpressions of the form SUM{CiPi, i=1,...,n}; has been developed in conjunction with the development of programsfor systems analysis problems.  This algorithm enablesus to derive over-all system transfer functionsfrom algebraically described block diagrams of any linear continuous multi-loop feedback system.  Themachine representation of the derived expression, is, by virtue of the algorithm, in a form which simplifiesthe task of compiling.  The algorithm was developed for a particular purpose in connection withsystem analysis studies.  However, its application as a mathematical device extends far beyondthe confines of the original problem. | Rom, A. R. M.
285 | Solution of Tridiagonal Matrices | Wenrick, R. C.Houghton, A. V.
286 | An Iterative Method for Inversion of Power Series | Bramhall, J. N.
287 | The Generalized Important Event Technique | Shapiro, N.Vreenegoor, H.
288 | A Syntactical Chart of ALGOL 60 | Taylor, W.Turner, L.Waychoff, R.
289 | Critical Path Scheduling (Algorithm 40) | Alexander, N. P.
290 | Chain Tracing (Algorithm 69) | Mayoh, B. H.
291 | Use of MOBOL in PreparingRetrieval Programs | Hoffman, J.Opler, A.
292 | An Information Retrieval Language for Legal Studies | Kehl, W. B.Horty, J. F.Bacon, C. R. T.Mitchell, D. S.
293 | The Applied Mathematics Laboratory of the David W. Taylor Model Basin | Richstone, M.
294 | An Imaginary Number System | Knuth, D.
295 | Rational Approximations for the Error Function and for Similar Functions | Clendenin, W. W.
296 | A Note on Multiple Precision Arithmetic | Cox, A. G.Luther, H. A.
297 | A Note on Fitting Great Circles by Least Squares | Marcus, C. F.
298 | A 48-Bit Pseudo-Random Number Generator | A new 48-bit pseudo-random number generator, suitablefor several computers, was tested statistically for randomness to determine its adequacy for use in MonteCarlo programs.  Frequency tests, distributions of certain low-order moments, runs up and down, and runsabove and below the mean were applied to one-half million generated numbers lying within the interval(0,1) and to three sets of integers obtained from specified bits within the generated numbers.  Thesetests substantiated the randomness of all numbers except for the set of integers coming from the least significant bits. | Kuehn, H. G.
299 | A Generalized Polyphase Merge Algorithm | Reynolds, S. W.
300 | COBOL: A Sample Problem | A simplified Merchandise Control problem hasbeen chosen for presenting COBOL to users and potential users of computing systems.  A mythical departmentstore, "E. Language Bros., Inc.", is programming in the COBOL language one of the many runs on its computer. | Mackinson, T. N.
301 | A Set of Test Matrices (Algorithm 52) | Gilbert, H. E.
302 | Augmentation (Algorithm 68) | Rice, H. G.
303 | Some Basic Terminology Connected WithMechanical Languages and Their Processors | The suggestions in this paper are part of theterminology used in work for the University of Pennsylvania's Office of computer Research and Education. The work is jointly supported by the National Science Foundation and the Air Force Office of Scientific Research. | Gorn, S.
304 | Nth Roots of a Complex Number (Algorithm 53) | Nestor Jr., C. W.
305 | CRAM (Algorithm 67) | Caffrey, J.
306 | INVRS (Algorithm 66) | Caffery, J.
307 | FIND (Algorithm 65) | Hoare, C. A. R.
308 | QUICKSORT (Algorithm 64) | Hoare, C. A. R.
309 | PARTITION (Algorithm 63) | Hoare, C. A. R.
310 | A Set of Associate Legendre Polynomialsof the Second Kind (Algorithm 62) | Herndon, J. R.
311 | Procedures for Range Arithmetic (Algorithm 61) | Gibb, A.
312 | A Further Note on Approximating e^x | Olivier, D.
313 | An Iterative Method for Inversion of Power Series | Bramhall, J. N.
314 | A Divisionless Method of Integer Conversion | Clarkson, W. K.Prince, B. M.
315 | Solution of Tridiagonal Matrices | Wenrick, R. C.
316 | An Algorithm for Equivalence Declarations | Arden, B. W.Galler, A.Graham, R. M.
317 | On The Approximation of Curves by Line Segments Using Dynamic Programming | Bellman, R.
318 | Combat Vehicle Firing Stability (Active Suspension) | Fischer, C. M.
319 | On a Class of Iteration Formulas and Some Historical Notes | The class of iteration formulas obtainableby rational approximations of "Euler's formula" is derived with the corresponding error estimates. Some historical notes on iterative procedures are followed by a derivation of Euler's formula with theassociated error estimate in a new notation which simplifies the error estimate and suggests generalizations. The final section considers the Pade approximants to the "Euler polynomial" and shows how a number of knownformulas may be derived from this unified approach.  There is a short discussion of the "best" formula. | Traub, J. F.
320 | Logic-Structure Tables | Logic tables are an excellent way of developingand expressing the logic required in procedures, operations, systems and circuits.  A set of rules forwriting and using logic tables is explained by means of some simple examples.  Then the logic structureof a vending machine is given in which two logic tables are used.  Logic tables are two-dimensional innature, enabling us to fully express and consider both the sequential and parallel aspects of logic.  Theycan be compiled directly into a computer program and so eliminate the need for flow charting and hand coding. | Cantrell, H. N.King, J.King, F. E. H.
321 | ALGOL 60 Confidential | The ALGOL 60 Report,* when first encountered,seems to describe a very complex language which will be difficult to learn.  The "metalinguistic formulae"admirably serve the purpose of precisely specifying a language, but they are certainly not very readablefor a beginner.  However, experience has shown that once the report is explained it is in fact easy to learnALGOL and to write algorithms in it.  The language is so general and powerful it can handle an enormousclass of problems.  It is not hard to learn those parts of ALGOL present in other compiler languages: howto write assignment and go to and for statements, etc.  Indeed, a lot of the unnecessary restrictionsimposed by other compiling languages have finally been lifted.  But ALGOL also allows many unobvious thingsto be written, as we will see later, and herein lies a problem: ALGOL seems to have become too general. So many restrictions have been lifted that a lot of technical details crop up which are hard to learnand to use correctly.  In this paper some of the more obscure features of the language are consideredand their usefulness is discussed.  Remarks are based on the authors' interpretations of the ALGOL 60 Report. | Knuth, D. E.Merner, J. N.
322 | Operational Compatibility of Systems-CONVENTIONS | The General Standards Committee of the SHAREorganization has devoted considerable effort to the problem of operating a computer efficiently inview of the growing number of programming systems available.  Each of these programming systems has beencoded to utilize a fixed set of hardware components without recognizing the fact that others may be occupyinga storage medium required by the first.  These incompatibilities are currently resolved by manually settingup the computer for each system as required.  The following set of conventions is being consideredto minimize computer set-up time.  They are of sufficiently broad interest that we feel other computerusers should be aware of them. -George F. Ryckman, Chairman | Bright, H. S.
323 | The State of Digital Computer Technology in Europe | Blachman, N. M.
324 | Romberg Integration (Algorithm 60) | Bauer, F. L.
325 | Numerical Solution of the Polynomial Equation (Algorithm 30) | Alexander, W. J.
326 | MATHSORT (Algorithm 23) | Ranshaw, R. W.
327 | Zeros of a Real Polynomial by Resultant Procedure (Algorithm 59) | Bareiss, E. H.Fisherkeller, M. A.
328 | Matrix Inversion (ALgorithm 58) | Cohen, D.
329 | Automatic Abstracting and Indexing Survey and Recommendations | In preparation for the widespread use of automaticscanners which will read documents and transmit their contents to other machines for analysis, this reportpresents a new concept in automatic analysis: the relative-frequency approach to measuring  the significanceof words, word groups, and sentences.  The relative-frequency approach is discussed in detail,as is its application to problems of automatic indexing and automatic abstracting.  Included in thereport is a summary of automatic analysis studies published as of the date of writing.  Conclusions arethat point toward more sophisticated mathematical and linguistic techniques for the solution of problems of automatic analysis. | Edmundson, H. P.Wyllys, R. E.
330 | A Method for Evaluating the Area of the Normal Function | Baker, F. B.
331 | Successive Approximations and Computer StorageProblems in Ordinary Differential Equations | Bellman, R.
332 | An Indirect Chaining Method for Addressing on Secondary Keys | Methods for entering random access files onthe basis of one key are briefly surveyed.  The widely used chaining method, based on a pseudo-randomkey transformation, is reviewed in more detail.  An efficient generalization of the chaining methodwhich permits recovery on additional keys is then presented. | Johnson, L. R.
333 | Design of an Improved* Transmission/Data Processing Code | Bemer, R. W.Smith Jr., H. J.Williams Jr., F. A.
334 | Division and Square Root in the Quater-Imaginary Number System | Nadler, M.
335 | Some Numerical Experiments Using Newton's Methodfor Nonlinear Parabolic and EllipticBoundary-Value Problems | Using a generalization of Newton's method, a nonlinearparabolic equation of the form U(t)-U(xx)=g(U) and a nonlinear elliptic equation U(xx)+U(yy)=exp(U)are solved numerically Comparison of these results with results obtained using the Picard iteration procedureshow that in many cases the quisi linearization method offers substantial advantages in both time and accuracy. | Bellman, R.Juncosa, M. L.Kalaba, R.
336 | A Practical Technique for the Determination ofthe Optimum Relaxation Factor of the Successive Over-Relaxation Method | Kulsrud, H. E.
337 | Further Survey of Punched Card Codes | Ross, H. M.
338 | GROUT II (Algorithm 43) | Thacher Jr., H.C.
339 | Real Exponential Integral (Algorithm 20) | Alexander, W. J.Thacher Jr., H. C.
340 | Legendre Polynomial (Algorithm 13) | Herndon, J.
341 | Chebyschev Polynomial (Algorithm 10) | Herndon, J.
342 | Solution of Polynomial Equation by Barstow-Hitchcock (Algorithm 3) | Herndon, J.
343 | On Frequently Occurring Errors in ALGOL 60 Programs (Algorithm 25) | Herndon, J.
344 | Ber or Bei Function (Algorithm 57) | Herndon, J. R.
345 | Complete Elliptic Integral of the Second Kind (Algorithm 56) | Herndon, J. R.
346 | Complete Elliptic Integral of the First Kind (Algorithm 55) | Herndon, J. R.
347 | Gamma Function for Range 1 to 2 (Algorithm 54) | Herndon, J. R.
348 | Nth Roots of a Complex Number (Algorithm 53) | Herndon, J. R.
349 | A Set of Test Matrices | Herndon, J. R.
350 | Adjust Inverse of a Matrix When an Element is Perturbed (Algorithm 51) | Herndon, J. R.
351 | Inverse of a Finite Segment of the Hilbert Matrix (Algorithm 50) | Herndon, J. R.
352 | Spherical Neumant Function (Algorithm 49) | Herndon, J. R.
353 | Logarithm of A Complex Number (Algorithm 48) | Herndon, J. R.
354 | Associated Legendre Functions of the First Kindfor Real or Imaginary Arguments (Algorithm 47) | Herndon, J. R.
355 | Exponential of a Complex Number (Algorithm 46) | Herndon, J. R.
356 | INTEREST (Algorithm 45) | Ingerman, P. Z.
357 | Bessel Functions Computed Recursively (Algorithm 44) | Wojcicki, M. E.
358 | Crout with Pivoting II (Algorithm 43) | Thacher Jr., H. C.
359 | INVERT (Algorithm 42) | Wood, T. C.
360 | Evaluation of Determinant (Algorithm 41) | Solomon, J. G.
361 | Programmed Error Correction on a Decimal Computer | Weinberg, G. M.
362 | Table Look-At Techniques | Sherman, P. M.
363 | On Approximating Transcendental Numbers by Continued Fractions | Karst, E.
364 | On the Compilation of Subscripted Variables  | Nather, R. E.
365 | Bessel Functions of Integral Order and Complex Argument | Gray, M. C.
366 | Eigenvalues of a Symmetric 3 x 3 Matrix | Smith, O. K.
367 | Topological Ordering of a List ofRandomly-Numbered Elements of a Network | A network of directed line segments free of circularelements is assumed.  The lines are identified by their terminal nodes and the nodes are assumed tobe numbered by a non-topological system.  Given a list of these lines in numeric order, a simple techniquecan be used to create at high speed a list in topological order. | Lasser, D. J.
368 | Real Zeros of an Arbitrary Function (Algorithm 25) | Collinge, R. M.
369 | Crout with Pivoting (Algorithm 16) | Thacher Jr., H. C.
370 | Bisection Routine (Algorithm 4) | Rader, P. J.
371 | Remarks on Algorithms 2 and 3, Algorithm 15 and Algorithms 25 and 26 | Wilkinson, J. H.
372 | Critical Path Scheduling (Algorithm 40) | Leavenworth, B.
373 | Correlation Coefficients with Matrix Multiplication (Algorithm 39) | Sassouni, P.
374 | Telescope2 (Algorithm 38) | Brons, K. A.
375 | Telescope1 (Algorithm 37) | Brons, K. A.
376 | Tchebycheff (Algorithm 36) | Gianni, A. J.
377 | SIEVE (Algorithm 35) | Wood, T. C.
378 | A Generalized Technique for SymbolManipulation and Numerical Calculation  | Ross, D. T.
379 | Bitwise Operations | Strachey, C.
380 | Comparison of Iterative Methods for the Calculation of nth Roots | Three iterative methods for calculation ofnth roots (including one proposed by the author) are compared in two ways: (1) Theoretical convergenceestimates are given.  (2) A new macrocompiler which estimates machine running time is used to compare therunning time of the three methods for a variety of input data. | Traub, J. F.
381 | An Alternate Form of the "UNCOL Diagram" | Bratman, H.
382 | Statistical Programs at the University of North Carolina | Bush, N.
383 | On Finding Minimum Routes in a Network With Turn Penalties | Caldwell, T.
384 | Gamma Function (Algorithm 34) | Lipp, M. F.
385 | FACTORIAL (Algorithm 33) | Lipp, M. F.
386 | MULTINT (Algorithm 32) | Freeman Jr., R. D.
387 | Gamma Function (Algorithm 31) | Collinge,R. M.
388 | Solution of Polynomial Equations byBairstow Hitchcock Method (Algorithm 3) | Vandergraft, J. S.
389 | Real Exponential Integral (Algorithm 20) | Peavy, S.
390 | Complex Exponential Integral (Algorithm 13) | Rader, P. J.Thacher Jr., H. C.
391 | The BKS System for the Philco-2000  | Smith, R. B.
392 | Comment on A Paper on Parallel Processing | Nekora, M. R.
393 | Two Subroutines for Symbol Manipulation with an Algebraic Compiler | Carr III, J. W.Hanson, J. W.
394 | Multiple Programming Data Processing | Ryle, B. L.
395 | Multiple-Precision Division  | Rabinowitz, P.
396 |    Automation of Program  Debugging |    Automatic Debugging can substantially reduce lead-time between the codingand the effective use of a complex program. It also enforces analysis ofdebugging criteria, resulting in verifiably accurate programs. The programmerspecifies the program to be debugged, memory areas, set of input data, maximumrepetition of loops, and checkpoint information for each set of data. Theexecutive debugging program the runs the program to be debugged, performingchecking functions and creating a trace record of its own later analysis andlocation of errors. Applications are quite flexible, and the system can be usedalone or in conjunction with other debugging techniques. | Jacoby, K.Layton, H.
397 | A Card Format for Reference Files in Information Processing | This paper proposes a card format suitable fora variety of reference files in information processing.  An 80-column IBM card is divided into twofields-reference material field (columns 1-67) and identification field (columns 68-80).  The formatfor the reference material is flexible, while the format for the identification is rigid.  The referencematerial includes basically an index, title, source, class, summary and cross reference for each entry. The identification includes basically codes for a matrix of descriptors, an entry number, and the kind,major interest, and source of the reference.  The identification also provides a choice to identify materialfor personal as well as general files.  Since this card format is sufficient to identify the materialnormally associated with reference files for books, articles, programming terms, hardware terms, equipment,machine systems, abbreviations, etc., it is suitable as a standard for card reference files in information processing. | Grems, M.
398 | The SLANG System | Sibley, R. A.
399 | Compiling Techniques for Boolean Expressionsand Conditional Statements in ALGOL 60 | Huskey, H. D.Wattenburg, W. H.
400 | Comments on the Implementation of RecursiveProcedures and Blocks in ALGOL 60 | Irons, E. T.Feurzeig, W.
401 | Allocation of Storage for Arrays in ALGOL 60 | Sattley, K.
402 | Dynamic Declarations | Ingerman, P. Z.
403 | Thunks -- A Way of Compiling Procedure Statementswith Some Comments on Procedure Declarations | Ingerman, P. Z.
404 | A Syntax Directed Compiler for ALGOL 60 | Irons, E. T.
405 | An Algorithm for Coding Efficient Arithmetic Operations | Most existing formula translation schemesyield inefficient coding.  A method is described which reduces the number of store and fetch operations,evaluates constant subexpressions during compilation, and recognizes many equivalent subexpressions. | Floyd, R. W.
406 | The Use of Threaded Lists in Constructing a CombinedALGOL and Machine-Like Assembly Processor | Evans Jr., A.Perlis, A. J.Van Zoeren, H.
407 | MADCAP: A Scientific Compiler for a Displayed Formula Textbook Language | Wells, M. B.
408 | The Internal Organization of the MAD Translator | Arden, B. W.Galler, B. A.Graham, R. M.
409 | CL-1, An Environment for a Compiler | A flexible, large-scale programming system tofacilitate the solution of information processing problems and to provide intercommunication between programsand/or programmers has been developed and realized on the IBM 709/7090 computer.  The system isbased on a master file concept and has provisions for accepting, storing, and retrieving both descriptionsand instances of large and complex data sets, as well as algorithms defined on these data sets.  Bothdata and algorithms may be expressed in a family of command and descriptive languages.  The conceptof distinct data descriptions and the content and use of such descriptions are discussed in some detail. | Cheatham Jr., T. E.Collins Jr., G. O.Leonard, G. F.
410 | The CLIP Translator | Englund, D.Clark, E.
411 | Use of Magnetic Tape for Data Storage in the ORACLE-ALGOL Translator | Bottenbruch, H.
412 | Recursive Processes and ALGOL Translation | Gray, A. A.
413 | A Basic Compiler for Arithmetic Expressions | Huskey, H. D.Wattenburg, W. H.
414 | IBM 1440 Data Processing System Features Five New Units | The IBM 1440 data processing system, announcedrecently by the International Business Machines Corporation, not only features the 1311 disk storagedrive with interchangeable disk packs but four other newly developed units. | Wheeling, R.
415 | The Use of Digital Computers in Western Germany | Schuff, H. K.
416 | Multiple Shooting Method for Two-Point Boundary Value Problems | Morrison, D. D.Riley, J. D.Zancanaro, J. F.
417 | Legal Implications of Computer Use | This paper points out a variety of ways computersystems used in business and industry can be involved in legal entanglements and suggests thatcomputer specialists have a responsibility to call for assistance in forestalling or minimizing those entanglementsduring the planning stage.  Techniques are suggested for making legal clearance effective withthe least burden on the new technology and for achieving a favorable legal climate for it generally. Computer specialists also are alerted to potential opportunities to interpret to lawyers the technical aspectsof computer systems involved in legal situations. | Freed, R. N.
418 | RANDOM (Algorithm 133) | Behrenz, P. G.
419 | Magic Square (Algorithm 118) | Thacher Jr., H. C.
420 | PERM (Algorithm 115) | Phillips, E. S.
421 | Position of Point Relative to Polygon (Algorithm 112) | Hacker, R.
422 | COMBINATION (Algorithm 94) | Grench, R. E.
423 | Matrix Inversion (Algorithm 58) | Behrenz, P. G.
424 | Gamma Function (Algorithm 31) | Behrenz, P. G.
425 | Complete Elliptic Integral (Algorithm 149) | Merner, J. N.
426 | Term of Magic Square (Algorithm 148) | Collison, D. M.
427 | PSIF (Algorithm 147) | Amit, D.
428 | Multiple Integration (Algorithm 146) | McKeeman, W. M.
429 | Adaptive Nimerical Integration by Simpson's Rule (Algorithm 145) | McKeeman, W. M.
430 | TREESORT2 (Algorithm 144) | Kaupe Jr.,A. F.
431 | TREESORT1 (Algorithm 143) | Kaupe Jr., A. F.
432 | Triangular Regression (Algorithm 142) | Hafley, W. L.Lewis, J. S.
433 | Fixed-World-Length Arrays in Variable-Word-Length Computers | Sonquist, J. A.
434 | Character Manipulation in 1620 Fortran II | Poore Jr., J. H.
435 | A Decision Matrix as the Basis for a Simple Data Input Routine | Currently a great deal of time and effort isbeing spent on the development of bigger and better compiler languages, multiprogram executive systems,etc.  Since the implementation of  of new methods and procedures is not instantaneous, but rather occursby an evolutionary process, we should be concerned also with the problem of maintaining, improving andincorporating new ideas into existing systems.  It is with this somewhat neglected area that the author isinterested.  A method employing a decision matrix is presented for the handling of a standard systemsprogramming problem,that of providing a data input routine. | Vasilakos, G. J.
436 | Evaluation of Polynomials by Computer | Knuth, D. E.
437 | Compiling Matrix Operations | Galler, B. A.Perlis, A. J.
438 | Mechanical Pragmatics: A Time-Motion Studyof a Miniature Mechanical Linguistic System | Gorn, S.
439 | On-Line Digital Computer for Measurement of a Neurological Control System | Stark, L.Payne, R.Okabe, Y.
440 | Record Linkage | Special difficulties are encountered in devisingreliable systems for searching and updating any large files of documents that must be identifiedprimarily on the basis of names and other personal particulars.  The underlying problem is that of making nearlymaximum use of items of identifying information that are individually unreliable but that may collectivelybe of considerable discriminating power.  Rules that can be applied generally to name retrievalsystems have been developed in a methodological study of the linkage of vital and health records intofamily groupings for demographic research purposes.  These rules are described, and the ways in which informationutilization for matching may be optimized are discussed. | Newcombe, H. B.Kennedy, J. M.
441 | Topological Sorting of Large Networks | Topological Sorting is a procedure requiredfor many problems involving analysis of networks.  An example of one such problem is PERT.  The presentpaper presents a very general method for obtaining topological order.  It permits treatment of larger networksthan can be handled on present procedures and achieves this with greater efficiency.  Althoughthe procedure can be adapted to any machine, it is discussed in terms of the 7090.  A PERT network of30,000 activities can be ordered in less than one hour of machine time.  The method was developed asa byproduct of procedures needed by Westinghouse, Baltimore.  It has not been programmed and at presentthere are no plans to implement it.  In regard to the techniques described, Westinghouse's presentand anticipated needs are completely served by the Lockheed program, which is in current use. | Kahn, A. B.
442 | Crout with Equilibration and Iteration (Algorithm 135) | McKeeman, W. M.
443 | Complex Number to a Real Power (Algorithm 106) | Erwin Jr.,G. W.
444 | Evaluation of Jacobi Symbol (Algorithm 99) | May, R. W.
445 | COMBINATION (Algorithm 94) | May, R. W.
446 | Simpson's Integration (Algorithm 84) | Behrenz, P. G.
447 | Certification of the Calculation of Easter | Williams, M. R.
448 | Path Matrix (Algorithm 141) | Ingerman, P. Z.
449 | Matrix Inversion(Algorithm 140) | Ingerman, P. Z.
450 | Solution of the Diophantine Equation (Algorithm 139) | Peck, J. E. L.
451 | Nesting of for Statement II (Algorithm 138) | Dahm, D. M.Wells, M.
452 | Nesting of for Statement I (Algorithm 137) | Dahm, D. M.Wells, M.
453 | Enlargement of a Group (Algorithm 136) | Wells, M.
454 | Crout with Equilibration and Iteration (Algorithm 135) | McKeeman, W. M.
455 | Exponentiation of Series (Algorithm 134) | Fettis, H. E.
456 | RANDOM (Algorithm 133) | Behrenz, P. G.
457 | Quantum Mechanical Integrals Over all Slater-Type Integrals | Browne, J. C.
458 | Coefficient Determination (Algorithm 131) | Smith, V. H.Allen, M. L.
459 | PERMUTE (Algorithm 130) | Eaves, Lt. B. C.
460 | MINIFUN (Algorithm 129) | Whitley, V. W.
461 | Coding of Medical Case History Data for Computer Analysis | Lipkin, M.Woodbury, M. A.
462 | Computer Pattern Recognition Techniques: Electrocardiographic Diagnosis | The use of programmed digital computers as generalpattern classification and recognition devices is one phase of the current lively interest in artificialintelligence.  It is important to choose a class of signals which is, at present, undergoing agood deal of visual inspection by trained people for the purpose of pattern recognition.  In this waycomparisons between machine and human performance may be obtained.  A practical result also serves as additionalmotivation.  Clinical electrocardiograms make up such a class of signals.  The approach to theproblem presented here centers upon the use of multiple adaptive matched filters that classify normalizedsignals.  The present report fives some of the background for the application of this method. | Stark,L.Okajima, M.Whipple, G. H.
463 | On Ambiguity in Phrase Structure Languages | Floyd, R. W.
464 | Syntactic Analysis by Digital Computer | This paper provides an account of the Shadowlanguage that is used to describe syntax and of a corresponding subroutine that enables a computerto perform syntactic analysis.  The input to this subroutine consists of a string to be analyzed and adescription of the syntax that is to be used.  The syntax is expressed in the Shadow language.  The outputconsists of a trace table that expresses the results of the syntactic analysis in a tabular form.  Severalversions of the subroutine and some associated programs have been in use now for over three years.  Thepresent account of the language and the subroutine contains a summary of material that has been describedpreviously in unpublished reports and also some additional discussion of the work in relation to the moregeneral questions of problem-oriented languages and string transformations. | Barnett, M. P.Futrelle, R. P.
465 | PERM (Algorithm 115) | Schrack, G. F.
466 | General Order Arithmetic (Algorithm 93) | George, R.
467 | Permutation Generator (Algorithm 87) | Schrack, G. F.Shimrat, M.
468 | Incomplete Elliptic Integrals (Algorithm 73) | Jefferson, D. K.
469 | Critical Path Scheduling (Algorithm 40) | Hellberg, L.
470 | Summation of Fourier Series (Algorithm 128) | Wells, M.
471 | ORTHO (Algorithm 127) | Walsh, P. J.
472 | Gauss' Method (Algorithm 126) | Counts, J. W.
473 | WEIGHTCOEFF (Algorithm 125) | Rutishauser, H.
474 | Input Data Organization in Fortran | Yarbrough, L.D.
475 | A Test Matrix for Inversion Procedures | Pei, M. L.
476 | Further Remarks on Sampling a Tape File-II | Nadler, M.
477 | Further Remarks on Sampling a Tape File-I | Muller, M. E.
478 | Implementing a Stack | Baecker, H.D.
479 | A Dispersion Pass Algorithm for the Polyphase Merge | This paper presents a new manner of dispersingstrings for a Polyphase merge.  If the number of strings dispersed is between two levels acceptableby Polyphase merge, a more economical technique of reaching the next level for Polyphase merge is shown and proved. | Mendoza, A. G.
480 | Quick Calculation of Jacobian Elliptic Functions (Corrigendum) | Salzer, H. E.
481 | A One-Day Look At Computing | Armerding, G. W.Gruenberger, F. J.Marks, S. L.Parkin, T. R.
482 | TALL-A List Processor for the Philco 200 Computer | Feldman, J.
483 | On the Nonexistence of a Phrase Structure Grammar for ALGOL 60 | ALGOL 60 is defined partly by formal mechanismsof phrase structure grammar, partly by informally stated restrictions.  It is shown that no formal mechanismsof the type used are sufficient to define ALGOL 60. | Floyd, R. W.
484 | Hankel Function (Algorithm 124) | Schaefer, L. J.
485 | Real Error Function, ERF(x) (Algorithm 123) | Crawford, M.Techo, R.
486 | Tridiagonal Matrix (Algorithm 122) | Dietzel, G. F.
487 | NORMDEV (Algorithm 121) | Shafer,D.
488 | A Heuristic for Page Turning In a Multiprogrammed Computer | Weil, J. W.
489 | Current Status of IPL-V for the Philco 2000 Computer (June 1962) | Shaffer, S. S.
490 | Programmed Methods for Printer Graphical Output | Garfinkel, D.
491 | Use of Multiprogramming in the Design of a Low Cost Digital Computer | Penny, J. P.Pearcey, T.
492 | Analysis of a File Addressing Method | This paper presents a new file addressing methodbased on the calculation of an address from the identification of a record.  For large recirculatingtype files, it seems to be more advantageous than customary ones.  The probability distribution ofthe displacement of records from their calculated address, which is one less than the number of probesrequired to address a record, is computed on the basis of a Markov chain model.  For the reader not interestedin the mathematics, the introduction and the summary should be sufficient. | Schay Jr., G.Spruth, W. G.
493 | The Property Classification Method of File Design and Processing | McGee, W. C.
494 | A Finite Sequentially Compact Process for the Adjointsof Matrices Over Arbitrary Integral Domains | Luther, H. A.Guseman Jr., L. F.
495 | A Procedure for Inverting Large Symmetric Matrices | In the least squares method for simultaneousadjustment of several parameters, the coefficients of the normal equations are the elements of a symmetricpositive-definite matrix.  In order to solve the normal equations and evaluate the precision measuresof the resulting parameters, inversion of this matrix of coefficients is required.  Many available proceduresfor matrix inversion do not take advantage of the symmetry.  Thus, when programmed for a high-speedcomputer, all n^2 elements must be stored and manipulated, whereas only (n + 1)/2 of them are independent. In order to allow a computer of given memory capacity to handle a larger matrix, the following procedurefor inverting a symmetric matrix has been devised. | Busing, W. R.Levy, H. S.
496 | A Set of Matrices for Testing Computer Programs | Brenner, J. L.
497 | Further Remarks on Line Segment Curve-Fitting Using Dynamic Programming | In a recent paper, Bellman showed how dynamicprogramming could be used to determine the solution to a problem previously considered by Stone.  The problemcomprises the determination, given N, of the N points of subdivision of a given interval (a,B) andthe corresponding line segments, that give the best least squares fit to a function g(x) in the interval. Bellman confined himself primarily to the analytical derivation, suggesting briefly, however,how the solution of the equation derived for each particular point of subdivision u(i) could be reduced toa discrete search.  In this paper, the computational procedure is considered more fully, and the similaritiesto some of Stone's equations are indicated.  It is further shown that an equation for u(i) involvingno minimization may be found.  In addition, it is shown how Bellman's method may be applied to thecurve-fitting problem when the additional constraints are added that the ends of the line segments must be on the curve. | Gluss, B.
498 | Magic Square (Algorithm 117 & 118) | Collison, D. M.
499 | Permutation Generator (Algorithm 87) | Collison, D. M.
500 | PERMUTE (Algorithm 86) | Collison, D. M.
501 | JACOBI (Algorithm 85) | Hillmore, J. S.
502 | Simpson's Integration (Algorithm 84) | George, R.
503 | Rational Roots of Polynomials with Integer Coefficients (Algorithm 78) | Collison, D. M.
504 | FACTORS (Algorithm 75) | Hillmore, J. S.
505 | Composition Generator (Algorithm 72) | Collison, D. M.
506 | PERMUTATION (Algorithm 71) | Hillmore, J. S.
507 | Partition, Quicksort, Find (Algorithm 63, 64, 65) | Hillmore, J. S.
508 | Matrix Inversion (Algorithm 58) | George, R.
509 | Matrix Inversion (Algorithm 58) | Struble, G.
510 | Ber or Bei Function (Algorithm 57) | Thacher Jr., H. C.
511 | A Set of Test Matrices (Algorithm 52) | Hillmore, J. S.
512 | Telescope 1 (Algorithm 37) | Thacher Jr., H. C.
513 | SIEVE (Algorithm 35) | Hillmore, J. S.
514 | Binomial Coefficients (Algorithm 19) | George, R.
515 | Rational Interpolation by Continued Fractions (Algorithm 18) | Thacher Jr., H. C.
516 | Matrix Inversion II (Algorithm 120) | George, R.
517 | Evaluation of Pert Network (Algorithm 119) | Eisenman, B.Shapiro, M.
518 | Magic Square (Odd Order) (Algorithm 118) | Collison, D. M.
519 | Magic Square (Even Order) (Algorithm 117) | Collison, D. M.
520 | Complex Division (Algorithm 116) | Smith, R. L.
521 | PERM (Algorithm 115) | Trotter, H. F.
522 | Generation of Partitions with Constraints (Algorithm 114) | Stockmal, F.
523 | TREESORT (Algorithm 113) | Floyd,R. W.
524 | Position of Point Relative to Polygon (Algorithm 112) | Shimrat, M.
525 | A Computer Technique for Handling Analysis of Variance | Howell, J. R.
526 | Character Manipulation in Fortran | Pyle, I. C.
527 | The Description List of Concepts | A concept is defined as a class of objectswhose members can be distinguished by processing its properties.  Property is defined to mean a partitionof the set of all objects into disjoint classes.  The formal definition of a concept is recursive in nature. A concept is described by a list structure.  A one-to-one correspondence is established between therecursive definition of a concept and its description list structure.  Like the definition, the descriptionlist structure of a concept is also built up from elementary list structures by a recursive process. The list structures obtained this way are compared with the description list structure discussedby the author in a previous publication. | Banerji, R. B.
528 | FORTRAN for Business Data Processing | Robbins, D. K.
529 | Regression and Coded Patterns in Data Editing | Robison, D. E.Aroian, L. A.
530 | A Computer Method for Radiation Treatment Planning | Siler, W.Laughlin, J. S.
531 | Person-Matching by Electronic Methods | Record linkage in the updating of files isaccomplished in many establishments through the use of a preassigned number, such as payroll number,customer number, or social security number.  In vital and health records, however, a unique numberis generally not preassigned to an individual for purposes of reporting services received to the healthdepartment.  In order to determine whether different physician reports refer to the same individual, nameand other identification must be compared.  This is a laborious operation which is subject to variouserrors because of name misspellings, changes of name upon marriage, and other problems.  We are interestedin the maintenance of a psychiatric case register in Maryland, where many of the reports from over a hundredpsychiatric agencies refer to the same patient.  These records must be linked in order to provide unduplicatedcounts of individuals under care and longitudinal records of psychiatric history.  An earlier paper [1] describesour general procedures for register maintenance by use of a digital computer (Honeywell 800).  Herewe present in more detail our initial procedures for the person-matching process in order to elicit commentsand suggestions from persons who have had experience in matching. | Phillips Jr., W.Bahn, A. K.Miyasaki, M.
532 | On the Computation of Rational Approximations to Continuous Functions | Fraser, W.HArt, J. F.
533 | Digital Synthesis of Correlated Stationary Noise | In this note we propose a method of generatingstationary noise with a prescribed auto-covariance function by digital methods.  The need for such a techniqueoften arises in testing the performance of data processing and engineering systems, where inputscorrupted with correlated noise (of a known form) are required.  The technique is quite simple and producesstrict-sense stationary noise which agrees approximately with R(t), the prescribed auto-covariancefunction (acf), over an interval [-T(0), T(0)].  The method consists of approximating the spectral densityby a periodic process with spectral lines, and then synthesizing the periodic noise with randomphases and appropriate amplitudes.  In order to simplify discussion of the statistical properties of thenoise generated, the technique is first presented in terms of exact harmonic analysis.  In practice, discreteharmonic analysis as presented in the third section is used. | Peabody, P. R.Adorno, D. S.
534 | Quick Calculation of Jacobian Elliptic Functions | Salzer, H. E.
535 | Triangular Walk Pattern for the Down-hillMethod of Solving a Transcendental Equation | Onoe, M.
536 | Nonlinear Regression and the Solution of Simultaneous Equations | If one has a set of observables (Z1,...,Zm) whichare bound in a relation with certain parameters (A1,...,An) by an equation S(Z1,...;A1,...)=0, one frequentlyhas the problem of determining a set of values of the Ai which minimizes the sum of squares ofdifferences between observed and calculated values of a distinguished observable, say Zm.  If the solutionof the above equation for Zm,  Zm=N(Z1,...;A1,...) gives rise to a function N which is nonlinear in the Ai,then one may rely on a version of Gaussian regression [1,2] for an iteration scheme that converges to a minimizingset of values.  It is shown here that this same minimization technique may be used for the solutionof simultaneous (not necessarily linear) equations. | Baer, R. M.
537 | A Machine Program for Theorem-Proving | The program of a proof procedure is discussed inconnection with trial runs and possible improvements. | Davis, M.Logemann, G.Loveland, D.
538 | Quantum Mechanical Integrals of Slater-Type Orbitals (Algorithm 110) | Kruglyak, Y. A.Whitman, D. R.
539 | Definite Exponential Integrals B (Algorithm 109) | Kruglyak, Y. A.Whitman, D. R.
540 | Definite Exponential Integrals A (Algorithm 108) | Kruglyak, Y. A.Whitman, D. R.
541 | Simpson's Integration (Algorithm 84) | Relph, A. P.
542 | FACTORS (Algorithm 75) | Relph, A. P.
543 | Interpolation by Aitken (Algorithm 70) | Relph, A. P.
544 |  Ber or Bei Function (Algorithm 57) | Relph, A. P.
545 | Adjust Inverse of a Matrix when an Element is Perturbed (Algorithm 51) | George, R.
546 | Logarithm of a Complex Number (Algorithm 48) | Johnson, M. L.Sangren, W.
547 | Gamma Function (Algorithm 34) | Johnson, M. L.Sangren, W.
548 | Molecular-Orbital Calculation of Molecular Interactions | Kruglyak, Y. A.Whitman, D. R.
549 | Quantum Mechanical Integrals of Slater-Type Orbitals | Kruglyak, Y. A.Whitman, D. R.
550 | Definite Exponential Integrals B (Algorithm 109) | Kruglyak, Y. A.Whitman, D. R.
551 | Definite Exponential Integrals A (Algorithm 108) | Kruglyak, Y. A.Whitman, D. R.
552 | Gauss's Method (Algorithm 107) | Counts, J. W.
553 | Complex Number to a Real Power (Algorithm 106) | Johnson, M. L.Sangren, W.
554 | Newton Maehly, (Algorithm 105) | Bauer, F. L.Stoer, J.
555 | Reduction to Jacobi (Algorithm 104) | Rutishausr, H.
556 | On Translation of Boolean Expressions | Bottenbirruch, H. HGrau, A. A.
557 | Simulation of Computer Timing Device
558 | A Modified Inversion Procedure for ProductForm of the Inverse Linear Programming Codes | This paper describes a new algorithm for theselection of the pivot row in matrix inversion when using the product form of the inverse.  This algorithmhas been developed for linear programming codes; however, it would be valuable for the inversionof any non-dense matrix.  The procedures described in this paper have been thoroughly tested and have beenin operation on the Esso Research and Engineering IBM 7090 computer for nine months.  Substantial computercost savings have been realized because of this procedure. | Larsen, L. J.
559 | Solution of Eigenvalue Problems With Approximately Known Eigenvectors | Appel, K.
560 | Communication Between Independently Translated Blocks | Wegner, P.
561 | Analytic Differentiation By Computer | Hanson, J. W.Caviness, J. S.Joseph, C.
562 | AVINT (Algorithm 77) | Whittier, V. E.
563 | Sorting Procedures (Algorithm 76) | Randell, B.
564 | CRAM (Algorithm 67) | Relph, A. P.
565 | INVRS (Algorithm 66) | Caffrey, J.
566 | Matrix Inversion (Algorithm 58) | Conger, R. A.
567 | Logarithm of a Complex Number (Algorithm 48) | Relph, A. P.
568 | Exponential of a Complex Number (Algorithm 46) | Relph, A. P.
569 | Binomial Coefficients (Algorithm 19) | Steck, B.
570 | Simpson's Rule Integrator (Algorithm 103) | Kuncir, G. F.
571 | Permutation in Lexicographical Order (Algorithm 102) | Schrack, G. F.Shimrat, M.
572 | Add Item to Chain-Linked List (Algorithm 100) | Kiviat, P. J.
573 | Remove Item From Chain-Linked List (Algorithm 101) | Kiviat, P. J.
574 | Evaluation of Jacobi Symbol (Algorithm 99) | Garland, S. J.Knapp, A. W.
575 | Evaluation of Definite Complex Line Integrals (Algorithm 98) | Pfaltz, J. L.
576 | Shortest Path (Algorithm 97) | Floyd, R. W.
577 | ANCESTOR (Algorithm 96) | Floyd, R. W.
578 | Generation of Partitions in Part-Count Form (Algorithm 95) | Stockmal, F.
579 | COMBINATION (Algorithm 94) | Kurtzberg, J.
580 | General Order Arithmetic (Algorithm 93) | Perstein, M. H.
581 | A Note on Sampling a Tape-File | Jones, T. G.
582 | One Lost Bit | Oster, C. A.
583 | A Redundancy Check for ALGOL Programs | Thacher Jr., H. C.
584 | Report on the Algorithmic Language FORTRAN II | Rabinowitz, I. N.
585 | Initial Experience With an Operating Multiprogramming System | The Lewis Research Center has been using variousforms and degrees of program simultaneity in the operation of its modified Sperry-Rand Univac ScientificModel 1103 computer during the last five years.  This simultaneity has evolved from an initialachievement of self-searching input and output to the automatic time sharing of independently codedproblems.  Several important machine and program system modifications were necessary to accomplish thisevolution.  Several additional modifications, although not required, were added to facilitate easeof coding and operation.  All modifications had to proceed at a relatively temperate pace to insure thatthe basic data-reduction work load of the computing center was completed on schedule.  Some educationallyvaluable mistakes were made, and their suggested cures often pointed the way to useful future improvementsor emphasized some of the basic principles of a multiprogramming system.  The material that followsis a description of the evolution of the programming and hardware system which has developed into the presentmultiprogramming system at Lewis research Center. | Landis, N.Manos, A.Turner, L. R.
586 | Simultaneous System of Equations andMatrix Inversion Routine (Algorithm 92) | Roek, D. J.
587 | Romberg Integration (Algorithm 60) | Buchner, K. H.
588 | Chebyshev Curve-Fit (Algorithm 91) | Newhouse, A.
589 | Evaluation of the Fresnel Cosine Integral (Algorithm 90) | Cundiff, J. L.
590 | Evaluation of the Fresnel Sine Integral (Algorithm 89) | Cundiff, J. L.
591 | Evaluation of Asymptotic Expression for theFresnel Sine and Cosine Integrals (Algorithm 88) | Cundiff, J. L.
592 | COBOL Batching Problems | Mullen, J. W.
593 | An Introduction to a Machine-Independent Data Division | Mullin, J. P.
594 | An Advanced Input-Output System for a COBOL Compiler | Bouman, C. A.
595 | Guides to Teaching COBOL | The teaching of COBOL can be divided intothree main subject areas.  They are the syntax of COBOL, the use of such syntax in solving any given problem,and programming concepts.  It is generally accepted that some knowledge of the hardware and computerlogic must be possessed by the programmer.  The teaching problem arises in determining how thoroughlya student must know the hardware and logic for that computer for which he will write COBOL programs. Unfortunately, historical data concerning students' programming proficiency is almost non-existentand, at best, difficult to measure.  How then might we approach solving this problem? | Greene, I.
596 | Floating-Point Arithmetic in COBOL | In this paper the basic operations of floating-pointarithmetic are examined and COBOL procedures for carrying these out are given, along with specificationof working storage.  The paper concludes with an example in which these procedures are used. | Kesner, O.
597 | Modular Data Processing Systems Written in COBOL | Emery, J. C.
598 | The COBOL Librarian - A Key to Object Program Efficiency | Many answers to the question "How may a COBOLCompiler be forced into the generation of an efficient object program?"  The purpose of this articleis to present one possible answer: the creation and full utilization of a well-constructed COBOL Library. | Hicks, W.
599 | A Report Writer For COBOL | Donally, W. L.
600 | Syntactical Charts of COBOL 61 | Berman, R.Sharp, J.Sturges, L.
601 | Interim Report on Bureau of Ships COBOL Evaluation Program | Siegel, M.Smith, A. E.
602 | COBOL and Compatibility | Lippitt, A.
603 | Basic Elements of COBOL 61 | Sammet, J. E.
604 | Why COBOL? | Cunningham, J. F.
605 | Computer Simulation Of City Traffic | In simulating traffic flow on city streets,the National Bureau of Standards has used data processing techniques to tabulate and make motion picturesof vehicle movements in the model.  Each vehicle is assigned a digital identification giving points ofentry and exit, type of vehicle, desired speed, and actual speed, in proportions simulating field data. Changes in the model can be made to observe their consequences and to determine the ability of areal street to carry loads expected in the future.
606 | A Method for Eliminating Ambiguity Dueto Signal Coincidence in Digital Design | Kaiser, C. J.
607 | The Calculation of Easter... | Knuth, D.
608 | Permutation (Algorithm 71) | Peck, J. E. L.Schrack, G. F.
609 | Permutation (Algorithm 71) | Brown, P. J.
610 | SIEVE (Algorithm 35) | Brown, P. J.
611 | Permutation Generator (Algorithm 87) | Howell, J. R.
612 | Permute (Algorithm 86) | Peck, J. E. L.Schrack, G. F.
613 | JACOBI (Algorithm 85) | Evans, T. G.
614 | Simpson's Integration (Algorithm 84) | Hennion, P. E.
615 | Addressing Multidimensional Arrays | A useful method of representing a function ofn variables is to consider the function to assume its values at selected points in n-dimensional space. Although this picture is of value to the analyst, the elements of an n-dimensional array must exist inconventional storage as a linear array or vector.  The means of performing the transformation of a setof indices locating on array element in n-space to the location (address) of the element in its storagevector is the subject of this paper.  It is noted that the index address transformation is computationallyidentical to the conversion of a number from a fixed to a mixed radix number system.  Several waysof implementing the transformation are described. | Hellerman, H.
616 | An Information Algebra - Phase I Report-LanguageStructure Group of the CODASYL Development Committee | This report represents the results of thefirst phase of the work of the Language Structure Group.  The goal of this work is to arrive at a properstructure for a machine-independent problem-defining language, at the systems level of data processing.  Thereport is based, for the most part, on a mathematical model called "An Information Algebra" developed primarilyby R. Bosak.  It is hoped that this report will be read (a) with avid interest by programming languagedesigners and implementors, and all those interested in developing a theoretical approach to dataprocessing; (b) with interest and understanding by professional programmers and systems analysts; and (c)with appreciation by the businessman-analyst-manager.  The authors have not attempted an exhaustive discoursein this report.  Rather, they have tried to present a philosophy to the professional people who are vitallyconcerned with providing a working language for the systems analyst's use.  They trust that the ideasin this report will stimulate others to think along similar lines.  Questions and comments will be welcomed,and can be addressed to any of the members of the Language Structure Group:  Robert Bosak, SystemDevelopment Corporation;  Richard F. Clippinger, Honeywell EDP Division;  Carey Dobbs, Remington RandUnivac Division;  Roy Goldfinger (Chairman), IBM Corporation;  Renee B. Jasper, Navy Management Office; William Keating, National Cash Register;  George Kendrick, General Electric Company;  Jean E. Sammet, IBM Corporation.
617 | POSEIDON | Any computer that forms part of a control system-whethercompletely automatic or partly human-must work at the same speed as the control system.  It mustperform its calculations or data processing fast enough for the results to be available at the requiredinstants in the action of the control system.  This known as working in "real time." | Wheeling, R. F.
618 | Computers- The Key to Total Systems Control: An Industrial Viewpoint | Man-Man-machine processes are characterized in fivemain types, and the markets for each type are shown for 1950 and 1960 and estimated for 1970. | Carlson, W. M.
619 | Retrieval of Misspelled Names in an Airlines Passenger Record System | This paper discusses the limited problem ofrecognition and retrieval of a given misspelled name from among a roster of several hundred names, suchas the reservation inventory for a given flight of a large jet airliner.  A program has been developedand operated on the Telefile (a stored-program core and drum memory solid-state computer) which willretrieve passengers' records successfully, despite significant misspellings either at original entry timeor at retrieval time.  The procedure involves an automatic scoring technique which matches the namesin a condensed form. Only those few names most closely resembling the requested name, with their phonenumbers annexed, are presented for the agents final manual selecton.  The program has successfullyisolated and retrieved names which were subjected to a number of unusual (as well as usual) misspellings. | Davidson, L.
620 | RATFACT (Algorithm 78) | Halstead, M. H.
621 | Romberg Integration (Algorithm 60) | Thacher Jr., H. C.
622 | Optimal Classification of Objects (Algorithm 83) | Mayoh, B. H.
623 | Economising a Sequence 2 (Algorithm 82) | Mayoh, B. H.
624 | Economising a Sequence 1 (Algorithm 81) | Mayoh, B. H.
625 | Reciprocal Gamma Function of Real Argument (Algorithm 80) | Holsten, W.
626 | A Method of Representation, Storage and Retrievalof 13 Random Codes in a 4-Digit Number or 16 Random Codes in a 5-Digit Number | Foster, M. B.
627 | Knotted List Structures | Weizenbaum, J.
628 | On a Floating-Point Number RepresentationFor Use with Algorithmic Languages | Grau, A. A.
629 | On a Wired-In Binary-to-Decimal Conversion Scheme | Lynch, W. C.
630 | An Evaluation of Autocode Readability | Of the many requirements of an autocode, thepair of requirements "easy to read" and "easy to write" are not often compatible.  This paper arguesthat readability can be added automatically in the translation process so that the programmer canenjoy the utmost economy of expression, while for management a full and valid COBOL version is printed to giveall the advantages of readability and compatibility. | Ellis, P. V.
631 | Automatic-Programming-Language Translation Through Syntactical Analysis* | Ledley, R.S.Wilson, J. B.
632 | Vectorcardiographic Diagnosis With The Aid of ALGOL | Forsythe, G. E.Von Der Groeben, J.Toole, J. G.
633 | Simulation and Analysis of Biochemical Systems(III. Analysis and Pattern Recognition) | Garfinkel, D.Polk, W.Higgins, J. J.Ochser, R. T.
634 | Manipulation of Trees in Information Retrieval* | Salton, G.
635 | A Note on Multiplying Boolean Matrices | Baker, J. J.
636 | Tape Splitting in an Iterative Program | Weisert, C.
637 | A NELIAC-Generated 7090-1401 Compiler | NELIAC systems for several different machineshave been generated using the original NELIAC system developed at the Naval Electronics Laboratory,San Diego, in 1958.  A basic "bootstrap" process was used to generate all but the first, i.e. the systemswere described in the NELIAC language and generated by an existing NELIAC compiler.  This experience hasshown there is no inherent difficulty in "building compilers with compilers"; indeed, it pointed out many advantagesin using a POL for constructing programming systems.  This report presents the results of a projectcompleted in May, 1961 in which the NELIAC system was used to generate a compiler for the IBM 1401.  The1401 compiler, which runs on the 7090 and produces 1401 programs, was described in the NELIAC language andgenerated with 7090 NELIAC system.  The reduction in programming time and the improvement in documentationof the system were very significant. | Watt, J. B.Wattenburg, W. H.
638 | SURGE: A Recoding of the COBOL Merchandise Control Algorithm | Longo, L. F.
639 | Difference Expression Coefficients (Algorithm 79) | Giammo, T. P.
640 | Rational Roots of Polynomials with Integer Coefficients (Algorithm 78) | Perry, C.
641 | Interpolation, Differentiation, and Integration (Algorithm 77) | Hennion, P. E.
642 | An Introduction to ALGOL  | Schwarz, H. R.
643 | Simulation and Analysis of Biochemcial Systems(II. Solution of Differential Equations) | Larson, R.Sellers, P.Meyer, R.
644 | A String Language for Symbol Manipulation Based on ALGOL 60 | An artificial computer programming languageis proposed for describing the manipulation of strings of characters and symbols.  The concept of strings,introduced in the ALGOL 60 report, is extended by adding: (1) the declaration of strings, substrings,and string arrays with explicit lengths; (2) the ability to concatenate and shift strings; and (3) theranking of symbols for comparing stings in Boolean relations.  A primer or informal description of thelanguage is followed by examples, a description of experiments with the language on an IBM 704 computer,and a formal description which, taken with the ALGOL 60 Report, defines the proposed string language. | Wegstein, J. H.Youden, W. W.
645 | INVRS (Algorithm 66) | Randell, B.Broyden, C. G.
646 | Inverse of a Finite Segment of the Hilbert Matrix (Algorithm 50) | Randell, B.
647 | Numerical Solution of the Polynomial Equation (Algorithm 30) | Cohen, K. J.
648 | Sorting Procedures (Algorithm 76) | Flores, I.
649 | FACTORS (Algorithm 75) | Peck, J. E. L.
650 | Curve Fitting with Constraints (Algorithm 74) | Peck, J. E. L.
651 | A Survey of Languages and Systems for Information Retrieval | Grems, M.
652 | Use of Semantic Structure in Information Systems | Sable, J. D.
653 | Translation of Retrieval Requests Couchedin a "Semiformal" English-Like Language* | Cheatham Jr., T. E.Warshall, S.
654 | Language Problems Posed by Heavily Structured Data | Barnes, R. F.
655 | COMIT as an IR Language | Many of the features that make COMIT a goodall around symbol manipulation language also render it well suited to various types of information retrievalprograms.  Presented here is a general discussion of this unique and different programming languageand an examination of some of its applications. | Yngve, V. H.
656 | An Information System With The Ability To Extract Intelligence From Data | Wang, T. L.
657 | Information Structures for Processing and Retrieving | Colilla, R. A.Sams, B. H.
658 | Discussion-The Pros and Cons of a Special IR Language | Sammet, J. E.Ohlman, H.Bohnest, H. G.
659 | Reversion of Series (Algorithm 193) | Thacher Jr., H. C.
660 | More Test Matrices for Determinants and Inverses (Pracnique) | Englar, T. S.
661 | Indexing and the Lambda-Notation | Some methods of indexing sequentially storedelements of sparse multi-dimensional arrays are described in the scheme A notation. | Barnett, M. P.
662 | Shuttle Sort (Algorithm 175) | Juelich, O. C.
663 | Determinant (Algorithm 159) | Lapidus, A.
664 | Assignment (Algorithm 27) | Witty, R. D.
665 | Gauss-Seidel (Algorithm 220) | Shantz, P. W.
666 | Topological Ordering for Pert Networks (Algorithm 219) | Kase, R. H.
667 | Kutta Merson (Algorithm 218) | Lukehart, P. M.
668 | Minimum Excess Cost Curve (Algorithm 217) | Briggs, W. A.
669 | A Specification of JOVIAL | Shaw, C. J.
670 | Some Legal Implications of the Use of Computers in the Banking Business | The introduction of computers in to the bankingbusiness has a wide variety of legal implications that merit careful attention at this very early stage. The industry is highly regulated by government and, hence, is subject to many statutes and regulations. It also is affected by important common law rules established by courts.  The legal ramificationsinvolve not only the mechanization itself, but also the very significant, economically attractive phenomenonof off premises processing.  It is essential to identify and provide for many legal aspects rightnow, before systems and practices crystallize, in order to avoid the later impact of unanticipated physicalcomplications and expense.  The legal aspects of computerization in the banking business are especiallydiverse.  In some states, there might be the basic question whether banks are authorized by law toinvest in the new facilities, either directly or through cooperatives.  More challenging are questionsrelating to off-premises processors, particularly with respect to the obligation not to disclose informationconcerning a bank's customers, the adequacy of fidelity bond coverage, the extent of liability forimproper refusal to pay a check, and susceptibility to regulation by government agencies.  Also pertinentis the propriety of data processing by banks for nonbank entities and particularly of the rendering ofthat service without charge for bank depositors. | Freed, R. N.
671 | TELEFILE-A Case Study of an On-Line Savings Bank Application | The development of an on-line computer systemfor a savings bank institution is traced from the early conceptual needs of the bank to the consummationof design by The Teleregister Corporation.  Both bank and equipment criteria are specified whichled to the development of the Telefile System of The Teleregister Corporation.  Operation of the on-lineand off-line programs are described and statistics are cited for reliability and performance of the system. Benefits to the bank are discussed from the banker's point of view; an indication of future trendsin the on-line savings bank field is also discussed. | Sanders, M.
672 | Recent Developments Affecting ADP in Tax Administration | Leibowitz, G. J.
673 | Account Classification at Automating Banks | Eckert, J. B.
674 | Application of IBM 1620 EDP Methods to the Calculationof the Formation Constants of Complex Irons | Andrews, A. C.Hassler, J.DeCou, F.
675 | Coding Clinical Laboratory Data For Automatic Storage and Retrieval | A series of clinical laboratory codes have beendeveloped to accept and store urin analysis, blood chemistry, and hematology test results for automaticdata processing.  The codes, although constructed as part of a computerized hospital simulation, have beenable to handle the results of every laboratory test that they have encountered.  The unique feature ofthese codes is that they can accept conventionally recorded qualitative as well as quantitative test results. Consequently, clinical test results need not be arbitrarily stratified, standardized, or alteredin any way to be coded.  This paper describes how the codes were developed and presents a listing of theurin analysis codes.  Five criteria used in developing the codes are outlined and the problem of multiple-synonymousterminology is discussed.  A solution to the problem is described.  Flexible, computer-produced,composite laboratory reports are also discussed, along with reproduction of such a report. The paper concludesthat even though many problems remain unsolved, the next ten years could witness the emergence of a practicalautomated information system in the laboratory. | Gross, L. D.
676 | On the Computation of a Certain Type of IncompleteBeta Functions | Tang, I. C.
677 | Length of Strings for a Merge Sort | Detailed statistics are given on the lengthof maximal sorted strings which result form the first (internal sort) phase of a merge sort onto tapes. It is shown that the strings produced by an alternating method (i.e. one which produces ascendingand descending strings alternately) tend to be only three-fourths as long as those in a method which producesonly ascending strings, contrary to statements which have appeared previously in the literature.  Aslight modification of the read-backward polyphase merge algorithm is therefore suggested. | Knuth, D. E.
678 | Optimizing Bit-time Computer Simulation | A major component of a bit-time computer simulationprogram is the Boolean compiler.  The compiler accepts the Boolean functions representing the simulated computer'sdigital circuits, and generates corresponding sets of machine instructions which are subsequentlyexecuted on the "host" computer.  Techniques are discussed for increasing the sophistication of the Booleancompiler so as to optimize bit-time computer simulation.  The techniques are applicable to any general-purpose computer. | Katz,J. H.
679 | Recent Improvements in MADCAP | MADCAP is a programming language admitting subscripts,superscripts and certain forms of displayed formulas.  The basic implementation of this language wasdescribed in a previous paper [MADCAP: A scientific compiler for a displayed formula textbook language, Comm.ACM 4 (Jan. 61), 31-36].  This paper discusses recent improvements in the language in three areas: complexdisplay, logical control, and subprogramming.  In the area of complex display, the most prominent improvementsare a notation for integration and for the binomial coefficients.  In the area of logical controlthe chief new feature is a notation for variably nested looping.  The discussion of subprogramming is focusedon MADCAP's notation for and use of "procedures." | Wells, M. B.
680 | An Error-Correcting Parse Algorithm | Irons, E. T.
681 | Flexible Abbreviation of Words in a Computer Language | Lomis, R. G.Rubin, J.
682 | Recursive programming in FORTRAN II | Ayers, J. A.
683 | A Serial Technique to Determine Minimum Paths | Weimer, D. L.
684 | Interpolation, Differentiation, and Integration (Algorithm 77) | Hennion, P. E.
685 | Euler Summation (Algorithm 8) | Thacher Jr., H. C.
686 | Smooth (Algorithm 216) | George, R.
687 | Shanks (Algorithm 215) | Thacher Jr., H. C.
688 | q-Bessel Functions In(t)(Algorithm 214) | Simoes Pereira, J. M. S.
689 | Report of a Visit to Discuss Common ProgrammingLanguages in Czechoslovakia and Poland, 1963 | Gosden, J. A.Merner, J. N.Gay, R. E.Jones, J. L.Christopher, J. S.
690 | USA Participation in an InternationalStandard glossary on Information Processing | Traub, J. F.
691 | A Description of the APT Language | The APT (Automatically Programmed Tools) languagefor numerical control programming is described using the metalinguistic notation introduced in the ALGOL60 report.  Examples of APT usage are included.  Presented also are an historical summary of the developmentof APT and a statement concerning its present status.   | Brown, S. A.Drayton, C. E.Mittman, B.
692 | On the Inverse of a Test Matrix | Stockmal, F. J.
693 | An Extension of Fibonaccian Search To Several Variables | A technique which uses Fibonaccian searchconcepts has been developed to solve optimization problems involving unimodal functions of several variables. The technique has not been proven to be optimal in the sense that the one-dimensional Fibonacciansearch is.  However, it is valuable for certain kinds of calculations. | Krolak, P.Cooper, L.
694 | A Comparison of Disks and Tapes | The principal characteristics of current magneticdisks and tape units are summarized and compared.  Some of the characteristics of disk files are illustratedin a sorting example and compared to a tapesort.  The conclusion is presented that disk files are competitiveto tapes in some important applications. | Hess, H.
695 | Use of the Disk File on Stretch | The paper begins by briefly describing theStretch (IBM 7030) computer with special emphasis given to the organization and operation of its input-outputequipment.  Physical characteristics of the two-disk system (4,194,304 72-bit words, 8 usec-per-wordtransmission rate, etc.) are noted.  Timing limitations due to arm motion and disk rotation are discussed. Applications of disk usage are discussed separately for problem programs and for systems programssuch as compilers and the supervisory program. Approximately 260,000 words of disk storage are reservedfor the storage of systems programs and the subroutine library.  Problem programs, however, are notcurrently filed on the disk.  Certain programming techniques are discussed for transmitting words betweendisk and core storage with minimum delaying and interruption of the arithmetic unit.  Dumps on disk areconsidered for both recovery from computer malfunction and for mathematical or physical developments duringthe calculation.  Some comments are made regarding the reliability, economics, utility and weaknesses orlimitations of the disk system.  Several possible future applications are noted which appear to have disk connotations. | Carlson, B. G.Voorhes, E. A.
696 | An Automatic Data Acquisition and Inquiry System Using Disk Files | Lockheed Missiles and Space Company has installeda large-scale Automatic Data Acquisition (ADA) system which ties together the Company's manufacturingfacilities located in Van Nuys and Sunnyvale, California.  The system includes over 200 remote InputStations which collect and transmit Company operating data to a central Data Processing Center.  Two RCA 301EDP Systems are used to record and control the flow of data transmitted to the Data Processing Center. A large capacity RCA 366 Data Disc File is used to store information required to provide up-to-dateinformation in response to inquiries received from remotely located Inquiry Stations.  In addition to storageof data on the disk files, the system automatically records all incoming and outgoing data on magnetic tapeto be used as input to the Company's conventional off-line business data processing applications. | Edwards, J. D.
697 | A Numerical Method for the Determination of MovingField Isodose Curves for Treatment Planning in Radiotherapy | Dalrymple, G. V.Perez-Tamayo, R.
698 | DATA-DIAL: Two-Way Communication withComputers From Ordinary dial Telephones | An operating system is described which allowsusers to call up a remotely located computer from ordinary dial telephones.  No special hardware orconnections are required at the users' telephones.  Input to the computer is through the telephone dial;outputfrom the computer is in spoken form.  Results of a test with telephones in the Boston area are reported. | Marill, T.Edwards, D.Feurzeig, W.
699 | A Contour-Map Program for X-Ray Crystallography | A FORTRAN program is described for use withthe IBM 7090 system and an X, Y-plotter to produce a contour map.  A matrix of points evenly spaced ineach dimension is contoured.  Scale factors along the axes may be different and the axes need not be perpendicular. | Dayhoff, M. O.
700 | Hermite Interpolation (Algorithm 210) | Dwyer, T. A.
701 | Shuttle Sort (Algorithm 175) | Schubert, G. R.
702 | Assign (Algorithm 173) | Filsak, Z.Vrchovecka, L.
703 | Assign (Algorithm 173) | Scowen, R. S.
704 | Combinatorial of M Things Taken One At A TimeTwo At A Time, Up To N At A Time (Algorithm 161) | Collins, D. H.
705 | Combinatorial Of M Things Taken N At A Time (Algorithm 160) | Blakely, R. E.
706 | Fourier Series Approximation (Algorithm 157) | Schubert, G. R.
707 | Erf(x) (Algorithm 123) | Ibbetson, D.
708 | Evaluation of the Fresnel Integrals (Algorithm 88, 89, 90) | Gray, M. D.
709 | Assignment (Algorithm 27) | Newhouse, A.
710 | Fresnel Integrals (Algorithm 213) | Gray, M. D.
711 | Frequency Distribution (Algorithm 212) | Gray, M. D.
712 | Hermite Interpolation (Algorithm 211) | Schubert, G. R.
713 | Lagrangian Interpolation (Algorithm 210) | Schubert, G. R.
714 | Gauss (Algorithm 209) | Ibbetson, D.
715 | Discrete Convolution (Algorithm 208) | Foreman Jr., W. T.
716 | Stringsort (Algorithm 207) | Boothroyd, J.
717 | Partitioning Algorithms for Finite Sets | The partitions of a set with n elements are representedby certain n-tuples of positive integers.  Algorithm are described which generate without repetitionsthe n-tuples corresponding to: (1) all partitions of the given set, (2) all partitions of the given setinto m or fewer sets (1 <= m <= n), and (3) all partitions of the given set into exactly m sets (1 <= m <= n). | Hutchinson, G.
718 | An Experiment in Automatic Verification of Programs  | How effective is a compiler at replacing explicitverification, and what is the cost of this technique? | Weinberg, G. M.Gressett, G. L.
719 | Variable Width Stacks | Character addressable, variable field computerspermit ready establishment and manipulation of variable width stacks.  Single machine commands maypush variable field items down into such stacks or pop them up.  The availability of a variety of fielddelimiters allows the machine to push down or pop up more than one variable width item with one command. Since these stacking operations can be made the basis of compiler decoding algorithms the properuse of machines of this class for compilation has advantages over machines with fixed-length words. | Rotenberg, N.Opler, A.
720 | Format-Free Input in FORTRAN | Bailey, M. J.Barnett, M. P.Futrelle, R. P.
721 | Report on Proposed American Standard FlowchartSymbols for Information Processing | This paper presents the essential contents ofthe Proposed American Standard Flowchart Symbols for Information Processing.  This is the first proposedstandard prepared by Subcommittee X3.6 on Problem Description and Analysis of the American Standards Association (ASA). |  Rossheim, R. J.
722 | ALCOR Group Representation of ALGOL Symbols
723 | ECMA Subset of ALGOL 60
724 | A Profile of the Programmer | Synopsis: 549 members of the ACM participatedin a study concerned primarily with the attitudes of programmers toward their careers and jobs.  A veryhigh percentage of programmers have apparently entered their careers by accident; it has proven a happychoice for most and they expect to remain in the field during the next five years.  Their principaljob satisfactions relate to the nature of their work, and mostfind their jobs offer high level of professionalinterest and good working conditions.  Salary and advancement prospects, however,are not assatisfactory.  More than half report a positive attitude toward programmers and programming on the partof their organizations.  Turnover among themselves is attributed primarily to poor management-salary isseen as the principal motivating factor in turnover among other programmers.  Nature of the work offeredand salary are principal determinants in accepting a new job.  Programmers are less mobile than expected. Programmers tend to see their colleagues in a favorable light, on the whole.  Personalities seem tovary with function, systems programmers differing from applications programmers.  Four principal problemsfor programming in the immediate future are listed by participants: languages, personnel, various specificapplications and techniques, and building programming as a profession.
725 | Group Participation Computer Demonstration | McCormick, E. M.
726 | A General Program for the Analysis ofSquare and Rectangular Lattice Designs | This paper describes a general-purpose programthat will handle those incomplete block designs known as square and rectangular lattices.  Flow diagramsare given so that the method of calculation may be programmed for any digital computer. | Smillie, K. W.
727 | On the Approximate Solution of Delta(u)=F(u) | Three-dimensional Dirichlet problems for Delta(u)=F(u),Fu >= 0, are treated numerically by an exceptionally fast, exceptionally accurate numericalmethod.  Programming details, numerous examples and mathematical theory are supplied.Extension of themethod in a natural way to n-dimensional problems is indicated by means of a 4-dimensional example. | Greenspan, D.Yohe, M.
728 | Computer-Drawn Flowcharts* | To meet the need for improved documentationof written computer programs, a simple system for effective communication is presented, which has showngreat promise.  The programmer describes his program in a simple format, and the computer prepares flow chartsand other cross-referenced listings from this input.  The description can be kept up-to-date easily,and the final output clearly explains the original program.  The system has also proved to be a valuable debugging and coding aid. | Knuth, D. E.
729 | A Generalization of ALGOL | Wirth, N.
730 | MIRFAG: A Compiler Based on StandardMathematical Notation And Plain English | A pilot version of the compiler MIRFAG, nowin operation, is described.  The chief features of the system, which is intended for the solution of scientificproblems, are the presentation of mathematical formulas entirely in standard textbook notation.  The useof plain English for organizational instructions, automatic error diagnosis indicating the actual locationof the error in the uncompiled program, and an attempt to minimize that fragmentation of the originalproblem statement which is a normal feature of programming systems. | Gawlik, H. J.
731 | Symmetric List Processor  | A list processing system in which each listcell contains both a forward and a backward link as well as a datum is described.  This system is intendedfor imbeding in higher level languages capable of calling functions and subroutines coded in machine language. The presentation is in the form of FORTRAN programs depending on only a limited set of FORTRAN programsdepending on only a limited set of "primitive" machine language subroutines which are also defined. Finally, a set of field, particularly character, manipulation primitives are given to round out the system. | Weizenbaum, J.
732 | Monte Carlo Inverse (Algorithm 166) | Rodman,R. D.
733 | Newton Interpolation with Forward Divided Differences (Algorithm 169) | Thacher Jr., H. C.
734 | Newton Interpolation with Backward Divided Differences (Algorithm 168) | Thacher Jr., H. C.
735 | Calculation of Confluent Divided Differences (Algorithm 167) | Thacher Jr., H. C.
736 | Modified Hankel Functions (Algorithm 163) | Thacher Jr.,H. C.
737 | Exponentiation of Series (Algorithm 158) | Lawrence, J. D.
738 | Fourier Series Approximation (Algorithm 157) | George, R.
739 | MINIFUN (Algorithm 129) | Wasscher, E. J.
740 | INTEREST (Algorithm 45) | Wright, C. B.
741 | Evaluation of Determinant (Algorithm 41) | Freed, B. H.
742 | Evaluation of Determinant (Algorithm 41) | Freed, B. H.
743 | ARCCOSIN (Algorithm 206) | Konda, M.
744 | ATIVE (Algorithm 205) | Haubrich, J. G. A.
745 | STEEP2 (Algorithm 204) | Wasscher, E. J.
746 | STEEP1 (Algorithm 203) | Wasscher, E. J.
747 | Generation of Permutations in Lexicographical Order (Algorithm 202) | Shen, M. K.
748 | A Semi-Iterative Process for Evaluating Arctangents | Chu, W. H.Saathoff, D. R.
749 | Note onStochastic Matrices | Dumey, A. I.
750 | PEI Matrix Eigenvectors | Newbery, A. C. R.
751 | A Note on a Set of Test Matrices for Inversion | Rodman, R. D.
752 | Closing Out a Print Tape | Moore, D. P.
753 | A Procedure for Converting Logic Table Conditionsinto an Efficient Sequence of Test Instructions | Egler, J. F.
754 | Ye Indiscreet Monitor | Blatt, J. M.
755 | An Exponential Method of Numerical Integrationof Ordinary Differential Equations | A formula for numerical integration is prepared,which involves an exponential term.  This formula is compared to two standard integration methods,and it is shown that for a large class of differential equations, the exponential formula has superior stabilityproperties for large step sizes.  Thus this formula may be used with a large step size to decrease thetotal computing time for a solution significantly, particularly in those engineering problems where high accuracy is not needed. | Pope, D. A.
756 | A Computer Program for Editing the News | Danielson, W. A.Briggs, B.
757 | Simulation of a Traffic Network | Katz, J. H.
758 | Skeletal Structure of PERT and CPA Computer Programs | An introduction to the inner mechanics ofPERT and CPA computer programs is provided.  The major components of these programs as well as theirpurposes and interrelationships are outlined. | Kahn, A. B.
759 | Continued Operation Notation for SymbolManipulation and Array Processing | A brief account is given of a notational devicethat is very useful in the formal representation of syntaxes, string relationships and string transformationprocedures and also of computing procedures that deal with arrays of functions of many variables. The device consists of the use of certain "continued operation" or "collective" symbols that are analogous to the summationsymbol (Sigma) and continued multiplication symbol (Pi) of conventional mathematics. | Barnett, M. P.
760 | Dialects of FORTRAN | Pyle, I. C.
761 | A Note on the Dangling Else in ALGOL 60 | Some revisions of ALGOL 60 are proposed, whichnot only eliminate certain ambiguous statements but also add some convenience to the language.  A discussionof the background of the problem and a sketch of a proof that the ambiguities have been removed is included. | Kaupe Jr., A. F.
762 | Some Remarks on the Syntax of Symbolic Programming Languages | DiForino, A. C.
763 | A Syntax Controlled Generator of Formal Language Processors | Eickel, J.Bauer, F. L.Paul, M.Samelson, K.
764 | Reduction of a Matrix Containing Polynomial Elements (Algorithm 170) | Hennion, P. E.
765 | Orthogonal Polynomial Least Squares Surface Fit (Algorithm 164) | Bitterli, C. V.
766 | XY-move Plotting (Algorithm 162) | Fletcher, W. E.
767 | Certification of Algorithm 161Combinatorial of M Things Taken One at a Time,Two at a Time, Up to N at a Time[M. L. Wolfson and H. V. Wright,Comm. ACM, Apr. 1963] | Thoro, D.
768 | Certification of Algorithm 160Combinatorial of M Things Taken N at a Time [M. L. Wolfson and H. V. Wright,Comm. ACM, Apr. 1963] | Thoro, D.
769 | Algebra of Sets (Algorithm 156) | Bosworth, K. M.
770 | Combination in Any Order (Algorithm 155) | Bosworth, K. M.
771 | Combination in Lexicographical Order (Algorithm 154) | Bosworth, K. M.
772 | GOMORY (Algorithm 153) | Lefkowitz, B.D'Esopo, D. A.
773 | Matrix Inversion (Algorithm 140) | George, R.
774 | Jacobi (Algorithm 85) | Naur, P.
775 | Interpolation, Differentiation, and Integration (Algorithm 77) | Hennion, P. E.
776 | Partition, Quicksort, and Find (Algorithm 62, 64, & 65) | Randell, B.Russell, L. J.
777 | A Set of Test Matrices (Algorithm 52) | Naur, P.
778 | Associated Legendre Functions of the First Kindfor Real or Imaginary Arguments (Algorithm 47) | George, R.
779 | CROUT II (Algorithm 43) | Domingo, C.Rodriguez-Gil, F.
780 | Algorithm 42 INVERT, Alg.107 Gauss'sMethod, Alg.120 Inversion II, and gjr | Naur, P.
781 | Telescope 2 (Algorithm 38) | Bridges, J. F.
782 | Telescope 1 (Algorithm 37) | Bridges, J. F.
783 | Shellsort (Algorithm 201) | Boothroyd, J.
784 | Normal Random (Algorithm 200) | George, R.
785 | Conversions Between Calendar Date And Julian day Number (Algorithm 199) | Tantzen, R. G.
786 | Adaptive Integration and Multiple Integration (Algorithm 198) | McKeeman, W. M.
787 | Matrix Division (Algorithm 197) | Wells, M.
788 | Muller's Method for Finding Roots ofan Arbitrary Function (Algorithm 196) | Roman, R. D.
789 | Bandsolve (Algorithm 195) | Thurnau, D. H.
790 | Zersol (Algorithm 194) | Domingo, C.
791 | Character Manipulation in 7090 Fortran | Smith, D. D.
792 | Multiple-Precision Binary-To-Decimal IntegerConversion Using Only Addition And Subtraction | Keyes, D. F.Moore, D. P.
793 | Mapped List Structures | Baecker, H. D.
794 | A List-Type Storage Technique for Alphameric Information | A method which is economic in terms of space andtime is proposed for the storage and manipulation of character strings of arbitrary length in a fixedword-length computer.  The method is illustrated in an application to Algol-type identifiers in an Algol-like block structure. | Bowlden, H. J.
795 | Debugging Systems at the Source Language Level | Ferguson, H. E.Berner, E.
796 | SABRAG, A Time-Sharing Low-Cost Computer | The serial SABRAC computer designed and builtin the Scientific Department of the Israel defense Ministry has a 5000-location magnetic drum, main store. To avoid a need to resort to optimum programming techniques and to increase its overall efficiency thecomputer has also been given a 224-word ferrite core store from which the program is obeyed.  Transfersbetween the core and drum stores and to and from the twin paper-tape input and output channels are allavailable autonomously (concurrently, time-shared).  Multiplication and division orders are also autonomous,so that the machine may be executing up to three orders simultaneously.  All functions naturally are interlocked. A number of other advanced orders and facilities are also incorporated.In particular, an"Execute" order permits a temporary jump for up to four orders and a second modifier register permits doublemodification in general and relative addressing of subroutines in particular.  Thus the overall effectivespeed of the machine is muchhigher than its basic specification would lead one to expect and itsdesign indicates one way in which the concepts of time sharing may be incorporated in "low-cost" computers. | Lehman, M.Netter, Z.Eshed, R.
797 | American Standard Code for Information Interchange
798 | A Catalogue Entry Retrieval System | Scheff, B. H.
799 | Design of a Separable Transition-Diagram Compiler* | A COBOL compiler design is presented which iscompact enough to permit rapid, one-pass compilation of a large subset of COBOL on a moderately large computer. Versions of the same compiler for smaller machines require only two working tapes plus a compilertape.  The methods given are largely applicable to the construction of ALGOL compilers. | Conway, M. E.
800 | The Linking Segment Subprogram Language and Linking Loader | McCarthy, J.Corbato, F. J.Daggett, M. M.
801 | Least Squares Solution with Constraints (Algorithm 177) | Synge, M. J.
802 | SYMINV2 (Algorithm 150) | Rutishauser, H.
803 | Syminv2 (Algorithm 150) | Evans Jr., A.
804 | Exponentiation of Series (Algorithms 134) | Thacher Jr., H. C.
805 | Newton Maehly (Algorithm 105) | Kondo, J.
806 | Remark on Certification of Matrix Inversion Procedures | Moler, C.
807 | Reversion of Series (Algorithm 193) | Fettis, H. E.
808 | Confluent Hypergeometric (Algorithm 192) | Relph, A. P.
809 | Hypergeometric (Algorithm 191) | Relph, A. P.
810 | Complex Power (Algorithm 190) | Relph, A. P.
811 | Smoothing 2 (Algorithm 189) | Rodriguez Gil, F.
812 | Smoothing 1 (Algorithm 188)  | Rodriguez-Gil, F.
813 | Differences and Derivatives (Algorithm 187) | Vande Riet, R. P.
814 | Complex Arithmetic (Algorithm 186) | Vande Riet, R. P.
815 | Normal Probability for Curve Fitting (Algorithm 185) | Colker, A.
816 | Erlang Probability for Curve Fitting (Algorithm 184) | Colker, A.
817 | Nexcom (Algorithm 152) | Hopley, J.
818 | Realizing Boolean Connectives on The IBM 1620 | Hellerman, H.Senzig, D. N.
819 | Polynomial Evaluation Revised | Eisman, S. H.
820 | Checking for Loops in Networks | Gordon, R. M.
821 | Further Remarks on Sampling a Tape File-III | Juelich, O. C.
822 | Real-Time Programming Specifications | Problems in the implementation of large real-timeapplications are treated, and suggested guidelines for both program and file specifications are developed. The problems delineated also occur in systems programming. | Head, R. V.
823 | A Syntactic Description of BC NELLIAC | Huskey, H. D.Love, R.Wirth, N.
824 | DESCRIPTRAN-Automated Descriptive Geometry* | Descriptive geometry consists of procedures originallydesigned to solve 3-space geometry problems by graphical constructions and measurement instead ofby computation.  However, in addition to this it unifies and simplifies the approach to many such problems. When one can call subroutines that compute new coordinates that correspond to those obtainable fromthe graphical constructions, there is the three-way advantage of the approach of descriptive geometry, theaccuracy of computation and the speed of the digital computer.  DESCRIPTRAN makes it possible to programmany problems in 3-space with a few statements; it consists of 15 subroutines analogous to the procedures of descriptive geometry. | Kliphardt, R. A.
825 | PIP: A Photo-Interpretive Programfor the Analysis of Spark-Chamber Data* | An operating computer program that processesphotographically recorded data is described.  The input to the program consists of spark-chamber photographson which tracks of high-energy particles are recorded.  The program automatically scans, measuresand performs the preliminary interpretation of these photographs.  In continuous operation a processingrate of 5,000 photographic frames per hour is achieved. | Rudloe, H.Deutsch, M.Marill, T.
826 | Remarks on Fortran Subroutines for Time Series Analysis | Bennett, C. M.
827 | Disk File Sorting | Sorting techniques using an IBM 1401 witha random access storage device are evaluated. | Schick, T.
828 | Incompressible flow Network Calculations | A general method for the calculation of flowsand pressures in fluid flow networks is presented.  The method is applicable to computer use. | Cantrell, H. N.
829 | The External Language KLIPA For the URAL-2 Digital computer | Greniewski, M,Turski, W.
830 | CORC-The Cornell Computing Language | Conway, R. W.Maxwell, W. L.
831 | Real Error Function, ERF (Algorithm 123) | Thacher Jr., H. C.
832 | Curve Fitting with Constraints (Algorithm 74) | Isoda, K.
833 | Reduction of a Symmetric Bandmatrix to Triple Diagonal Form | Schwartz, H. R.
834 | Nonrecursive Adaptive Integration (Algorithm 182) | McKeeman, W. M.Tesler, L.
835 | Complementary Error Function-Large X (Algorithm 181) | Thacher Jr., H. C.
836 | Error Function-Large X (Algorithm 180) | Thacher Jr., H. C.
837 | Incomplete Beta Ratio (Algorithm 179) | Ludwig, O. G.
838 | Direct Search (Algorithm 178) | Kaupe Jr., A. F.
839 | Least Squares Solution with Constraints (Algorithm 177) | Synge, M. J.
840 | Least Squares Surface Fit (Algorithm 176) | Arthurs, T. D.
841 | Shuttle Sort (Algorithm 175) | Shaw, C. J.Trimble, T. N.
842 | A Posteriori Bounds on a Zero of a Polynomial (Algorithm 174) | Gibb, A.
843 | Assign (Algorithm 173) | Hajek, O.
844 | 1410 Fortran Edit Feature | Fedako,J. E.
845 | Another Test Matrix for Determinants and Inverses | Caffrey, J.
846 | Self-Inverse Conversion Table | Sanborn, T. G.
847 | A Penny-Matching Program | The logic of a penny-matching programwritten for the CSX-1 is described. | Wall, E.Brown, R. M.
848 | A Note on Range Transformations for Square Root and Logarithm | There was the germ of an idea in two previouspapers [1,2] which no one seems to have picked up in almost five years.  For certain functions it seemsdesirable to transform the argument to a short range symmetric about 10.1 will give examples of thisusage for the square root and logarithm function for both binary and decimal machines. | Bemer, R. W.
849 | Use of Tree Structures for Processing Files | In data processing problems, files are frequentlyused which must both be searched and altered.  Binary search techniques are efficient for searchinglarge files, but the associated file organization is not readily adapted to the file alterations.  Conversely,a chained file allocation permits efficient alteration but cannot be searched efficiently. A fileorganized into a tree-like structure is discussed, and it is shown that such a file may both be searchedand altered with times proportional to slog(s)N, where N is the number of file items and s is a parameterof the tree.  It is also shown that optimizing the value of s leads to a search time which is only 25per cent slower than the binary search.  The tree organization employs two data chains and may be consideredto be a compromise between the organizations for the binary search and the chained file.  The relationof the tree organization to multidimensional indexing and to the trie structure is also discussed. | Sussenguth Jr., E. H.
850 | Conversion, Reconversion and ComparisonTechniques In Variable-Length Sorting | The logic is described for converting highlyvariable input records into a format that can be easily and efficiently processed by a sorting program. The internal record formats are discussed in relation to (1) their conversion from input formats,(2) their reconversion to output formats, and (3) comparison techniques between internal formats. | Waks, D. J.
851 | Design and Characteristics of a Variable-LengthRecord Sort Using New Fixed-Length Record Sorting Techniques | This paper describes the application of severalnew techniques for sorting fixed-length records to the problems of variable-length record sorting. The techniques have been implemented on a Sylvania 9400 computer system with 32,000 fixed-length wordsof memory.  Specifically, the techniques sequence variable-length records of unrestricted size, producelong initial strings of data, merge strings of data at the power of T-1, where T is the number of worktapes in a system, and do not restrict the volume of input data. | Goetz, M. A.
852 | A Method of Comparing the Time Requirements of Sorting Methods | Hall, M. H.
853 | The COBOL Sort Verb | Paterson, J. B.
854 | Some Characteristics of Sorting in ComputingSystems Using Random Access Storage Devices  | The substantial differences in characteristicsof random access storage and tape devices dictate that concepts and objectives of computer program designbe considered from the viewpoint of the external file medium used.  This is particularly true in thecase of sorting.  In a tape-oriented system, the major sorting problem is that of minimizing merge timedespite the limited orders of merge possible.  In contrast, sorting in a random access-oriented systemencourages the selection of the optimum order of merge from many possible orders.  The latter problemis discussed in this paper, along with criteria developed for determining the optimum order of merge accordingto the various properties of random access storage devices.  Attention is also given to the problemof key sorting versus record sorting and the possibly serious disadvantage of key sorting on a random access system. | Hubbard, G. U.
855 | Organization and Structure of Dataon Disk FileMemory Systems for Efficient Sorting and Other Data Processing Programs | An approach to the organization and structureof data on Bryant Disc File Memory Systems for sorting and performing other data processing functionsis presented.  The following areas are covered: characteristics of Bryant Disc File Systems on the BendixG-20 and RCA 301; two proposed "chaining" structures for data; and functions of a Disk File Executive Routine. The concepts for sorting and performing file maintenance processing using the proposed structure andexecutive routine are discussed.  Additionally, it is shown that sorting can be accomplishedwithout the use of disk storage work areas. | Goetz, M. A.
856 | Sorting with Large Volume, Random Access, Drum Storage | An approach to sorting records is describedusing random access drum memory.  The Sort program described is designed to be a generalized, self-generatingsort, applicable to a variety of record statements.  This description is divided into three parts.  Thefirst part presents the operating environment; the second defines the general solution; the third partdescribes the internal sort-merge technique. | Falkin, J.Savastano Jr., S.
857 | Sorting Nonredundant Files-Techniques Used in the FACT Compiler | Some typical file structures, including somecalled "non-redundant," are examined,and the methods used in FACT to sort such files are discussed. | Glore, J. B.
858 | A Tape File Merge Pattern Generator | A routine is presented which specifies thesequence of merge cycles to effect the merging of sorted tape files.  The routine is designed to minimizeelapsed computer time by varying the power of the merge cycles, so as to use all the available tapedrives, with its characteristic of assigning one drive to a single-reel file and two drives to each multiple-reel file. | Cooke, W. S.
859 | Computer Planned Collates | French, N.C.
860 | A Comparison Between the Polyphase and Oscillating Sort Techniques | A comparison between the Oscillating and PolyphaseSort techniques is developed for computer systems having from four to ten tape drives.  The basisfor the comparison is the total reading and writing required for various number of input stringsand tape drives for the two techniques. | Goetz, M. A.Toth, G. S.
861 | Read-Backward Polyphase Sorting | Read-backward Polyphase sorting provides moreefficient use of the tapes available to a sort than most other sorting techniques.  Backward Polyphaseproduces a continuous merging process from n-1 tapes where n is the total number of tapes being used inthe sorting process.  Any of the available presorting techniques may be used in conjunction with the Polyphasemerge sort provided that the presort has the capability of producing both ascending and descendingstrings and distributing the strings on the various tapes as required by the Polyphase Merge. | Gilstad, R. L.
862 | String Distribution for the Polyphase Sort | Malcolm Jr., W. D.
863 | Multiphase Sorting | Manker, H. H.
864 | An Empirical Study of Minimal Storage Sorting | Hibbard, T. N.
865 | Internal and Tape Sorting Using the Replacement-Selection Technique | A general technique for sequencing unsortedrecords is presented.  The technique is shown to be applicable for the first stage of a generalized sortprogram (the formation of initial strings) as well as for sorting records within a memory storage (aninternal sort).  It is shown that given N records in memory storage, records are sequenced using 1+log2N tests per record, that initial string lengths will average 2N for random input records, and that reading,writing and processing can be accomplished simultaneously if the computer permits such overlap. | Goetz, M. A.
866 | Sorting on Computers | Gotlieb, C. C.
867 | Least Squares Fitting of Planes to Surfaces Using Dynamic Programming | Dynamic programming has recently been usedby Stone, by Bellman and by Gluss to determine the closet fit of broken line segments to a curve in aninterval under the constraint that the number of segments is fixed.  In the present paper successivemodels are developed to extend the method to the fitting of broken plane segments to surfaces z=g(x,y) definedover certain types of subareas of the (x,y)-space.  The first model considers a rectangular area, withthe constraint that the plane segments are defined over a grid in the (x,y)-space.  It is then shown howthis model may be incorporated into an algorithm that provides successive approximations to optimal fitsfor any type of closed area.  Finally, applications are briefly described. | Gluss, B.
868 | A Suggested Method of Making Fuller Use of Strings in ALGOL 60 | Shoffner, M. G.Brown, P. J.
869 | Term of Magic Square (Algorithm 148) | Thoro, D.
870 | Term of Magic Square (Algorithm 148) | Barnecut, J. N. R.
871 | PSIF (Algorithm 147) | Thacher Jr., H. C.
872 | Adaptive Numerical Integration by Simpson's Rule (Algorithm 145) | McKeeman, W. M.
873 | Random (Algorithm 133) | Poore Jr., J. H.
874 | Chebyshev Curvefit (Algorithm 91) | Hale, R. P.
875 | Incomplete Elliptic Integrals (Algorithm 73) | van De Riet, R. P.
876 | Complete Elliptic Integral (Algorithm 149) | Thacher, H. C.
877 | Complete Elliptic Integral of the First Kind (Algorithm 55) | Thacher Jr., H. C.
878 | Reduction of a Matrix Containing Polynomial Elements (Algorithm 170) | Hennion, P. E.
879 | Newton Interpolation with Forward Divided Differences (Algorithm 169) | Kahan, W.Farkas, I.
880 | Newton Interpolation with Backward Divided Differences | Kahan, W.Farkas, I.
881 | Calculation of Confluent Divided Differences (Algorithm 167) | Kahan, W.Farkas, I.
882 | Monte Carlo (Algorithm 166) | Rodman, R. D.
883 | Complete Elliptic Integrals (Algorithm 165) | Thacher Jr., H. C.
884 | Orthogonal Polynomial Least Squares Surface Fit (Algorithm 164) | Clark, R. E.Kubik, R. N.Phillips, L. P.
885 | Modified Hankel Function (Algorithm 163) | Fettis, H. E.
886 | XY-move Plotting (Algorithm 162) | Stockton, F. G.
887 | Combinatorial of M Things Taken One at a Time,Two at a Time, Up to N at a Time (Algorithm 161) | Wright, H. V.Wolfson, M. L.
888 | Algorithm 160 Combinatorial of M Things Taken N at A Time | Wolfson, M. L.Wright, H. V.
889 | Official Actions and Responses to ALGOL As a Programming Language
890 | Selected Definitions  | A selection of the definitions prepared by theACM Standards Committee's Subcommittee on Programming Terminology is presented for review by the ACM membership. | Fritz, W. B.
891 | Everyman's Information Retrieval System | The information retrieval problem whose solutionis presented here was posed by a technical library with limited bubget and personnel.  The solution,however, is quite general and is applicable to many different types of retrieval problems.  Further,themethod of solution makes it possible for many groups who have previously dismissed an informationretrieval program as expensive and difficult (from a programming stand-point) to reconsider their position,for the present solution makes it possible to install an information retrieval program in less thanthree months, and with relatively little equipment. | Whitley, V. W.
892 | RECOL-A Retrieval Command Language | An interrogation scheme is described for theretrieval and manipulation of data file records.  The language of the interrogation scheme allows for selectingfile records with the are of logical condition statements, defining record classes, associating filerecords, editing printed output, and summarizing the results of the above operations.  Some examples ofa typical file application and the more significant features of a particular machine implementation are given. | Climenson, W. D.
893 | Significance Arithmetic on a Digital Computer | The 7090 at NYU has been modified to includea "Significance Mode" of operation which is intended to facilitate the identification of significant bits inthe results of floating-point arithmetic operations.  The manner in which floating-point arithmetic is handledin this mode is discussed.  Several numerical experiments using this mode are described and comparisonsare made with the ordinary "normalized mode."  Examples include power series evaluation, linear equationssolution, determinant evaluation and matrix inversion. | Goldstein, M.
894 | An Iterative Factorization Technique for Polynomials | An iterative technique is displayed whereby factorsof arbitrary degree can be found for polynomials in one variable.  Convergence is shown to occur alwaysif a certain Jacobian does not vanish and if the initial approximation to a factor is near enough to anactual factor.  The process is simply programmed, and preliminary results indicate it to be well adaptedto use with digital computers.  For factors of degree two, the technique is similar to that of Bairstow,the present method being somewhat simpler. | Luther, H. A.
895 | A Computational Extension of the Variate Difference Method | Presented here is a computational extensionof the variate difference method as developed by G. Tintner [1]. | Scheinok, P. A.
896 | Characteristic Values and Vectors of Defective Matrices | Thompson, G. T.
897 | Note on the Proof of the Non-existenceof a Phrase Structure Grammar for ALGOL 60 | Brown, P. J.
898 | Random (Algorithm 133) | Laughlin, D. L.
899 | Magic Square (Algorithm 117 & 118) | Bosworth, K. M.
900 | Ancestor (Algorithm 79) | Thacher Jr., H. C.
901 | Difference Expression Coefficients (Algorithm 79) | Clark, E. S.
902 | Determinant (Algorithm 159) | Digby, D. W.
903 | Exponentiation of Series (Algorithm 134 ) | Fettis, H. E.
904 | Fourier Series Approximation (Algorithm 157) | Mifsud, C. J.
905 | Algebra of Sets (Algorithm 156) | Mifsud, C. J.
906 | Combination in any Order (Algorithm 155) | Mifsud, C. J.
907 | Combination in Lexicographical Order (Algorithm 154) | Mifsud, C. J.
908 | Test Matrix for Inversion  | LaSor, W. S.
909 | Arithmetizing Declarations (Corrigendum) | Conway, M. E.Speroni, J.
910 | Selective Instruction Trap for the 7090 | Mayer, R. J.
911 | A Variant Method of File Searching | McIlroy, M. D.
912 | Addressing an Array Yi in k-Dimensionsby Fortran for Analysis of Variance | Garber, M. J.
913 | Neliac | Halstead, M. H. 
914 | Jovial and Its Documentation | Shaw, C. J.
915 | Documentation of IPL-V | Newell, A.
916 | FORTRAN | Heising, W. P.
917 | COMIT | Yngve, V. H.
918 | COBOL | Cunningham, J. F.
919 | Documentation Problems: ALGOL 60 | Naur, P.
920 | Toward Better Documentation of Programming Languages | Yngve, V. H.Sammet, J. E.
921 | Incomplete Elliptic Integrals (Algorithm 73) | Meyer, N. A.
922 | Multint (Algorithm 32) | Thacher Jr., H. C.
923 | Gomory (Algorithm 153) | Bauer, F. L.
924 | Nexcom (Algorithm 152) | Hopley, J.
925 | Location of a Vector in a Lexicographically Ordered ListAlgorithm 151) | Walter, H. F.
926 | Syminv2 (Algorithm 150) | Rutishauser, H.
927 | Linear Programming Applied to Ultraviolet Absorption Spectroscopy | White, W. C.Shapiro, B.Pratt, A. W.
928 | Character Manipulation in FORTRAN | Lewis, T. S.
929 | Glossary Construction | Grems, M.
930 | Decimal-to-Binary Conversion of Short Fields | Yarbrough, L. D.
931 | Systematic Mistake Analysis of Digital Computer Programs | Miller, J. C.Maloney, C. J.
932 | Matrix Inversion by Gauss-Jordan Inversion II (Algorithm 120) | Naur, P.
933 | Magic Squares (Algorithm 117 & 118) | Naur, P.
934 | Gauss's Method (Algorithm 107) | Naur, P.
935 | Calculating Primes by Means of GPS (Algorithm) | Naur, P.
936 | A Set of Test Matrices (Algorithm 52) | Naur, P.
937 | Inverse of a Finite Segment of the Hilbert Matrix (Algorithm 50) | Naur, P.
938 | Invert (Algorithm 42) | Naur, P.
939 | Gamma Function (Algorithm 31) | Behrenz, P. G.
940 | Generating Discrete Random Variables in a Computer | This note is concerned with details of how toinstruct a computer to choose one from many things with assigned probabilities.  The method uses a uniformvariable to direct the computer to a memory location; if this is done by a sequence of appropriately chosenconditional probabilities, efficient use of memory space and quite fast programs will result. | Marsaglia, G.
941 | A Recursive Program for the General n-Dimensional Integral | A general program is outlined for n-dimensionalintegration with variable limits.  The program is of a recursive nature and uses Simpson's rule combinedwith repeated bisection to attain the required accuracy.  It was developed in the Ferranti Mercury Autocode Scheme. | Cadwell, J. H.
942 | FORTRAN Subroutines for Time Series Analysis | The authors have recently been concerned in atime-series study that constituted a fairly typical piece of applied statistical research, involving extensivecomputations on a moderately large quantity of data.  Wehave found that the many different numericalprocesses that were required could be built up almost completely from a small number of basic operations,and a set of FORTRAN subroutines has been written to perform these.  The main purpose of thisnote is to describe these subroutines, but since the question of general statistical programs istopical [1], we include some general remarks. | Healy, M. J. R.Bogert, B. P.
943 | Terms Frequently Combined in Problem Description | Grems, M.
944 | Storage and Search Properties of a Tree-Organized Memory System | A memory with list properties [1] may be usedto construct numeric, alphabetic or alphanumeric trees.  Such trees have information storage and retrievalproperties applicable to problems involving large quantities of data or to problems where the quantity,word length and distribution of stored information is not known a priori, or changes rapidly during the processing. The purpose of this paper is to examine the storage and search properties of a tree-organizedstorage system assuming that a memory possessing certain list properties is available.  Of prime interestis the application where a symbol table, dictionary or similar file is to be stored and searched. | Scidmore, A. K.Weinberg, B. L.
945 | Arithmetizing Declarations: An Application to COBOL | Conway, M. E.Speroni, J.
946 | Suggestions on ALGOL 60 (ROME) Issues - A Report by the AmericanStandards Association Subcommittee X3.4.2 | Utman, R. E.
947 | Supplement to the ALGOL 60 Report | Woodger, M.
948 | Note on the Use of Procedures  | Healy, M. J. R.
949 | Integer and Signed Constants in ALGOL | A few remarks are given on the relations betweensyntax and semantics in the programming languages.  The aim is to point out that, if it is true that the grammarof a context-free language should be conceived not only as a strings-generating device but also as amethod for expressing a meaning, then the grammar of ALGOL is open to some criticism. | Petrone, L.Vandoni, C. E.
950 | Parallel Methods for Integrating Ordinary Differential Equations | This paper is dedicated to the proposition that,in order to take full advantage for real-time computations of highly parallel computers as can beexpected to be available in the near future, much of numerical analysis will have to be recast in a more"parallel" form.  By this is meant that serial algorithms ought to be replaced by algorithm whichconsist of several subtasks which can be computed without knowledge of the results of the other subtasks. As an example, a method is proposed for "parallelizing" the numerical integration of an ordinary differentialequation, which process, by all standard methods, is entirely serial. | Nievergelt, J.
951 | Rational Chebyshev Approximationsto the Bessel Function Integrals Kis(x) | The second Remes algorithm is used to approximatethe integrals Kis by rational functions. The related coefficients for the approximations ofKi1, Ki2, Ki3 are given for different precisions. | Gargantini, I.Pomentale, T.
952 | Another use of FORTRAN II Chaining | Drath, D. G.
953 | Scanning Text with a 1401 | Baker, J. J.
954 | A Note on the Calculation of Probabilities in an F-Distribution | Smillie, K. W.Anstey, T. H.
955 | A Class of Matrices to Test Inversion Procedures | Cline, R. E.
956 | A Family of Test Matrices | Newbery, A. C. R.
957 | Method for Partial Rewriting of Magnetic Tape | Miller, J. A.
958 | A Case of too Much Precision | Synge, M. J.
959 | Mark Sense and Port-A-Punch Programming Inputs | Lubbert, W. F.
960 | Curve Fitting with Format Fortran | Garber, M. J.
961 | Limited Bit Manipulation Using FORTRAN II | Techniques are developed for manipulating bitsusing only FORTRAN II.  These techniques allow individual bits to be tested, certain fields to beshifted, and numbers coded in BCD to be converted to Binary. | Oster, C. A.
962 | Double-Precision Squares Root for The CDC-3600 | In January of 1960, the late Hans J. Maehly completeda summary of approximations to the elementary functions for the CDC-1604 computer.  The approximationsand techniques suggested by Maehly are equally applicable to the second large computer in the CDC line,the 3600.  Unlike the 1604, however, the 3600 has built-in double-precision floating-point arithmetic. The present work, largely inspired by the successes of Maehly and his associates, concerns the extension of oneof Maehly's ideas to a double-precision subroutine for the 3600. | Cody, W. J.
963 | Relative Effects of Central Processor and Input-OutputSpeeds Upon Throughput on the Large Computer | Presented in this paper is a technique fordetermining the relative effects of the internal speed of the computer and the speed of the input-outputunits upon the overall speed of the system. Equations are derived which permit the determination of theseeffects from hardware usage measurements. | White, P.
964 | Mechanization of Tedious Algebra-thee Coefficients of Theoretical Chemistry | A table of formulas for certain integralsinvolving Legendre functions has been constructed mechanically by a program which performed algebraic operations. The formulas are all rational algebraic expressions in a single variable and were constructedby a recurrence procedure.  They are of interest in molecular quantum chemistry.  Trivial coding techniqueswere used to write the relevant programs in FORTRAN.  The results were photo composed on a PhotonS-560 system, that was controlled by tapes which were punched directly from the computer output, soavoiding manual keyboarding, transcription errors and keyboarded correction. | Wactlar, H. D.Barnett, M. P.
965 | Greatest Common Divisor (Algorithm 237 [A1]) | Bray, T. A.
966 | Evaluation of Determinant (Algorithm 224 [F3]) | Hasselblad, V.Rulifson, J.
967 | Complementary Error Function (Algorithm 181 [S15]) | Clausen, I.Hansson,L.
968 | Radical-Inverse Quasi-Random Point Sequence (Algorithm 247 [G5]) | Halton, J. H.Smith, G. B.
969 | Graycode (Algorithm 246 [Z]) | Boothroyd, J.
970 | Treesort 3 (Algorithm [M1]) | Floyd, R. W.
971 | Time Sharing in a Traffic Control Program | The Toronto traffic signal control system consistsof a variety of logically distinct computer programs, all competing for machine time.  To satisfythese demands, a time-sharing program has been written whose purpose is to execute, in the order of apredefined priority, the various subprograms within the real-time system.  In this paper the more interestingaspects of the time-sharing program are outlined. | Green, L. E. S.
972 | An Executive System Implemented as a Finite-State Automaton | The 473L command and control system used bythe Air Force permits many operators to access large data files through the use of a computer.  The man-machineinterface is satisfied by several communication consoles from which operators may enter queries andview replies.  A data link permits remote stations to send messages, status reports and inventories directlyto the computer.  The information received over the on-line data link is used to update the data fileswhich are stored on disk.  The 473L programming system is divided into an Executive Control Program andfive components with different processing priorities.  These priorities permit the system to be most sensitiveto the console inputs and permit the operators at all the consoles to time share the central processor. The Executive Control Program provides for the orderly transitions of control among the programmingsystem components. The major emphasis of the paper is on the technique of using the definition of afinite-state automaton for organizing the Executive Control Program. | Heistand, R. E.
973 | Estimation of Heart Parameters Using Skin Potential Measurements | A fundamental problem of vector cardiographyis the estimation of the state of the heart on the basis of skin potential measurements.  A mathematicalmodel relating ventricular dipoles to surface potentials is sketched.  Then it is shown that the inverseproblem-that of determining electrical heart parameters on the basis of skin potential measurements-maybe viewed as a nonlinear multipoint boundary value problem.  A feasible solution, employing quasilinearizationand high-speed digital computers, is given. | Bellman, R.Collier, C.Kagiwada, H.Kalaba, R.Selvester, R.
974 | A Technique for Reading Gapless Tapes Makes ElectrocardiographAnalysis Feasible on the IBM 7090  | To study arrhythmias and higher frequencycomponents of the electrocardiogram, long series of patient heart cycles must be examined before validcomparison of different heart beats can be made. A technique is presented for the automatic analysisof long series heart cycles via a digital computer. | Maher, A. S.
975 | The New Program of Work for the InternationalStandard Vocabulary in Computers and InformationProcessing | Traub, J. F.
976 | Fresnel Integrals (Algorithm 213 [S20]) | Gray, M.
977 | Conversions Between Calendar Date andJulian Day Number (Algorithm 199 [Z]) | Oppenheim, D. K.
978 | Fresnel Integrals (Algorithm 244 [S20]) | Lotsch, H.
979 | Logarithm of a Complex Number (Algorithm 243 [B3]) | Collens, D. S.
980 | Multiple-Precision Arithmetic and the ExactCalculation of the 3-j, 6-j and 9-j Symbols | Described in this paper is a system of general-purposemultiple-precision fixed-point routines and their use in subroutines which calculate exactlythe quantum-mechanical 3-j, 6-j and 9-j symbols of large arguments. | Maer, R. M.Redlich, M. G.
981 | Rounding Problems in Commercial Data Processing | A common requirement in commercial data processingis that the sum of a set of numbers, rounded in a generally understood manner, be equal to the sumof the numbers rounded individually.  Four rounding procedures are described to accomplish this.  The particularprocedure that is appropriate depends upon whether the numbers being accumulated can vary in sign,whether their sum can vary in sign, and whether the last number being summed can be recognized as such prior to its rounding. | Kelley, T. B.
982 | An Inductive Approach to Language Translation | The possibility of natural language translationby means of fixed operations on example translations is considered.  The conception of sentence translationwhich motivates the work is informally presented, and the measurement of physical similarity in pairs ofstrings is discussed, a notion which plays a central role in the proposed type of translator.  Experimentalevidence is presented in support of the premise upon which this conception is based. | Faulk, R. D.
983 | Take-up reels for One-Inch Perforated Tape forInformation Interchange (Proposed American Standard)
984 | Report on Input-Output Procedures for ALGOL 60 (IFIP)
985 | Report on SUBSET ALGOL 60 (IFIP)
986 | Proposed Amendment to Proposed American Standardon Specification for General-Purpose Paper Cards for Information Processing
987 | FORTRAN vs. Basic FORTRAN (A Programming Languagefor Information Processing on Automatic Data Processing Systems)
988 | History and Summary of FORTRAN Standardization Development for the ASA | Heising, W. P.
989 | A Method of Syntax Specification | Iverson, K. E.
990 | Constraint-Type Statements in Programming Languages | A proposal is made for including in a programminglanguage statements which imply relations between variables but which are not explicit assignmentstatements.  The compiler sets up a Newtonian iteration making use for the purpose of a routine for formal differentiation. | Wilkes, M. V.
991 | Gamma Function with Controller Accuracy (Algorithm 225 [S14]) | Bray, T. A.
992 | Gamma Function (Algorithm 221 [S14]) | McCombs, V. K.
993 | Kutta Merson (Algorithm 218 [D2]) | Priebe, K. B.
994 | Stringsort (Algorithm 207 [M1]) | Blair, C. R.
995 | Steep1 (Algorithm 203 [E4]) | Wallack, P.
996 | Permutations of a Set with Repetitions (Algorithm 242 [G6]) | Sag, T. W.
997 | Patent Protection of Computer Programs | Jacobs, M. C.
998 | Computer Programs are Patentable | Hamlin, K. B.
999 | Joint Inventorship of Computers | Hauptman, G. A.
1000 | Computer Patent Disclosures | Kates, J. P.
1001 | Copyright Aspects of Computer Usage | This paper is concerned with the question ofwhat constitutes infringement of a copyright on a book or other nondramatic literary work when the workis fed into a computer and is indexed, analyzed, partially reprinted, or otherwise utilized by the computerto produce eye-readable output.  The question of copyrightability of programs and infringement of copyrightson programs is also discussed.  The paper is directed primarily to a discussion of the presentlaw.  Some aspects of the proposed new copyright law are also included.  General recommendations aremade with respect to the proposed revision of the copyright law. | Lawlor, R. C.
1002 | A Rapid Method for Digital Filtering | Since much of the computer time spent in time-seriesanalysis is used for multiplications, a minimum multiplication method was devised for digitalfiltering, with the expectation that it would be useful in the on line, real-time analysis of biologicaldata.  The filters are constructed from a succession of readily analyzable components in a manner that facilitatescascading.  The repertoire of frequency response curves includes relatively good low-pass andband-pass designs.  Programs are available for implementing both the synthesis of these filters, andtheir application on computers whose assemblers allow the definition of recursive macros. | Whittlesey, J. R. B.
1003 | A Computer Analysis Method For Thermal Diffusion in Biochemical Systems | In the thermal detection of rapid biochemicalreactions it is necessary to correct the temperature data for transient heat conduction losses in a cylindricalcalorimeter.  To handle the complexities arising from varying thermal-relaxation times of concentric insulatinglayers, a computer program was developed which gives the temperature distribution of the systemas a function of radius and time.  This distribution is corrected at each step by a subroutine which calculatesthe instantaneous chemical state of there action, as well as the heat produced by this reaction. The program is based on a direct statement of Fourier's law of heat conduction and the chemical rateequation to provide a "bookkeeping law" to follow the reactants and the flow of heat packets, in such away that the computer continually stores the heat distribution.  A computer analysis method is here regardedas one in which the physical laws of a process are used explicitly in the program. Usually this resultsin by passing much of the mathematical procedures conventionally used.  The program was tested againstsome known exact solutions of the heat equation and gave identical results, and compared well with experimentaldata of a known biochemical reaction.  The construction of computer programs based on the directstatement of the physical laws is a principle of general applicability which has been appliedto several other physical phenomena. | Davids, N.Berger, R. L.
1004 | Arctangent (Algorithm [B1]) | Mills, K. W.
1005 | Coordinates on an Ellipsoid (Algorithm 240 [Z]) | Dorrer, E.
1006 | A Storage Allocation and Reference Structure | A method is proposed and discussed which allowsa subscripted-variable capability (in the FORTRAN sense) to be added to AUTOCODER-Type assembly systems. | Fitzwater, D. R.
1007 | Extension of Existing Compilers By Sophisticated Use of Macros | A description is presented of an applicationin which macros and string concatenation were employed to add a new facility to BELFAP. | Benett, R. K.Neumann, H. D.
1008 | Scheduling Meetings with a Computer | Computer scheduling of papers as it was developedfor the 1960 meeting of the Federation of American Societies for Experimental Biology (FASEB) is described. The FASEB meeting is the largest scientific meeting held in the United States each year.  The techniquedeveloped for FASEB can be applied to schedule any meeting with parallel sessions. | Schultz, C. K.Brooks, A.Schwartz, P.
1009 | Solution of Combinatorial Problems Using GeneratingFunctions on a Variable-Field Computer | The utility of generating functions in solvingcombinatorial problems is discussed.  Particular implementation results are presented and evaluated. | Weinberg, G. M.
1010 | A Multiuser Computation Facility for Education and Research | Present-day computing facilities are limitedin their value for scientific research by inability to interact strongly with users.  The full power of aresearch computing instrument should be available at many terminals that give each user the ability to generate,correct and operate any procedure he wishes, either simple or complex.  Implementation is describedfor a small-scale multiuser computer system that permits several users to work independently with themachine, and to obtain satisfactory response using typewriter communication. | Dennis, J. B.
1011 | Logarithm of a Complex Number (Algorithm 48 [B3]) | Collens, D. S.
1012 | Formal Parsing Systems | Automatic syntactic analysis has recently becomeimportant for both natural language data processing and syntax-directed compilers.  A formal parsing systemG = (V,u,T,R) consists of two finite disjoint vocabularies, V and T, a many-many map, u, from V ontoT, and a recursive set R of strings in T called syntactic sentence classes.  Every program for automaticsyntactic analysis determines a formal parsing system.  A directed production analyzer (I,T,X,p) is anondeterministic pushdown-store machine with internal vocabulary I, input vocabulary T, and all productionsof p in the form:  (Z,a) -> aY1 ... Ym where  Z, Yi are elements of the set I and a is an element of theset T.  Every context-free language can be analyzed by a directed production analyzer.  The Kuno-Oettingermultiple-path syntactic analyzer for English is a concrete example of a directed production analyzerand of a working parsing algorithm.  The connection between structures assigned by the analyzer and those ofa conventional phrase structure grammar is examined in this paper. | Greibach, S. A.
1013 | Final Examination Scheduling | A method for scheduling final examinationsto yield a minimal number of student conflicts is described.  The "minimization" is achieved by repetitivelyevaluating a nonlinear set of equations.  Imbeded in the process is a random or Monte Carlo selectionof assignments.  As in such heuristic techniques, the solution may not be optimum and many solutionsmay be found which yield locally minimal results.  Computer programs are described and empirical results given. | Broder, S.
1014 | Machine Controls for Analysis of Variance | A major problem in using the analysis of variance,as the number of factors increases, is the exponential rise in the number of interactions.  Eventhough the experimenter may not be interested in these interactions it is impossible to ignore them inmost experimental designs because of the problem of getting error terms.  It is natural therefore to lookto the computer to handle the bulk of work involved in computing the interactions.  A program deviceto get the computer to do this is described. | Weldon, R. J.
1015 | Near-Minimax Polynomial Approximations and Partitioning of Intervals | A method of near-minimax polynomial approximationis described.  As a by-product, this method provides a formula for an estimate of the maximum errorassociated with a given degree of approximation.  Using this formula, a partitioning algorithm is obtainedfor dividing a basic interval into subintervals for which approximations of equal degree give equal maximum error. | Fraser, W.Hart, J. F.
1016 | Interchangcable Perforated Tape Variable BlockFormats for Positioning and Straight Cut (RS-273) and Contouring and Contouring/Positioning (RS-274) NumericallyControlled Machine Tools (Proposed American Standards)
1017 | Comments on Bit-Sequencing of the ASCIIin Serial-by-Bit Data Transmission | Bemer, R. W.Booth, J.
1018 | Gauss (Algorithm 209 [S15]) | Pike, M. C.
1019 | XY move Plotting (Algorithm 162 [J6]) | Cavin, D. K.
1020 | Free Field Read (Algorithm 239 [I5]) | McKeeman, W. M.
1021 | Conjugate Gradient Method (Algorithm 238 [F4]) | Reeves, C. M.
1022 | Greatest Common Divisor (Algorithm 237 [A1]) | Peck, J. E. L.
1023 | Bessel Functions of the First Kind (Algorithm 236 [S17]) | Gautschi, W.
1024 | A Note on the Formation of Free List | Waite, W. M.
1025 | A Method of Syntax-Checking ALGOL 60 | A syntax checker was designed based on the syntaxof ALGOL as described in the ALGOL 60 Report [Communications of the ACM, May, 1960].  Since the definitionof the elements of the language is recursive it seemed most desirable to design the syntax checkeras a set of mutually recursive processors tied together by subroutines which perform certain bookkeepingfunctions.  Because of the recursive nature of the language and of the syntax checker the problemof recovery after an error required much attention.  A method was devised which permits most programsto be checked completely despite errors. | Lietzke, M. P.
1026 | Divide-and-Correct Methods for Multiple Precision Division | A division problem is defined and notationto relate it to the problem of multiple precision operation in a digital computer is introduced.  A basicdivide-and-correct method for multiple precision division is formulated and its known properties brieflyreviewed.  Of particular interest is the fact that the method produces at each step a set of preciselythree estimates for the desired result, one of which is exact. | Stein, M. L.
1027 | An Alternate Checksum Method | Newhall, N. S.
1028 | Investigation of a New Analytical Methodfor Numerical Derivative Evaluation | A recently proposed analytical approach tonumerical derivative evaluation is discussed.  The technique is shown to be both accurate and easy toapply, though certain indicated modifications are required.  Its use should greatly facilitate the writingand debugging of programs requiring derivatives of highly complex functions. | Wilkins, R. D.
1029 | A Simple Automatic Derivative Evaluation Program | A procedure for automatic evaluation of total/partialderivatives of arbitrary algebraic functions is presented.  The technique permits computation ofnumerical values of derivatives without developing analytical expressions for the derivatives.  The keyto the method is the decomposition of the given function, by introduction of intermediate variables,into a series of elementary functional steps.  A library of elementary function subroutines is providedfor the automatic evaluation and differentiation of these new variables.  The final step in this processproduces the desired function's derivative.  The main feature of this approach is its simplicity. It can be used as a quick-reaction tool where the derivation of analytical derivatives is laborious andalso as a debugging tool for programs which contain derivatives. | Wengert, R. E.
1030 | Techniques for the Simulation of Computer Logic | The simulation of a digital computer is anintegral part of most computer design automation systems.  The evaluation of the Boolean functions whichcharacterize the computer being simulated constitutes one major portion of a simulation system.  Four generalprocedural classes for evaluating these functions are defined.  Toward greatly increased efficiency of a simulationsystem, methods are presented for simultaneously evaluating many functions for one set of values of thevariables,and for evaluating simultaneously one function for many sets of values for the variables. | Breuer,M. A.
1031 | A Note on Starting the Newton-Raphson Method | Determination of a suitable initial estimatefor a root of an equation f(x) = 0 by means of computing the roots of a sequence of related equations is described. | Beyer, W. A.
1032 | Theoretical Considerations in Information Retrieval Systems | Information storage and retrieval systems are composedof three major components: (a) identification of information and tagging it for effective retrieval,(b) searching strategy, how to enter the file to circumvent the scanning of nonrelevant material, and(c) file organization to make access to information efficient.  For identification of information the papersuggests that a metalanguage (recently discussed in a paper by Goffman, Verhoeff and Belzer) associatedwith an object language be used.  For searching strategy, a linear model for an evaluation functionof relevancy is developed which rewards the system for retrieving relevant documents and not retrievingthe nonrelevant, and penalizes the system for the escaped relevant documents and false drops.  The inadequaciesof a linear model are indicated.  Two approaches to file organization are discussed.  One is self-organizationof the file based on its history and past performance, and the second is a self-generating subsetof the file with a high probability of being relevant. | Belzer, J.Goffman, W.
1033 | Experimental Personalized Array Translator System | A system designed for intimate man-machineinteraction in a general-purpose problem-solving environment is experimentally operational.  The systemutilizers an array-oriented symbolic source language containing powerful statement types.  These include numeric,Boolean, relational and selection operators on operands which can be entire arrays.  The system alsopermits simple specification of test and argument arrays in single statements.  The completely symbolicoperating system includes display and entry of program and data.  Sequence control is aided by an interruptswitch which allows the user to interact with the program during execution. In addition to normalstored program sequencing, the system provides trace options and the ability to enter any statementfor immediate execution.  Present implementation of the system is with an interpretive translator on an IBM 1620 computer. | Hellerman, H.
1034 | Autosate | An automated data system analysis technique isdescribed. The technique is designed to alleviate some of the principal problems that beset current analysis-largedata workloads, long span of time between project inception and system operational date, the lackof explicit directions for conducting data system analysis and using the results, and the lack of a techniqueto control data system changes throughout its lifetime. The analysis is geared to determining workload,relationships and storage characteristics of documents in the information network automatically. | Gatto, O. T.
1035 | Characteristics of the FORTRAN CEP Language | The FORTRAN CEP languages differs from FORTRANII mainly because: (1) it extends the variety of the modes for real quantities; (2) it allows suitablemixtures, in an input/output list or in an expression, of quantities that occur under different modes; (3)it makes it possible to address a greater number of input/output equipment; and (4) it removes the restrictionson the complexity of the list of quantities to be transmitted between the magnetic core memoryand the drum or the magnetic tape units. | Mancino. O. G.
1036 | Remark on Further Generalization of ALGOL | Garwick, J. V.
1037 | Reduction of a Matrix Containing PolynomialElements (Algorithm 170 [F3]) | Priebe, K. B.
1038 | Crout with Equilibration and Iteration (Algorithm 135 [F4]) | McKeeman, W. M.
1039 | Summation of Fourier Series (Algorithm 128 [C6]) | Thacher Jr., H. C.
1040 | Romberg Integration(Algorithm 60 [D1]) | Thacher Jr., H. C.
1041 | Random Permutation (Algorithm 235 [G6]) | Durstenfeld, R.
1042 | Poisson-Charlier Polynomials (Algorithm 234 [S23]) | Simoes Pereira, J. M. S.
1043 | Talk-A High-Level Source Language DebuggingTechnique With Real-Time Data Extraction | TALK, meaning Take A Look, is a debugging techniquewhich aids substantially in debugging complex real-time programming systems by interrupting the usersprogram at desired points to extract previously specified data.  The extracted data is later edited,listing the associated data with its high-level source language identification. | verSteeg, R. L.
1044 | An Automatic Loader for Subroutine Nests | A method for automatic loading of library subroutines,which can be adapted to operate in conjunction with any conventional two-pass assembler is described. The method is specifically designed to cope with a nested library structure. | Kanner, H.
1045 | Programming Analysis of Variance by Sequencesof Operators and Isomorphic Mappings | A special operator calculus developed by Hartleyin 1956 together with a new mapping scheme has been found to be efficient in programming analysisof variance for multifactor experiments. The operator calculus and the mapping scheme are described in detail. | Peng, K. C.
1046 | A Compiler-Building System Developed by Brooker and Morris | In a number of articles published during thepast two years, R. A. Brooker and D. Morris (joined by J.S. Rohl in their most recent paper have presenteda very interesting programming system that they have developed for the Ferranti Atlas computer.  Thepresent paper describes some of the major features of their system. it expands on some points that the originalauthors cover briefly, and treats only very lightly some topics to which they devote considerable space. The purpose of this paper is purely expository.  Except in some very small details, and in some comments,it does not intentionally depart from or add to the material published in the listed references. | Rosen, S.
1047 | Generation of Test Matrices by Similarity Transformations | A method for obtaining test matrices witha prescribed distribution of characteristic roots is given.  The process consists of using particularlysimple similarity transformations to generate full matrices from canonical forms.  The matrices generatedalso have known characteristic vectors, inverses and determinants. | Ortega, J. M.
1048 | Approximate Solution of Axially Symmetric Problems | A variety of physical problems in such diversefields as electrostatic  field theory, heat and ideal fluid flow, and stress concentration theoryreduce, under the assumption of axial symmetry, to the study of an elliptic partial differential equation. Dirichlet-type problems associated with this equation are studied on regions whose boundaries includea nondegenerate portion of the x-axis and exceedingly accurate numerical methods are given for approximating solutions. | Greenspan, D.
1049 | Numerical Solution of Nonlinear Two-PointBoundary Problems by Finite Difference Methods | Solution of nonlinear two-point boundary-valueproblems is often an extremely difficult task.  Quite apart from questions of reality and uniqueness,there is no established numerical technique for this problem.  At present, shooting techniques are theeasiest method of attacking these problems.  When these fail, the more difficult method of finite differencescan often be used to obtain a solution.  This paper gives examples and discusses the finite differencemethod for non-linear two-point boundary-value problems. | Holt, J. F.
1050 | A Parts Breakdown Technique Using List Structures | List structured parts breakdown is proposedand discussed.  Implementation facts are presented on operating program using these techniques. | Brian, W. J.
1051 | Multiword List Items | The list concept as originally proposed byNewell, Simon and Shaw specified single computer words as elements of a list.  This report describes theuse of two or more consecutive words as one element.  Such use results in a considerable saving in both thespace required to hold a given amount of data, and in the execution time required to perform a givenprocess on the data.  Following a brief description of standard list structures with single-word items, themultiword items are introduced.  Then variable-length items are described, along with the corresponding space-utilizationproblems.  Finally, several examples are given to illustrate the use of multiword lists. Thispaper attempts to draw together various recent papers which have applied some of these concepts in differentways, and indicate how they relate to the more general problems. | Comfort, W. T.
1052 | Reducing Truncation Errors by Programming | In accumulating a sum such as in a numericalintegration with a large number of intervals, the sum itself becomes much larger than the individualaddends.  This may produce a less accurate sum as the number of intervals is increased.  Separate variablescan be established as accumulators to hold partial sums within various distinct intervals.  Thus,the extensive successive truncations are eliminated. | Wolfe, J. M.
1053 | Design and Implementation of a General-Purpose Input Routine | A general-purpose input routine is discussedand advocated for FORTRAN.  The philosophy of such programs is examined and exemplified. | Hassitt, A.
1054 | Gauss-Seidel (Algorithm 220 ) | Batson, A. P.
1055 | q-Bessel Functions In(t) (Algorithm 214) | Simoes Pereira, J. M. S.
1056 | Shellsort (Algorithm 201) | Batty, M. A.
1057 | Critical Path Scheduling (Algorithm 40) | Hoffman, I. A.
1058 | Simpson's Rule for Multiple Integration (Algorithm 233) | Olynyk, F.
1059 | Heapsort (Algorithm 232) | Williams, J. W. J.
1060 | Matrix Inversion (Algorithm 231) | Boothroyd, J.
1061 | Matrix Permutation (Algorithm 230) | Boothroyd, J.
1062 | Symbol Manipulation in FORTRAN-SASP I Subroutines | A set of subroutines for use in FORTRAN aredescribed whose purpose is to synthesize output strings from (i) input strings which have been analyzedby the SHADOW general syntactic analysis subroutine reported earlier, and/or (ii) packed BCD strings formedin any way.  Function-type subroutines are included for intermediate manipulations, which are performedon the strings which are stored in an abbreviated internal representation.  The automatic way in whichan internal representation for each newly created substring is stored sequentially in a block of commonstorage, and the manner in which a storage block is dynamically allocated for that purpose, are discussed. | Bailey, M. J.Barnett, M. P.Burleson, P. B.
1063 | One-Inch Perforated Paper Tape for InformationInterchange (Proposed American Standard)
1064 | Perforated Tape Code for InformationInterchange (Proposed American Standard)
1065 | Bit Sequencing of the American Standard Code forInformation Interchange (ASCII) in Serial-by-Bit Data Transmission (Proposed American Standard)
1066 | Growing Applications of Linear Programming | Use of linear programming models has grown soextensively in recent years that the whole concept for organizing a computer code has undergone a radicalchange.  It no longer is adequate merely to reduce a mathematical algorithm (i.e. the simplex method) toa computer code.  An advanced code must cope with such a variety of situations that the respective computersubprograms must be organized into an integrated system.  Emphasis in this paper is devoted to the underlyingprinciples upon which future linear programming systems must be based.  These viewpoints are influencedby the new demands that applications within the petroleum industry are placing on such systems.  Someof the components of such a system are: translation of problem statement in terms of basic data to linearprogramming matrix coefficients, data transmission for direct computer entry, data file at the computer center,data processing and editing prior to solving the simplex algorithm, an efficient and reliable codefor solving the above-mentioned algorithm, and flexible means for summarizing the results. | Aronofsky, J. S.
1067 | Picture Generation With a Standard Line Printer | A method is described for producing gray-tonedpictures on a line printer by utilizing the different degrees of blackness of standard print characters. Gray scales with 17, 32 and 64 levels have been devised.  Scanned images of blood cells are used to display the technique. | Perry, B.Mendelsohn, M. L.
1068 | A FORTRAN II Load-Time-Saver | Ackermann, A. F.
1069 | A Method for Comparing the Internal Operating Speeds of Computers | Raichelson, E.Collins, G.
1070 | Expand, A System for Input Card Replication | Warrington, J. A.Norris, J. H.
1071 | Computer-Usage Accounting for Generalized Time-Sharing Systems | The current development of general time-sharingsystems requires a revision of accounting procedures for computer usage. Since time-sharing system usersoperate concurrently, it is necessary to be more precise as to the amount of computer time and storagespace that a user actually utilizes.  The various cost factors which should be considered for computer usageaccounting in generalized time-sharing systems are discussed. | Rosenberg, A. M.
1072 | An Improved Equivalence Algorithm | An algorithm for assigning storage on the basisof EQUIVALENCE, DIMENSION and COMMON declarations is presented.  The algorithm is based on a tree structure,and has reduced computation time by 40 percent over a previously published algorithm by identifying allequivalence classes with one scan of the EQUIVALENCE declarations.  The method is applicable in any problemin which it is necessary to identify equivalence classes, given the element pairs defining the equivalence relation. | Galler, B. A.Fisher, M. J.
1073 | A Fast Procedure for Generating Exponential Random Variables | A very fast method for generating exponentialrandom variables in a digital computer is outlined. | MacLaren, M. D.Marsaglia, G.Bray, T. A.
1074 | Shanks (Algorithm 215) | Schumaker, L.
1075 | Shuttlesort (Algorithm 175) | Juelich, O. C.
1076 | Multiple Integration (Algorithm 146) | Wirth, N.
1077 | Chebyshev Curve Fit (Algorithm 91) | Naur, P.
1078 | Elementary Functions by Continued Fractions (Algorithm 229) | Morelock, J. C.
1079 | Q-Bessel Functions (Algorithm 228) | Simoes Pereira, J. M. S.
1080 | Chebyshev Polynomial Coefficients (Algorithm 227) | Cyvin, S. J.
1081 | Normal Distribution Function (Algorithm 226) | Cyvin, S. J.
1082 | Gamma Function with Controlled Accuracy (Algorithm 225) | Cyvin, S. J.Cyvin, B. N.
1083 | An Experiment in a User-Oriented Computer System | A version of a software-hardware system forthe purpose of facilitating the programming and analysis of well-formulated problems is described.  A modifiedFlexowriter is used to generate computer-acceptable input when equations or computable requests are typedin much the same manner as they would appear in conventional mathematical texts.  The typing and languagerules are quite flexible and unrestrictive.  While the compiler part is efficient, the system asa whole has much broader aspects as a tool for the study of problem solving and self-teaching systems. | Klerer, M.May, J.
1084 | On Declaring Arbitrarily Coded Alphabets | The inability of existing programming languagesto handle character strings from more than one or two alphabets is mentioned and a scheme for declaringadditional alphabets is proposed.  The scheme provides for: many-to-one encodings, right or leftjustification, collating sequences different from numeric sequence, variations in character size (numberof bits.) from alphabet to alphabet, and arbitrary source-language character representation. | Shaw, C. J.
1085 | Specification for General-Purpose Paper Cards forInformation Processing (Proposed American Standard)
1086 | A Proposal for Input-Output Conventions in ALGOL60-A Report of the Subcommittee on ALGOL of the ACM Programming Language Committee
1087 | Problems in Automatic Abstracting | A variety of problems concerning the designand operation of an automatic abstracting system are discussed.  The purpose is to a general view ofseveral major problem areas.  No attempt is made to discuss details or to indicate preferences among alternative solutions. | Edmundson, H. P.
1088 | Menu Planning by Computer | A computer code has been developed which plansmenus by finding minimum cost combinations of menu items such that the daily dietary, gastronomicand production requirements can be satisfied for a sequence of days.  A fast, special integer programmingalgorithm is described which approximates the theoretical solution to the problem.  If necessary, anymenu can be changed on-line and then post-optimized.  Up to 30 percent saving on food cost is possible. A FORTRAN program for the IBM 1410 is available on request.  A considerable amount of data processingmust precede the implementation of the system. | Balistfy, J. L.
1089 | Designing a Computer Center | Denison, A.Popov, G.
1090 | Incomplete Beta Function Ratios (Algorithm 222) | Gautschi, W.
1091 | Hypergeometric and Confluent Hypergeometric (Algorithm 191 & 192) | Thacher Jr., H. C.
1092 | Nonrecursive Adaptive Integration (Algorithm 182) | Butler, H. S.
1093 | Evaluation of Determinant (Algorithm 224) | Rotenberg, L. J.
1094 | Prime Twins (Algorithm 223) | Shimrat, M.
1095 | Decimal Tables of Binary Coded Tables | Griebrok, M.
1096 | On Avoiding Matrix Reversals Between 7090 FORTRAN II and 7090 FORTRAN IV | Stevens, D.Benson, B.
1097 | An Algorithm for Converting Integers from Base A to Base B | A little known, simple algorithm for integerconversion between number systems is presented and proved. | Gladwin, H. T.
1098 | A Comparison of List-Processing Computer Languages(Including a Detailed Comparison of COMIT, IPL-V, LISP 1.5, and SLIP) | A detailed comparison is presented of COMIT,IPL-V, LISP 1.5 and SLIP - four well-known computer programming languages which, among them, exhibit all theprincipal characteristics of existing list-processing languages.  Important common features of list-processinglanguages are reviewed: forms of data structures which are manipulated, necessity for dynamic allocationof storage, use of pushdown stores, and use of recursive operations.  Principal differences between thefour languages under consideration are detailed: representations of data, both by the programmer and withinthe machine; methods for storage allocation; programming formalisms and special processes available,including arithmetic facilities; and usability in terms of availability, documentation, learning aidsand debugging facilities.  A rough comparison shows that all the languages discussed have approximatelythe same speed.  Finally, the authors give some heuristics to aid in the selection of one of theselanguages for use in particular problem applications, concluding that no one of the languages considered isdistinctly superior in all possible list-processing applications. | Bobrow, D. G.Raphael, B.
1099 | Professional Computer Work for the Blind | Developments in computer technology have openednew professional opportunities for the intelligent blind.  Since there are few if any occupations in which theblind can participate without serious disadvantage, the opportunities offered them to gain entrance intovarious occupations through computer use including that of programmer, is important for future rehabilitationplanning. Also of immediate interest is the fact that the blind may be especially suited for programmingwork.  Because of intense training in and constant experience with locating objects in the unseenenvironment and also because of superbly trained memory, the blind brings to the work of programming skillswhich the sighted has had little need to acquire.  These qualifications should result in fewer debuggingproblems and make the blind a valuable addition to any systems group.  Before the blind could become aserious professional, a number of aids and techniques had to be developed that can mediate between machinesand programmer.  This paper describes the techniques and aids which were designed by the staff of the MedicalComputing Center of the University of Cincinnati College of Medicine. | Sterling, T. D.Lichstein, M. Scarpino, F.Stuebing, D.
1100 | Status of Computer Sciences Curricula in Colleges and Universities | Atchison, W. F.Hamblen, J. W.
1101 | The Place of Logical Design and SwitchingTheory In The Computer Curriculum | Muller, D. E.
1102 | Mechanical Languages: A Course Specification | Gorn, S.
1103 | Logic for the Computer Sciences  | Korfhage, R. R.
1104 | An Undergraduate Curriculum in Numerical Analysis | Forsythe, G. E.
1105 | On Introducing Digital Computing | Arden, B. W.
1106 | Programming of Digital Computers | Perlis, A. J.
1107 | Computers and Education | Keenan, T. A.
1108 | Digital Data Processor for Tracking the Partially Illuminated Moon* | A study of lunar tracking techniques and fabricationof a breadboard to assess the feasibility of the best technique selected was conducted to definea tracking system for observation of the sight line to the center of a partially illuminated moon.  Thedata processing portion of the system is presented in detail and then described in general are the operationof the tracker head assembly for data readout, the operation of the entire system and the effect dataprocessing considerations have on the design of the tracker system.  The system basically consists ofan optical sensor, digital computer and tracker drive mechanism.  The three system units, connectedin cascade, comprise the control loop.  For this application, an optical telescope with a radial mechanicalscanning mechanism was used that read out lunar sight line measurement information.  This informationis sequentially read into a special purpose digital computer that extracts the measurements andcomputes the error signals that drive the tracker to the appropriate attitude. | Wilcox, H. J.
1109 | Conversion of a Power to a Series of Chebyshev Polynomials* | Even slowly convergent power series can berearranged as series in Chebyshev polynomials if appropriate sequence transformations are used in evaluatingthe coefficients.  The method is illustrated by computing the coefficients for the expansionof the logarithm and dilogarithm. | Thacher Jr., H. C.
1110 | A Fourier Series Method for the Numerical Solutionof a Class of Parabolic Partial Differential Equations* | A Fourier series method is described which, whenapplied to a certain class of parabolic partial differential equations, reduces the problem to a systemof ordinary differential equations.  An application is given for which the method shows a considerable advantageover conventional finite difference methods. | Forrington, C. V. D.
1111 | A Class of Iterative Techniques For the Factorization of Polynomials* | A method of iteration is developed in termsof a function of somewhat arbitrary character.  Sufficient conditions are given for convergence ofthe process, yielding factors of arbitrary degree for polynomials in one variable.  Both Lin's methodand Newton's method occur as special cases. | Luther, H. A.
1112 | A Technique for Computer Detection and Correction of Spelling Errors* | The method described assumes that a wordwhich cannot be found in a dictionary has at most one error, which might be a wrong, missing or extra letteror a single transposition.  The unidentified input word is compared to the dictionary again, testingeach time to see if the words match-assuming one of these errors occurred.  During a test run on garbledtext, correct identifications were made for over 95 percent of these error types. | Damerau, F. J.
1113 | Computer-Made Perspective Movies as a Scientific and Communication Tool* | It is easy to program the basic transformationrequired for a perspective drawing.  This fact plus the advent of high speed microfilm printers suchas the General Dynamics Electronics S-C 4020 makes possible perspective movies as the direct output froma computer.  The programming of such a movie is briefly described for studying the angular motions ofa satellite containing an attitude control system.  In the movie, a domino-shaped box represents the satelliteand a sphere with circles of latitude and longitude represents the earth.  The cost was approximatelythree to eight minutes of IBM 7090 time per one minute of movie. | Zajac, E. E.
1114 | Generating a Canonical Prefix Encoding* | Computer programs for generating a minimum-redundancyexhaustive prefix encoding are described.  One program generates a Huffman frequency tree, anotherdetermines the structure functions of an encoding, and a third program assigns codes. | Schwartz, E. S.Kallick, B.
1115 | Randomized Binary Searching With Tree Structure | A more efficient method of using tree structuresis proposed, which utilizers both plus and minus branches in the search path.  Very significantgains result when the search key includes alphabetic characters. | Clampett Jr., H. A.
1116 | Tests on a Computer Method for Constructing School Timetables* | A previously proposed computer method for constructingtimetables, based on an iteration involving Boolean matrices, is described.  In limited tests themethod has successfully produced timetables on every trial.  References are given which relate thetimetable problem to theorems on matrices of zeros and ones, and to theorems on bipartite graphs.  Someproblems of applying the method to constructing timetables in real situations are noted. | Csima, J.Gotlieb, C. C.
1117 | Polyphase Sorting With Overlapped Rewind* | A variation of the polyphase merge techniqueof sorting is described which permits one tape at a time to be rewound while the merge is continued onthe remaining tapes.  The result is the overlapping of a major portion of the rewind time.  The techniqueshould be considered whenever a sort is written to operate on five or more tapes that cannot be read backwards. The savings of the overlap method appear to increase as the number of available tapes is increased. | McAlester, R. L.
1118 | FORTRAN Subroutines for Time Series Data Reduction* | MacGowan, R. A.
1119 | An Open Letter to X3.4.3 (FORTRAN Standards -- American Association)
1120 | "ALCOR Group Representations of ALGOL Symbols,"Comm. ACM 6 (1963), 597-599. (Corrigenda)
1121 | Comments on "A Continued Operation Notation"* | This note is intended to clarify and correctseveral points in a recent paper describing some notations for symbol manipulation by M.P. Barnett [Comm. ACM 6(August, 1963)]. | Barnett, M. P.Gerard, J. M.Sambles, A. W.
1122 | A Note on Some Compiling Algorithms | Two compiling generators for arithmetic expressionsare discussed: one presently in use in an experimental compiler, and an improvementsuggested by K. Speierman of Burroughs. | Anderson, J. P.
1123 | Gauss (Algorithm 209) | Gladfelter, G. W.
1124 | Matrix Division (Algorithm 197) | Wells, M.
1125 | Syminv2 (Algorithm 150) | Naur, P.
1126 | ERF (Algorithm 123) | Barton, S. P.Wagner, J. F.
1127 | Tridiagonal Matrix (Algorithm 122) | Naur, P.
1128 | Evaluation of Determinant (Algorithm 41) | Rotenberg, L. J.
1129 | Incomplete Beta Function Ratios (Algorithm 222) | Gautschi, W.
1130 | Gamma Function (Althm 221) | Gautschi, W.
1131 | On Context and Ambiguity in Parsing* | Ross, D. T.
1132 | An Extension to ALGOL for Manipulating Formulae* | Perlis, A. J.Iturriaga, R.
1133 | A Programming Package for Some General Modes of Arithmetic* | Brooker, R. A.
1134 | Some Effects of the 6600 Computer on Language Structures* | The problem of compiling efficient 6600 codesprompted the development of an intermediate language reflecting the structure of the machine, that is moreeasily manipulated in improving object program efficiency.  The subject of this paper is the intermediatelanguage and methods of manipulating it.  Compilations of a series of arithmetic statements arediscussed.  It is assumed that all functions and exponentials have been removed from these statements,and replaced by simple variables.  For purposes of simplicity the treatment of subscripts is ignored. A simplified 6600 structure is presented to illustratethe compiling method.  Several assumptions are madefor purposes of simplification, although there are cases in which the assumptions are violated in the actual machine. | Allard, R. W.Wolf, K. A.Zemlin, R. A.
1135 | A General Business-Oriented Language Based on Decision Expressions* | The structure of a digital compute programminglanguage which covers a wide class of business and file processing applications is presented.  Sucha structure, based on identifying and incorporating into a compiler the aspects common to all processesof such class, permits writing extremely compact programs, even for comparatively complex applications,in terms of tables of control expressions which express only information characteristic of the particularapplication.  Furthermore,local changes of a process (e.g. changes affecting only one of the outputfiles involved) can be effected by local modifications in the program (e.g. modification of only one entry of thetables).  This structure also allows for inexpensive preparation of loading-speed compilers which translate thesource programs into efficient machine codes.  The approach adopted here departs from conventional mechanicallanguage design philosophies.  It stresses the structural analysis of the class of processes to be representedin the languages, as opposed to emphasizing formal (i.e., contents-independent) syntactical definitions. It relies exclusively on nonprocedural representation of process as sets (tables) of relationsbetween data and results (there are no control statements such as GO TO, etc.), instead of using proceduredescriptions (which are one-to-one translations of flowcharts).  Here an invariant pattern of procedureis identified as characteristic of the class of all batch file processes.  This new philosophy hasthe potential to overcome well-known deficiencies of other business-oriented languages and fully meetsthe requirements set by CODASYL for such languages, including machine-independence. | Lombardi, L. A.
1136 | Beginnings of a Theory of Information Handling* | Steel Jr., T. B.
1137 | A Format Language* | Perlis, A. J.
1138 | Formalism in Programming Languages* | Iverson, K. E.
1139 | FORTRAN IV as a Syntax Language* | Leavenworth, B. M.
1140 | "Structural Connections" in Formal Language* | Irons, E. T.
1141 | Bounded Context Syntactic Analysis | Floyd, R. W.
1142 | An Extension of ALGOL-Like Languages | Rose, G. F.
1143 | Analysis of Decay-Type Data* | A comparative study has been made of a varietyof numerical techniques for fitting experimental data of the decay type by forms involving the sums ofexponentials.  Statistical errors of the fitted parameters are also calculated.  These methods have beenapplied to artificially-generated sets of data as well as to the results of experiments with radioactivetracers on both human and animal subjects.  Results show that the values of the fitted parametersare very sensitive to variations in the fitting procedure.  Therefore great care very sensitive to variationsin the fitting procedure.  Therefore great care must be exercised in identifying such values withphysical constants.  Although the values of functions derived from these fitted parameters which can definitelybe associated with physical entities are generally more stable under variations in the fitting techniques,error bounds can be so large that no great confidence can be placed even in them.  It would therefore appearbest to select a uniform technique both for running the experiments and for analyzing the data, and thento consider as significant only relative results between one subject and the next. | Worsley, B. H.
1144 | Digital Computer Determination of Alpha Source Activity | A technique is described for determining theactivity and homogeneity of an alpha source.  It is believed that the technique, using a digital computer,has many uses and applications in the field of nuclear physics. The technique involves computermanipulation of the digital image of the nuclear source.  Experimental details are given. | Robbins, D.Taylor, W. E.
1145 | GIT-A Heuristic Program for Testing Pairsof Directed Line Graphs for Isomorphism* | Given a pair of directed line graphs, the problemof ascertaining whether or not they are isomorphic is one for which no efficient algorithmic solution is known. Since a straightforward enumerative algorithm might require 40 years of running time on a very highspeed computer in order to compare two 15-node graphs, a more sophisticated approach seems calledfor.  The situation is similar to that prevailing in areas such as game-playing and theorem-proving, wherepractical algorithms are unknown (for the interesting cases), but where various practical though only partiallysuccessful techniques are available.  Git-Graph Isomorphism Tester-incorporates a variety of processesthat attempt to narrow down the search for an isomorphism, or to demonstrate that none exists.  No onescheme is relied upon exclusively for a solution, and the program is designed to avoid excessive computationalong fruitless lines.  GIT has been written in the COMIT language and successfully tested on the IBM 7090. | Unger, S. H.
1146 | An Efficient Composite Formula for Multidimensional Quadrature | A (2s+1)-point second-degree quadrature formulafor integration over an s-dimensional hyper-rectangle is presented.  All but one of the points lie on thesurface with weights of opposite sign attached to points on opposite faces.  When a large volume is subdividedinto congruent rectangular subdivisions, only one point is required in each interior subdivisionto achieve second-degree accuracy. | Thacher Jr., H. C.
1147 | On the Numerical Solution of Boundary Value Problemsfor Linear Ordinary Differential Equations* | A numerical method is presented for the solutionof boundary value problems involving linear ordinary differential equations.  The method describedis noniterative and makes use of any one-step numerical integration scheme to reduce the problem fromone of boundary values to one of initial values.  Comments are made concerning some numerical resultsof applying the method to a specific problem.  In addition an extension of the algorithm describedto more general problems is discussed. | Day, J. T.Collins II, G. W.
1148 | An Example in "Significant-Digit" Arithmetic* | Different methods of handling the summing processfor the geometric series are shown to give results indicating widely differing significances when carriedout in a machine incorporating "significant-digit" arithmetic. | Miller, R. H.
1149 | GARGOYLE , A Language for Compiler Writing* | Garwick, J. V.
1150 | A Fortran Post-Mortem Procedure | Kahan, W.Leppik, J. J.
1151 | A Note on Multiplying Boolean Matrices II | Comstock, D. R.
1152 | Floating-Point Arithmetic with 84-Bit Numbers | A classic and straightforward technique ispresented which is not limited to the size or type of number representation used or multiple precision arithmetic. | Gregory, R. T.Raney, J. L.
1153 | A Fast Procedure for Generating Normal Random Variables* | A technique for generating normally distributedrandom numbers is described.  It is faster than those currently in general use and is readilyapplicable to both binary and decimal computers. | Marsaglia, G.MacLaren, M. D.Bray, T. A.
1154 | Multi-Tape and Infinite-State Automata -- A Survey | A survey of machines which are more powerfulthan finite automata and less powerful than general Turing machines is presented.  It is felt that the machinesin this category are as closely related to digital computers as either the finite automata or theunrestricted Turing machines.  Intermediate machines can be created by adjoining on infinite-state memoryto a finite-state machine and then performing any or all of the following: (1) restrict the manner inwhich the unbounded portion of the memory can be accessed, (2) bound the number of steps allowed for acomputation by some increasing recursive function of the length of the input, (3) restrict the total amountof memory available in the same manner.  Examples from all three classes and their properties are discussed. | Fischer, P. C.
1155 | Experiments with a Deductive Question-Answering Program | As an investigation in artificial intelligence,computer experiments on deductive question-answering were run with a LISP program called DEDUCOM, an acronymfor DEDUctive COMmunicator. When given 68 facts, DEDUCOM answered 10 questions answerable from the facts. A fact tells DEDUCOM either some specific information or a method of answering a general kind of question. Some conclusions drawn in the article are: (1) DEDUCOM can answer a wide variety of questions.  (2)A human can increase the deductive power of DEDUCOM by telling it more facts.  (3) DEDUCOM can write verysimple programs (it is hoped that this ability is the forerunner of an ability to self-program, whichis a way to learn).  (4)DEDUCOM's search procedure at present has two bad defects: some questions answerablefrom the given facts cannot be answered and some other answerable questions can be answered only ifthe relevant facts are given in the "right" order.  (6) At present, DEDUCOM's method of making logical deductionsin predicate calculus has two bad defects: some facts have to be changed to logically equivalent onesbefore being given to DEDUCOM, and some redundant facts have to be given to DEDUCOM. | Slagle, J. R.
1156 | Hankel Function (Algorithm 124 [S17]) | Reilly, G. A.
1157 | Procedure for the Normal Distribution Functions (Algorithm 272 [S15]) | MacLaren, M. D.
1158 | Program Structures for Parallel Processing | Constructs for organizing and explicating parallelprogram segments are discussed as extensions to ALGOL 60.  The constructs serve as meta-commands andare motivated by equipment having multiprocessing capability. | Anderson, J. P.
1159 | Machine Independence: Its Technology and Economics | A survey is offered of techniques for transferringprograms, and especially compilers, from one computer to another.  Of the methods examined, the"bootstrap" technique is singled out for detailed discussion, with emphasis on its economics. The considerationsthat determine the applicability of bootstrapping in any specific case are discussed, and an attemptis made to assign appropriate qualitative weights to them.  Finally, reasons are given for believing that themachine-independence problem is being substantially diminished by current trends in computer design, andthat it is this process of convergence in hardware design rather than any foreseeable software developmentsthat will lead to its satisfactory resolution. | Halpern, M. I.
1160 | CAT: A 7090-3600 Computer-Aided Translation | A semi-automatic translation system has been implementedwhich converts 7090 FAP language programs into 3600 assembly language.  The input to the systemis a FAP program deck which has been specially prepared for translation by the user.  The output consistsof the translated COMPASS language program together with a comprehensive diagnostic listing which theuser must analyze in order to verify any questionable areas of the translation.  The translation processorconsists of three distinct phases: an assembly of the FAP program, a comprehensive analysis of the assembledcode with particular regard to the actions of instructions upon other instructions and upon data,and finally the output pass which generates the COMPASS program in the form of macro instructions. | Wilson, D. M. Moss, D. J.
1161 | 1401 Compatibility Feature on the IBM System/360 Model 30 | The "second generation" of stored-program computers,of which IBM 1400 series was a part, brought EDP into the mass market for the first time on a largescale.  As this era unfolded, rapid changes in technology led to rapid obsolescence of data processingequipment.  Program written for a particular system required tedious conversion as incompatible newmachines came into use.  The IBM System/360 has been designed with the conversion problem specificallyin mind.  One of the conversion aids available on the Model 30 is the 1401 compatibility feature.  Thisfeature, in conjunction with other aids, permits a smooth and inexpensive transition to optimum use of the new system. | McCormack, M. A.Schansman, T. T.Womack, K. K.
1162 | An Assembly Language for Reprogramming | Complete reprogramming of compiler language programsis seldom necessary.  It is assembly language programs which present the greatest difficulty.  Assemblylanguages generally provide a one-for-one translation from a symbolic to a numeric version of a program, thatis, from assembly language to machine language.  The meta-language presented here can be used to specifythe mapping of any language which conforms to a canonical list form into an arbitrary stream of bits. This bit stream may be treated as a machine language program, a character stream, or whatever elsethe user might desire.  Thus, this meta-language can be used to map from one assembly language into anotheror from the assembly language for one machine into the machine language of another. | Graham, M. L.Ingerman, P. Z.
1163 | Philco/IBM Translation at Problem-Oriented, Symbolic and Binary Levels | A translation system has been developed toeliminate most of the effort formerly required to reprogram Philco 2000 series codes for IBM 7094 operation. Experience with this system is limited but highly successful encouraging application of thetechniques to other source and object languages. | Olsen, T. M.
1164 | Emulation of Large Systems | The conversion problem and a new techniquecalled emulation are discussed.  The technique of emulation is developed and includes sections on both theCentral Processing Unit (CPU) and the Input/Output unit (I/O).  This general treatment is followed by threesections that describe in greater detail the implementation of compatibility features using the emulationtechniques for the IBM 7074, 7080 and 7090 systems on IBM System/360. | Tucker, S. G.
1165 | The Spectra 70/45 Emulator for the RCA 301 | The RCA 301 Emulator System is supplied withthe Spectra 70/45 as a reprogramming aid.  It allows an RCA 301 object program to be run on the Spectra70/45 without necessitating changes in the RCA 301 object code.  Execution rates are considerablybetter than traditional simulation.  The Emulator provides an increase in throughput capacity for the301 user on the Spectra 70/45.  The Emulator makes use of both hardware micro-program routines andsoftware routines to accomplish its function. | Benjamin, R. I.
1166 | A Use of Macros in Translation of SymbolicAssembly Language of One Computer to Another | A set of macro-operations has been preparedto assist in translating IBM 7090 symbolic assembly language programs to IBM 7040 machine language programs. This set, inserted at the beginning of the 7090 symbolic deck, treats incompatible instruction mnemonicsas macro-instructions to produce equivalent 7040 instruction sets.  Incompatible instructions arecategorized into basic operational classes which can be expressed by a single basic skeleton.  Several levelsof macro calls are required to supply arguments to the basic skeleton for each particular instruction. Modification at execution time of the address or tag of an incompatible instruction requires incorporationof an address-tag equivalent.  I/O is handled by generating calls to I/O simulation subroutines. | Dellert Jr., G. T.
1167 | On the Translation of Machine Language Programs | Automatic translation of machine languageprograms is becoming a highly desirable goal with the advent of new large-scale computers.  The pitfalls thatmake it difficult to achieve completely automatic translations are analyzed, and it is shown that these areprimarily of a semantic nature.  A semi-automatic procedure for resolving semantic problems is suggested. | Gaines, R. S.
1168 | Across Machine Lines in COBOL | The production of a large, file-maintenance-and-retrievalprogram system written in COBOL is described.  The COBOL language was used specifically toenable the system to operate on three IBM computers. | Fredericks, D. S.Warburtin, C. R.
1169 | An Algorithm for Minimizing Backboard Wiring Functions | A partially exhaustive algorithm is presentedfor solving the following problem arising from automatic layout of a computer.  Given an ordered setE1, E2,..., EN of N computer components, for each permutation of the elements E1, E2.., EN, there is attacheda value of an integer function F.  The algorithm finds a local minimum of F by evaluating the set {DeltaF} of the increments corresponding to a certain set of exchanges of two elements.Then the exchangecorresponding to the least negative increment of {Delta F} is performed.  The process is iterated and stoppedwhen the set of the increments is a positive or empty set, which, it is proved, corresponds to aminimum.  The procedure is similar to the Downhill Method for finding the minimum of a real function F(P),and can be applied to other placement problems.  Experimental results are presented with backboards formedby many elements and different initial placements. | Pomentale, T.
1170 | Analyzing English Syntax with a Pattern-Learning Parser | A dependency analysis system based on patternrecognition and learning logic was developed to infer word classes and rules of syntactic combinationfrom experience with text which had been analyzed.  The characteristics used to form word classes are thedepth in the dependency tree of each word, the direction of its governor and the same features foreach of its immediate neighbors. Syntactic rules of combination show the relation of a word to its governorin the depth pattern of the sentence.  The system was tested on 400 elementary basic English sentencesincluding 300 used earlier by Knowlton in a different learning parser of all 400 sentences.  Afterexperience with 300 sentences it was able to generalize with 77 percent accuracy to the next 100. In accumulative learning trials after the first 200 sentences it averaged a probability of .9 for accuratelyparsing each new sentence it encountered.  It was concluded that the system is adequate for learningto parse the bulk of basic English but that further development is required before conclusions aboutits application to ordinary English can be stored.  The system is operational and available onthe ARPA/SDC time-shared computing system. | McConlogue, K.Simmons, R. F.
1171 | A Comparison of the Primal-Simplex and Primal-DualAlgorithms for Linear Programming | A statistical comparison of the primal-dualand the more commonly used primal-simplex algorithm for solving linear programming problems has been made underthe assumption of starting with a full artificial basis.  Under these conditions the primal-dual methodshows a statistically significant superiority on randomly generated problems.  It has also been found, viaa regression analysis, that the relevant parameters in determining the difference in the number of iterationsbetween the algorithms is not only the number of constraints and the number of variables butalso the ratio of the latter to the former. | Mueller, R. K.Cooper, L.
1172 | Conversion of Limited-Entry Decision Tables to Computer Programs | Decision tables are useful for describing aset of complex decision rules based on given sets of conditions.  Algorithms that can efficiently convertthe tables into computer programs will extend the usefulness of decision tables to computer users. Two such algorithms, based on work done by M. S. Montalbano, are described and extended here to handledashes and ELSE-decision rules.  The first algorithm minimizes the computer storage space required for theresultant program, the second minimizes computer running time. During the conversion process, both pinpointany contradictions or redundancies among the rules in a table. | Pollack, S. L.
1173 | The Performance of a System for Automatic Segmentationof Programs Within an ALGOL Compiler (GIER ALGOL) | The GIER ALGOL compiler makes use of an automaticsystem for handling the transfers of program segments from the drum store to the core store at programexecution time.  The logic of this system is described. The performance of the system is discussed,primarily on the basis of execution times related to two specific programs.  This discussion concludes withan assessment of the potential gains of various ways of improving the system. | Naur, P.
1174 | Inverse Permutation (Algorithm 250 [G6]) | Medlock, C. W.
1175 | Quickersort (Algorithm 271 [M1]) | Scowen, R. S.
1176 | Finding Eigenvectors by Gaussian Elimination (Algorithm 270 [F2]) | Newhouse, A.
1177 | Determinant Evaluation (Algorithm 269 [F3]) | Pfann, J.
1178 | ALGOL 60 Reference Language Editor (Algorithm 268 [R2]) | McKeeman, W. M.
1179 | PUFFT-The Purdue University Fast FORTRAN Translator | A core resident, compile-and-go system designedfor the IBM 7090/7094 computer is described.  In little more than half of the 32k word core memoryPUFFT provides a monitor for job sequencing, a translator for the full FORTRAN IV language, the FORTRANsubroutine library, an input--output system for use at compile time and at execute time, and a ratherelaborate diagnostic message writing routine.  Batches of small- and medium-sized FORTRAN IV sourcelanguage programs are processed at very high speeds.  Language compatibility has been maintained so thatprograms may be debugged in the PUFFT system and then recompiled and run in the IBJOB-IBFTC system supplied by the manufacturer. | Rosen, S.Spurgeon, A.Donnelly, J. K.
1180 | AXLE: An Axiomatic Language for String Transformations | AXLE is a language designed for data manipulation. Data arranged in a linear form in a workspace is transformed according to a table of axioms, called imperatives. A transformation consists of a matching procedure, which decides where an imperative is applicable,and a replacement procedure that modifies that part of the workspace.  Imperatives are appliedin accordance with definitions of symbolic terms, presented systematically in an assertion table.  Theprocess of definition includes the special case of recursive assertions.  Several complete programsof imperatives are given to show a few applicationsof the language. | Cohen, I.Wegstein, J. H.
1181 | A Simple Data Transmission System Using the Office Telephone | A method has evolved for transmitting data ofa type originating in many laboratory situation direct to a central computer.  The method requires almostno specialized equipment and uses any ordinary telephone on a "callup" basis.  Present applicationsinclude cardiac-output calculations, radio-activity tracer studies and neurophysiology time-sequence studies of nerve impulses. | Neilsen, I. R.
1182 | Contextual Correlates of Synonymy | Experimental corroboration was obtained forthe hypothesis that the proportion of words common to the contexts of word A and to the contexts of wordB is a function of the degree to which A and B are similar in meaning.  The shapes of the functions,however, indicate that similarity of context is reliable as criterion only for detecting pairsof words that are very similar in meaning. | Rubenstein, H.Goodenough, J. B.
1183 | A Note on the Use of a Digital Computerfor Doing Tedious Algebra and Programming | A special purpose compiler was written withFORTRAN II language and made possible the writing of very long programs by the computer.  The procedure isbased on a straight-forward use of FORMAT statements for generating machine-written programs. | Veronis, G.
1184 | A Fast Storage Allocator | A fast storage bookkeeping method is describedwhich is particularly appropriate for list-structure operations and other situations involving many sizesof blocks that are fixed in size and location.   This scheme, used in the LLLLLL or L6 (Bell Telephone LaboratoriesLow-Level List Language), makes available blocks of computer registers in several different sizes:the smaller blocks are obtained by successively splitting larger ones in half, and the larger blocks are reconstitutedif and when their parts are simultaneously free. | Knowlton, K.C.
1185 | A program to Solve the Pentomino Problem by the Recursive Use of Macros | A coding technique is described in which certainmacro-instructions are given lists as arguments and are thereby used recursively.  The discussion coversprimarily an example in which the technique is used to solve the pentomino problem-the problem offitting 12 pentominos without overlapping into a plane area formed of 60 elemental squares. | Fletcher, J. G.
1186 | Recursive Solution of a Class Of Combinatorial Problems: An Example | Combinatorial problems requiring the selectionof n elements from a set of m elements may be solved by a recursion process analogous to that forcomputing binomial coefficients.  Several specific problems are analyzed, the general technique is exposed,and an ALGOL program is developed for one of the problems. | Lynch,W. C.
1187 | Note on an ASCII-Octal Code Table (Standards) | Crosby, W. S.
1188 | An ALGOL-like Computer Design Language | The idea of constructing a computer designlanguage by making use of an ALGOL-like programming language is presented.  A computer designer can benefitfrom using a design language at a higher level just as a computer user can benefit from a higher levelprogramming language.  The purposes and requirements of the design language are enumerated.  To achieve mostof the purposes a translator is required to translate a design of computer logic into a set of Boolean equations. The design language is presented in terms of vocabulary, statements, sequences and microprogram. Included are examples of identifiers, expressions with both unary and binary operators, declaration statements,transfer statements, terminal statements, exchange statements, if statements, do statements, goto statements, several sequences and a microprogram. | Chu, Y.
1189 | Random Normal Deviate (Algorithm 267 [G5]) | Pike, M. C.
1190 | Pseudo-Random Numbers (Algorithm 266 [G5]) | Pike, M. C.Hill, I. D.
1191 | Find Precedence Functions (Algorithm 265 [L2]) | Wirth, N.
1192 | Interpolation in a Table (Algorithm 264 [E1]) | Stafford, J.
1193 | Gomory 1 (Algorithm 263 [H]) | Langmaack, H.
1194 | Establishment of the ACM Repository and Principlesof the IR System Applied to its Operation | The history of the establishment of the ACM Repositoryat the Moore School, University of Pennsylvania, is reviewed briefly.  Two principles are presented asparamount in the provision of information services: (1) easy accessibility to the information files by usersunfamiliar with file organization, and (2) value of service exceeding user costs.  These principles serveas guides in mechanizing the ACM Repository.  The main features of the information system are directuser access via on-line teletypewriter console, direct user access to all details of the system organization,unrestricted and expandable search vocabulary, user access through many facets of document indexing,and stochastic search through linked index terms and other file relationships.  The first contributionto the ACM Repository consisted of 315 documents, relating primarily to early research on compilers.  Thesedocuments have been cataloged and indexed and the catalog is scheduled to appear in Computing Reviews. The indexing system is described in detail.  The Main Catalog is used to describe the documents,and inverted lists are provided by the Repository system for retrieval by concept coordination. | Rubinoff, M.White Jr., J. F.
1195 | UPLIFTS-University of Pittsburgh Linear File Tandem System | A series of computer programs has been developedand is now operational for processing the National Aeronautics and Space Administration linear filesystem on an IBM 1401-7090 combined data processing system.  The program are note-worthy in that they createfixed length logical records and fixed length blocks from variable length source data, and formatthe output for optimization of processing on the IBM 7090 system.  The programs are completely self-checkingand test for both validity and accuracy of the input materials as provided by the NationalAeronautics and Space Administration. | Canter, J. D.Donaghey, C. E.
1196 | Applications of Differential Equations in General Problem Solving | A large class of problems leading to digitalcomputer processing can be formulated in terms of the numerical solution of systems of ordinary differentialequations.  Powerful methods are in existence for the solution of such systems.  A good general purposeroutine for the solution of such systems furnishes a powerful tool for processing many problems.  This istrue from the point of view of ease of programming, ease of debugging, and minimization of computer time. A number of examples are discussed in detail. | Klopfenstein, R. W.
1197 | Finding Zeros of a Polynomial by the Q-D Algorithm | A method which finds simultaneously all the zerosof a polynomial, developed by H. Rutishauser, has been tested on a number of polynomials with realcoefficients.  This slowly converging method (the Quotient-Difference (Q-D) algorithm) provides startingvalues for a Newton or a Bairstow algorithm for more rapid convergence.  Necessary and sufficient conditionsfor the existence of the Q-D scheme are not completely known; however, failure may occur whenzeros have equal, or nearly equal magnitudes.  Success was achieved, in most of the cases tried, withthe failures usually traceable to the equal magnitude difficulty.  In some cases, computer roundoff may resultin errors which spoil the scheme.  Even if the Q-D algorithm does not give all the zeros,it will usually find a majority of them. | Henrich, P.Watkins, B. O.
1198 | Solution of a Problem in Concurrent Programming Control | A number of mainly independent sequential-cyclicprocesses with restricted means of communication with each other can be made in such a way that at anymoment one and only one of them is engaged in the "critical section" of its cycle. | Dijkstra, E. W.
1199 | A Computer Center Simulation Project | Today's computation centers are based on rapidlychanging technologies of hardware and software systems.  It is difficult, therefore, to base decisionson experience; in most instances, the benefits of comparable experience for a given problem situationare not available.  In this paper, a mathematical model of the Lockheed Central Computer Center is formulatedthat describes the operation of a computation center in terms of information nets, decision processes,and control functions.  Experiments performed with this model, the results of the experiments,and the application of the results are discussed. | Hutchinson, G. K.
1200 | On Reversible Subroutines and Computers that Run Backwards | A computer design is describe which permitssubroutines to be executed backward as well as forward, either with their instructions unchanged orreplaced with conjugate instructions.  It is shown that using this concept a number of new subroutine typescan be developed with rather unusual properties.  Since these properties are analogous to certain matrixoperations, a parallel nomenclature is suggested for their classification. | Reily, E. D.Federighi, F. D.
1201 | Generation of Permutations in Lexico-GraphicalOrder (Algorithm 202 [G6]) | Elliott, R. W.
1202 | Normal Random (Algorithm 200 [G5]) | Pike, M. C.
1203 | Normdey (Algorithm 121 [G5]) | Pike, M. C.
1204 | Character Structure and Character Parity Sense forSerial-by-Bit Data Communication in the American Standard Code for Information Interchange (Proposed American Standard)
1205 | An Undergraduate Program in Computer Science-Preliminary Recommendations | A Report from the ACM Curriculum Committee on Computer Science
1206 | The Self-Judgment Method of Curve Fitting | A computer-oriented method for processing andcommunicating numerical data is described.  The Instrument Reliability Factors (IRF), which exactlydefine the limits of reliability of each measured item of information, are used to compute the MaximumPermitted Error (MPE) associated with each values of each ordinate.  The Self-Judgment Principle (SJP)is used to discard wrong information and to compute mean values of the parameters and their MPE's in termsof the IRF.  Data compatibility tests with any number of different equations can be made quickly. Otherwise intractable problems are easily solved, and the design of many experiments is greatly simplified. The computational and mathematical techniques used to reduce bias in the SJP are discussed.  Inadequaciesin the statistical and graphical methods of curve fitting are noted. | DeMaine, P. A. D.
1207 | Remarks on Simulation of Boolean Functions | Dodd, G. G.
1208 | Simulation of Computer Logic by Fortran Arithmetic | Weingarten, F. W.
1209 | Negative and Zero Subscripts in Fortran II Programming for the IBM 1620 | Garber, M. S.
1210 | File-Handling Within FORTRAN | This note describes some FORTRAN subroutinesto facilitate handling of tape files.  They allow symbolic naming of information files, without violatingthe casual scientific programmer's idea of simplicity.  Some comments on two years use of these subroutines are given. | Harrison, M. C.
1211 | A Note on Storage of Strings | A method for storing strings is described whichuses blocks of indefinite size, and is therefore completely dynamic.  Its relation to similar schemes is discussed. | Berztiss, A. T.
1212 | Non-linear Extrapolation and Two-Point Boundary Value Problems | It is suggested that the convergence propertiesof the usual Picard successive approximation scheme may be improved through use of non-linrar extrapolationtechniques.  A numerical example is provided. | Bellman, R.Kagiada, H.Kalba, R.
1213 | Dynamic Format Specifications | The use and implementation of two new FORTRANformat conversions are discussed.  These format types give the FORTRAN programmer control of input/outputspecifications at execution time. | Ranelletti, J. E.
1214 | Some Experiments in Algebraic Manipulation by Computer  | A set of subroutines to allow algebraic manipulationson the IBM 7094 computer has been written a List Processor, SLIP.  A series of four problems of increasingdifficulty were solved using these routines. | Lapidus, A.Goldstein, M.
1215 | Some Techniques Used in the ALCOR ILLINOIS 7090 | An ALGOL compiler has been written by theALCOR group for the IBM 7090.  Some little known but significant techniques in compiler writing, togetherwith organizational details of this compiler, are described.  Timing estimates and an indicationof compiler requirements are also given. | Gries, D.Paul, M.Wiehle, H. R.
1216 | Symbolic Derivatives Without List Processing, Subroutines, or Recursion | A routine has been developed which computes andprints out the symbolic derivative of an absolutely continuous elementary function of one or several variables. No use is made of list-processing languages.  The chain rule is applied and the result is edited toproduce results as elegant and efficient as those obtained by hand computation.  A subset may be imbededin a formula translator to introduce a differentiation operator into an "algebraic" programming language. | Smith, P. J.
1217 | Map of Partitions into Integers (Algorithm 264 [A1]) | McKay, J. K. S.
1218 | Partition Generator (Algorithm 263 [A1]) | McKay, J. K. S.
1219 | Number of Restricted Partitions of N (Algorithm 262 [A1]) | McKay,J. K. S.
1220 | 9-J Symbols (Algorithm 261 [Z]) | Gunn, J. H.
1221 | 6-J Symbols (Algorithm 260 [Z]) | Gunn, J. H.
1222 | Legendre Functions for Arguments Larger Than One (Algorithm 259 [S16]) | Gautschi, W.
1223 | High Speed Compilation of Efficient Object Code | A three-pass compiler with the following propertiesis briefly described:  The last two passes scan an intermediate language produced by the precedingpass in essentially the reverse of the order in which it was generated, so that the first pass is theonly one which hasto read the bulky problem-oriented input.  The double scan, one in either direction, performedby the first two passes, allows the compiler to remove locally constant expressions and recursivelycalculable expressions from loops and to do the important part of common subexpression recognition. Optimization such as the effective use of index registers, although as important, is not discussed sincethe object code which would be most efficient is highly machine dependent.  The discussion is in termsof a FORTRAN-like language, although the technique is applicable to most algebraic languages. | Gear, C. W.
1224 | Determining a Computing Center Environment | An investigation is described in which severalgenerally unavailable parameters descriptive of a computing center environment are obtained.  Theactual data collection and reduction is described, and the results of one month of this collection are tabulated and summarized. | Rosin, R. F.
1225 | The Predictive Analyzer and a Path Elimination Technique | Some of the characteristic features of a predictiveanalyzer, a system of syntactic analysis now operational at Harvard on and IBM 7094, are delineated. The advantages and disadvantages of the system are discussed in comparison to those of an immediateconstituent analyzer, developed at the RAND Corporation with Robinson's English grammar.  In addition,a new technique is described for repetitive path elimination for a predictive analyzer, which cannow claim efficiency both in processing time and core storage requirement. | Kuno, S.
1226 | The Organization of Structured Files | A data file is an integral part of a data processingsystem.  In many systems, the selection of an organization for the data within the file canbe critical to the system's operating efficiency.  This paper provides the systems designer with an informationsource which describes ten techniques that may be employed for organizing structured data.  Thecharacteristics of the organizations described are application independent, thus providing the designer witha reference which allows him to limit the number of file organizations he must consider for his system. | Dzubak, B. J.Warburton, C. R.
1227 | Transport (Algorithm 258 [H]) | Bayer, G.
1228 | Treesort 3 (Algorithm 245 [M1]) | Abrams, P. S.
1229 | Random Permutation (Algorithm 235 [G6]) | Pike, M. C.
1230 | Method for Hyphenating at the End of a Printed Line | A description of a method of hyphenation ispresented as a result of application of several general rules.  The character sets considered by theroutine and the method are briefly outlined. | Rich, R. P.Stone, A. G.
1231 | Peephole Optimization | Redundant instructions may be discarded duringthe final stage of compilation by using a simple optimizing technique called peephole optimization.The method is described and examplesare given. | McKeeman, W. M.
1232 | Representation of the Standard ECMA 7-BitCode in Punched Cards (ECMA Standard)
1233 | Conventions for the Use of Symbols in the Preparationof Flowcharts for Information Processing Systems (A Standard Working Paper) | This paper is intended as an outline of thevarious conventions which are being considered for the use of flowcharts for information processingsystems.  The conventions are applied to the use of the symbols appearing in the proposed American StandardFlowchart Symbols and not with the symbols per se.
1234 | The Structure of Yet Another ALGOL Compiler | A high-speed "top down" method of syntax analysiswhich completely eliminates "back-up" of the source string has been implemented in a convenientmacro-language.  A technique of  simulation at compile time of the use of a conventional run-time stackenables the generation of code for expressions which minimizes stores, fetches and stack-pointer motionat run time, while properly trating recursion and side effects of procedures.  Block structure andrecursion are handled without need for interpretive methods at run times.  The "context problem" in the transmissionto recursive procedures of parameters "called by name" is solved in a manner which permits thehandling of the common cases of simple expressions and array identifiers with particular efficiency. | Kanner, H.Kosinski, P.Robinson, C. L.
1235 | A Stochastic Approach to the Grammatical Coding of English | A computer program is described which willassign each word in an English text to its form class or part of speech.  The program operates at relativelyhigh speed in only a limited storage space.  About half of the word-events in a corpus are identifiedthrough the use of a small dictionary of function words and frequently occurring lexical words.  Some suffixtests and logical-decision rules are employed to code additional words.  Finally, the remaining wordsare assigned to one class or another on the basis of the most probable form classes to occur within the alreadyidentified contexts.  The conditional probabilities used as a basis for this coding were empirically derivedfrom a separate hand-coded corpus.On preliminary trials, the accuracy of the coder was 91% to 93%, withobvious ways of improving the algorithm being suggested by an analysis of the results. | Stolz, W. S.Tannenbaum, H.Carstensen, F. V.
1236 | The SMART Automatic Document Retrieval System-An Illustration | A fully automatic document retrieval systemoperating on the IBM 7094 is described.  The system is characterized by the fact that several hundred differentmethods are available to analyze documents and search requests.  This feature is used in the retrievalprocess by leaving the exact sequence of operations initially unspecified, and adapting thesearch strategy to the needs of individual users.  The system is used not only to simulate an actual operatingenvironment, but also to test the effectiveness of the various available processing methods.  Results obtainedso far seem to indicate that some combination of analysis procedures can in general be relied upon toretrieve the wanted information.  A typical search request is used as an example in the present report to illustratesystems operations and evaluation procedures. | Salton, G.Lesk, M. E.
1237 | Conversion of Decision Tables To Computer Programs | Several translation procedures for the conversionof decision tables to programs are presented and then evaluated in terms of storage requirements,execution time and compile time.  The procedures are valuable as hand-coding guides or as algorithms fora compiler.  Both limited-entry and extended-entry tables are analyzed.  In addition to table analysis,the nature of table-oriented programming languages and features is discussed.  It is presumed that the readeris familiar with the nature of decision tables and conventional definitions. | Press, L. I.
1238 | A Technique for Integrated Reports from a Multi-run System | The requirements of a requisition accountingsystem for the San Francisco Overseas Supply Agency (OSA) included exception reporting to OSA itself.  The simultaneoussatisfaction of the reporting requirement and the accounting requirements posed definite problemsin system design, particularly the handling of the reporting function.  A practical and satisfactorysolution was developed by expanding the basic system with two tailored service runs for report production. These two runs permitted a final system that was easier to debug, easy to maintain, efficient in productionand responsive to the changing requirementsof OSA. | Budea, N.Kamena, J. G.Kamena, R. M.
1239 | Graycode (Algorithm 246 [Z]) | Allen, W. D.
1240 | Transport (Algorithm 258 [H]) | Bayer, G.
1241 | Havie Integrator (Algorithm 257 [D1]) | Kubik, R. N.
1242 | Modified Graeffe Method (Algorithm 256 [C2]) | Grau, A. A.
1243 | Testing the Understanding of the Difference BetweenCall by Name and Call by Value in ALGOL 60 | Weil, R. L.
1244 | Bit Manipulation in Fortran Language | Tobey, G. D.
1245 | A Fortran n-Ary Counter | Kent, W.
1246 | Deeply Nested Iterations  | Korphage, R. R.
1247 | An Operating Environment for Dynamic-RecursiveComputer Programming Systems | Presented in this paper is a brief nontechnicalintroduction to OEDIPUS, a computer programming system which can serve as an operating environment fordynamic and/or recursive programs and programming systems.  The available services include dynamic allocationof storage for contiguous blocks of arbitrary size, input and output for a hierarchy of data types,a public pushdown list for automatic recursive programming, a rudimentary compiler for subroutinecommunication and bookkeeping, and debugging aids. | Brown, W. S.
1248 | On the Automatic Simplification of Computer Programs | Presented in this paper is the problem of writinga program which would examine any other program and perform such simplifications on it as can be detectedfrom the argument-program's form alone, without having any knowledge of what it is supposed to do. | Nievergelt, J.
1249 |  Recorded Magnetic Tape for Information Interchange(200 CPI, NRZI) (On the Revised Proposed American Standard)
1250 | Graphic Symbols for Problem Definitionand Analysis-A Standards Working Paper
1251 | American Standard and IFIP/ICC Vocabularies compared | The "Proposed American Standard Vocabulary ofInformation Processing" and the "IFIP/ICC Vocabulary of Terms Used in Information Processing" are analyzed and compared. | Traub, J. F.
1252 | Symbolic Notations for Statistical Tablesand an Approach Towards Automatic System Design | The preparation of statistical tables is animportant function of the data processing systems of some organizations, and a symbolic notation for thedescription of tables has been shown to be a useful aid to documentation.  Such a notation also providesthe first step towards making automatic a tedious and time-consuming part of system design and programmingin many computer applications.  One notation is described and suggestions are made for the implementation of the larger goal. | Smith, B. W.
1253 | QUIKSCRIPT-A SIMSCRIPT- Like Language for the G-20 | QUIKSCRIPT is a simulation language based onSIMSCRIPT and programmed entirely in an algebraic language, 20-GATE.  The QUIKSCRIPT language, its internalimplementation, and major differences between QUIKSCRIPT and SIMSCRIPT are presented.  This paper isnot a programming guide to the language, but rather an attempt to present its flavor.  A brief description ofSIMSCRIPT is included, as is a sufficient description of 20-GATE to render this material understandableto the reader familiar with algebraic languages. | Tonge, F. M.Keller, P.Newell, A.
1254 | The Iteration Element | A recent addition to the MAD language has madethe iteration structure of the MAD THROUGH statement (corresponding to the ALGOL for statement and the FORTRANDO statement) available within expressions. | Galler, B. A.Fischer, M. J.
1255 | A Method of Data List Processing With Application to EEG Analysis | A set of subroutines is discussed, which isdesigned to aid in the programming of computations on indexed lists of numbers using machine languageor a symbolic assembly system.  The most commonly performed list operations are outlined, and logicallyarranged into five groups.  As an example, the computation of power spectral density from the autocovariancefunction is discussed for a class of EEG signals. | Philpott, C. M.Lago, G. V.
1256 | Dynamic Variable Formatting | King, D. R.
1257 | DEBUG-An Extension to Current On-Line Debugging Techniques | A method of on-linr assembly-language debuggingwhich greatly simplifies several of the bookkeeping tasks characteristically associated with that processhas been developed and implemented in a program for the UNIVAC M-460 computer at Air Force Cambridge ResearchLaboratories.  With this program, an online user may insert or delete (in symbolic assembly language)any number of lines at any point of his previously assembled program in core, with the remainderof the program being relocated appropriately. | Evans, T. G.Darley, D. L.
1258 | An Extended Arithmetic Package | In many fields, for example algebraic numbertheory, arithmetic must be carried out to a degree of precision which exceeds the normal hardware capacityof most machines.  In such cases, an extended arithmetic package provides a comprehensive and easy-to-useway of performing such arithmetic.  Such a package was coded for the IBM 7090.  In discussingthe general problems associated with the design of an extended arithmetic package, specific reference is made to this program. | Blum, B. I.
1259 | Applications of Binary Numbers In Computer Routines | A binary number can be thought of as an alternateform of expression for either a set of letters or a decimal number.  There are then three equivalentexpressions, easily translatable to one another, each having different characteristics.  Four examplesare given in which the form of an expression is changed to an equivalent expression to save space or gain power. | Weldon, R. J.Baker, R. L.
1260 | Least-Squares Analysis of Resonance Spectra on Small Computers | The problem of analyzing data from a Mossbauereffect experiment is discussed.  By using the cut step procedure for convergence and by imposing physicalconstraints on the functional form of the calculation it is possible to make the analysis on asmall computer.  The analysis has been carried out on an IBM 1410 computer with a 40,000 BCD core memory. | Marshall, S. W.Nelson, J. A.Wilenzick, R. M.
1261 | Modeling and Simulation of Digital Networks | The simulation of digital networks on a digitalcomputer provides the engineer with an effective means of analyzing time-quantized logical behavior.  Thedigital network is modeled as a set of time-dependent or time-independent Boolean transformations; each transformationdescribing the input-output relationship of a model element comprising the network mode.  Thesimplicity of utilizing the FORTRAN IV Programming System as a digital Network Simulator is discussed anillustrated.  This simplicity is derived from a common modeling technique applicable to combinationaland sequential digital networks and a systematic programming approach. | Larsen, R. P.Mano, M. M.
1262 | Procedure-Oriented Language Statements to Facilitate Parallel Processing | Two statements are suggested which allow a programmerwriting in a procedure-oriented language to indicate sections of program which are to be executedin parallel.  The statements are DO TOGETHER and HOLD.  These serve partly as brackets in establishinga range of parallel operation and partly to define each parallel path within this range.  DO TOGETHERsmay be nested.  The statements should be particularly effective for use with computing devices capable ofattaining some degree of compute-compute overlap. | Opler, A.
1263 | Metalanguage and Syntax Specification | Two metalanguages are described, one sufficientfor the table specification of the ALGOL syntax, the other with additional metaoperators adequate and usedfor the formal table description of Basic FORTRAN. | Burkhardt, W. H.
1264 | BLNSYS-A 1401 Operating System with Braille Capabilities | BLNSYS is an operating system designed fora 4K 1401 with common optional features and two attached tape drives.  Printed output of this systemor of executing programs may be in either English or braille.  Even though this system was written fora small machine with minimal peripheral equipment, jobs may be batched, so that card handling and lostprocessing time is at a minimum.  This system will perform any or all of the following users specifiedfunctions: assemble SPS source decks, post list, produce condensed or uncondensed object decks, executeuser's program, list card input to a program, list punched output, provide a storage dump, executea program submitted for execution as an uncondensed object deck under debugging trace control, card-to-brailleconversion, brailled listings of 7040 IBSYS batch output, and update or duplicate the system tapeitself.  Input-ouput subroutines are also included in the system. | Landwehr, J. B.McLaughlin, C.Mueller, H.Lichstein, M.Pollack, S. V.
1265 | On the Relative Efficiencies of Context-Free Grammar Recognizers | A number of diverse recognition proceduresthat have been proposed for parsing sentences with respect to a context-free grammar are described in thispaper by means of a common device.  Each procedure is defined by giving an algorithm for obtaining a nondeterministicTuring Machine recognizer that is equivalent to a given context-free grammar.  The formalizationof the Turing Machine has been chosen to make possible particularly simple description ofthe parsing procedures considered.  An attempt has been made to compare recognition efficiencies for theprocedures defined.  For a few simple grammars and sentences a formal comparison has been made.  Empiricalcomparison of the recognition of more realistic programming languages such as LISP and ALGOL has beenmade by means of a program which simulates the Turing Machine on the Univac M-460 computer.  Severalalgorithms for producing grammars equivalent to a given context-free grammar have been considered, andthe increase in recognition efficiency they afford has been empirically investigated. | Griffiths, T. V.Petrick, S. R.
1266 | Considerations Relating to Purpose of FORTRAN Standardization(Appendixes to ASA FORTRAN Standard)
1267 | Performance of Systems Used for Data TransmissionTransfer Rate of Information Bits -An ASA Tutorial Standard | Information thruput as a characteristic ofsystems performance is discussed.  This discussion includes the pertinent aspects of information transfer,of determination of transfer rate of information bits (TRIB), of residual errors, and of standard measurementconditions.  The paper also presents an orderly arrangement of characteristics and parametersthat affect information thruput, and some examples on procedures for determining a thruput rate in terms ofTRIB.  It concludes that a performance characteristic involving information rate can best be expressed as theTRIB in conjunction with the Residual Error Rate.
1268 | Logarithm of a Complex Number (Algorithm 243 [B3]) | Boothroyd, J.
1269 | Computation of Fourier Coefficients (Algorithm [C6]) | Teijelo, L.
1270 | On ALGOL Education: Automatic Grading Programs | Two ALGOL grader programs are presented forthe computer evaluation of student ALGOL programs. One is for a beginner's program; it furnishes random dataand checks answers. The other provides a searching test of the reliability and efficiency of an integrationprocedure.  There is a statement of the essential properties of a computer system, in order thatgrader programs can be effectively used. | Forsythe, G. E.Wirth, N.
1271 | Secondary Key Retrieval Using an IBM 7090-1301 System | The secondary key retrieval method involvesthe preparation of secondary storage lists from primary data records. Search requests are satisfied bylogical operations on appropriate lists, producing a complete set of addresses of primary records relevantto the request.  Experimental results are presented and a comparative analysis is given. | Davis, D. R.Lin, A. D.
1272 | Expanding the Editing Function In Language Data Processing | In automatic abstracting, citation indexing,mechanical translation and other such procedures, editing is required whenever the automatic method leavessomething to be desired.  This paper discusses the economy of editing as a function of the amount of condensationof text in language processing operations, and then contends that editing can be regarded as anopportunity rather than as an unwelcome necessity.  "Heavy editing," which goes beyond mere correctionand improvement of computer output, is exemplified by the use of a concordance in preparing a survey articleor lecture.  Other opportunities for heavy editing are described, chief among them being interpretation andexpansion of computer output in such processes as factor analysis.  Applications are described,such processes as factor analysis.  Applications are described, such as the quick, unbiased evaluationof a large volume of incoming mail or telegrams, yielding summary reports not possible for eitherhumans or computers to produce alone. | Doule, L. B.
1273 | Remark on Romberg Quadrature | A modified form of Romberg quadrature is described,which is less sensitive to the accumulation of rounding errors than the customary one. | Krasun, A. M.Prager, W.
1274 | On the Numerical Solution of an N-Point BoundaryValue Problem for Linear Ordinary Differential Equations | A method for the numerical solution of then-pointboundary value problem for homogeneous linear ordinary differential equations is developed.  Themethod requires two Runge-Kutta integrations over the interval under consideration and the solution ofa linear system of equations with n-1 unknowns. | Day, J. T.
1275 | Code Structures for Protection and Manipulationof Variable Length Items (Corrigendum) | Ramamoorthy, C. V.
1276 | Still Another Use for FORTRAN II Chaining
1277 | The Use of Cobol Subroutines in Fortran Main Programs | Tajiri, K.
1278 | Wengert's Numerical Method for Partial Derivatives,Orbit Determination and Quasilinearization | In a recent article in the Communicationsof the ACM, R. Wengert suggested a technique for machine evaluation of the partial derivatives of a functiongiven in analytical form.  In solving non-linear boundary-value problems using quasilinearization manypartial derivatives must be formed analytically and then evaluated numerically.  Wengert's method appearsvery attractive from the programming viewpoint equations which might not otherwise be undertaken. | Bellman, R. E.Kagiwada, H.Kalaba, R. E.
1279 | Use of a Conditional Base Number System forEncoding Sequences of Correlated Characters | A procedure is described for the relativelyefficient encoding of sequences of characters which have predecessor-successor selection rules.  The procedureis shown to assign a unique integer to each sequence and to generate a reasonably compact set of values. | Brown, R. M.
1280 | Numerical Integration of a Differential-DifferenceEquation with a Decreasing Time-Lag | Systems in which variable time-lags are presentare of common occurrence in biology.  Variable flow rates are a common cause of these variable lags. At present no extensive body of knowledge exists concerning the effects which these variable lags cancause.  Shown here is a method of reducing some differential-difference equations to ordinary differentialequations which can then be studied numerically with ease.  Subsequent study will deal with situationsin which multiple-lags and lags dependent on the solution itself are present. | Bellman, R. E.Buell, J. D.Kalaba, R. E.
1281 | Data Input by Question and Answer | A data input scheme for a time-sharing computeris described in this paper.  Instead of usingformat statements to determine the input, the computerasks the user for the required values one at a time.  The computer converses with the user during theinput process, checks for errors, provides standard data, and allows editing of values input. | Pyle, I. C.
1282 | The Use of FORTRAN in Subroutines with COBOL Main Programs | By using the proper COBOL coding techniques andaccounting for differences in storage allocation and library routines between the two languages, it ispossible to write FORTRAN IV subroutines that may be called from COBOL main programs.  Such a techniqueenables the programmer to take advantage of the most useful properties of each language whileminimizing their respective disadvantages. | Shavell, Z. A.
1283 | Matrix Inversion (Algorithm 231 [F1]) | Ferring, M.
1284 | Bessel Function for a Set of Integer Orders | Stafford, J.
1285 | Eigenvalues and Eigenvectors of a Real SymmetricMatrix by the QR Method (Algorithm 254 [F2]) | Businger, P. A.
1286 | Eigenvalues of a Real Symmetric Matrixby the QR Method (Algorithm 253 [F2]) | Businger, P. A.
1287 | Vector Coupling or Clebsch-Gordan Coefficients (Algorithm 252 [Z]) | Gunn, J. H.
1288 | CLP-The Cornell List Processor | Presented in this paper are the highlights ofCLP, a teaching language which has been employed at Cornell University and was constructed to serve as a meansof introducing simulation and other list-processing concepts.  The various advantages of CLP are discussed and examples are given. | Conway, R. W.Delfausse, J. J.Maxwell, W. L.Walker, W. E.
1289 | Proposed Revised American Standard Code for Information Interchange
1290 | Transparent-Mode Control Procedures for DataCommunication, Using the American Standard Code for Information Interchange -A Tutorial | This paper gives the considerations of TaskGroup X3.3.4 in the area of transparent-mode data communication control philosophy.  The appearance of thispaper was forecast (underthe name of "second-level control") in the earlier tutorial paper, "Control Proceduresfor Data Communications," Task Group document X3.3.4.44, dated May 1964.  The present paper elaboratesupon solutions to the problems of transparency to the basic ASCII communication control charactersas outlined in the previous paper mentioned above.  Moreover, it goes on to cover the additional control problemsof handling material such as off line encrypted data or non-ASCII codes by means of systems providingcomplete character transparency.  It does not cover concepts of transparency in which the normal characterstructure or modulation rate of a system may be abandoned.  In conjunction with the earlier tutorialpaper, this paper is expected to lead to a proposal for stand ardizationof data communication control proceduresusing the American Stand ard Code for Information Interchange.
1291 | Tabular Input of Data  | George, R.
1292 | On a Divide-and-Correct Method For Variable Precision Division | Described in this paper is a divide-and-correctmethod for variable precision division in digital computers.  Unlike the earlier methods of Stein andPope, the present method uses a suitably rounded form of the normalized divisor for getting an estimateof the quotient characters.  This results in a correction of at most plus or minus one to the estimate,to obtain the exact quotient character.  It is believed that this method will be widely applicablefor division operations in variable word-length character-oriented machines. | Krishnamurthy, E. V.
1293 | Method is Randomness  | Certain nonrandom properties of a commonly usedrandom number generator are described and analyzed. | Greenberger, M.
1294 | Note on Triple-Precision Floating-Point Arithmetic with 132-Bit Numbers | In a recent paper, Gregory and Raney describeda technique for double-precision floating-point arithmetic.  A similar technique can be developed fortriple-precision floating-point arithmetic and it is  the purpose of this note to describe this technique. Only the multiplication and the division algorithms are described, since the addition-subtractionalgorithm can be obtained by a trivial modification of the algorithm in Gregory's and Raney's paper. | Ikebe, Y.
1295 | PERT Time Calculations Without Topological Ordering | A simplified technique is presented for PERTTime calculations without topological ordering.  Each event is assigned a unique memory location.  An activityis represented by a link.  A link is defined as a memory location containing the address of anothermemory location.  The time information for an activity is carried with its link.  For a typical net,the majority of activities can be described by one 36-bit cell each.  The remainder use two 36-bitcells each.  The links are unidirectional; forward during the T(E) calculation (expected completion time foran activity);backward during the T(L) calculation (time latest allowable for completion of an activity). The calculations progress through the net topologically even though the net is not represented topologically in core. | Lass, S. E.
1296 | Ative (Algorithm 205 [E4]) | Wasscher, E. J.
1297 | Steep1 (Algorithm 203 [E4]) | Varah, J. M.
1298 | Adaptive Numerical Integration by Simpson's Rule (Algorithm 145 [D1]) | Pike, M. C.
1299 | Solutions of the Diophantine Equation (Algorithm 139 [A1]) | Bowlden, H. J.
1300 | Function Minimization (Algorithm 251[E4]) | Wells, M.
1301 | On ALGOL I/O Conventions | Zaremba, W. A.
1302 | Parallel Signaling Speeds for Data Transmission(Proposed American Stand ard)
1303 | A Correspondence Between ALGOL 60 and Church's Lambda-Notation: Part II* | Landin, P. J.
1304 | A Rapid Turnaround Multi-Programming System | In this paper, basic features, system characteristicsand the control algorithm for a multi-programming system with rapid turnaround time are described. | Irons, E. T.
1305 | The Internal Structure of the FORTRAN CEP Translator | The FORTRAN CEP translator converts a sourceprogram written in the FORTRAN CEP language into an object program written in the language of the CEPcomputer.  In this paper, after an outline of the CEP computer, the internal structure of the translatoris described.  Emphasis is on the compilation of expressions, of input/output lists, and of subscripted variables. | Mancino, O. G.Cecchi, M. M.
1306 | A Class of Unambiguous Computer Languages | Discussed in this paper is the concept ofa fully nested computer language which may be one means of designing computer languages which would be completelyfree of ambiguities.  Several suggestions are also given here for the redefinition of ALGOL as a fully nested language. | Johnston, J. B.
1307 | A Lightpen-Controlled Program For On-Line Data Analysis | This paper describes a technique designedto ease the use of a data processing system by a person, in particular, a scientist, who is intimately andprimarily concerned with interpreting the significance of data handled by the system.  Since such a person isoften unable to spend the time necessary to master a programming language, it is essential that he be aidedin composing commands to the computer.  In the system described, the user is not required to learnor remember the vocabulary of the language because the vocabulary is displayed before him on"menus" bymeans of a computer-drive scope.  He selects the various vocabulary elements required by pointing withthe light pen.  By use of a small unordered set of rewriting rules applied as a result of light penselections, the user generates only syntacticallycorrect commands to the system.  He does not have to learnor remember the grammar.  The program restricts the user severely in the particular language he can use,but the method for communicating with the program makes these restrictions seem quite natural and unconstraining. The program has been used successfully for over ten months. | Goodenough, J. B.
1308 | A Mathematical Model for Mechanical part Description | The flexibility of a mathematical model takesadvantage of the common information requirements of computer-aided engineering drawing, numerical controltape generation, and physical characteristic computation.  By judicious control of man-machine communicationrequirements, improved results over conventional engineering design processes are possible.  An English-likeinput language, tailored for use by draftsmen and designers, will describe the part and specify theoutput desired.  One approach to the mathematical model consists of a group of surface-defining quadricequations, which are created by a system of modular subprogram.  Other subprograms will convert the mathematicalmodel into instructions for driving automatic drafting machines and numerical controlled machine tools. Physical part characteristics, such as center of gravity, can be computed by subprograms and used indynamic analysis work.  The proposed overall system is presented and experiments and demonstrations are discussed. | Luh, J. Y. S.Krolak, R. J.
1309 | A Computer User-Oriented System | A computer language system has been developedwhich makes possible fast preparation of management reports, regardless of computational complexity or formatvariety.  Costs are sufficiently low so that individually tailored reports can be prepared for everymanager.  The system requires initial preparation of large data banks containing data in elementary form. Use of two special languages, EXTRACT and MATRAN, permits selective extraction of any data subset, efficientprocessing through any computational sequence, and flexible presentation of results in either tabularor graphical form.  Matrix algebra is used as a fundamental vehicle for accomplishing both manipulation and computation. | Montillon, G. D.
1310 | A Rapid Braille Transliteration Technique for Certain IBM Machines | Weiler, W. J.Klema, V. C.
1311 | Efficient Autocorrelation  | Schmid, L. P.
1312 | Recursion and Iteration | Rice, H. G.
1313 | Construction of Nonlinear Programming Test Problems | Rosen, J. B.Suzuki, S.
1314 | The Organization of Symbol Tables | An efficient symbol table organization is animportant feature in the design of any compiler.  During the construction of the Virginia ALGOL 60 compilerfor the Burroughs B205, the primary consideration in the symbol table design was that the recognition ofidentifiers and reserved words should be as rapid as possible.  The general features of the technique are described. | Batson, A.
1315 | Automation of the Radioisotope Accountability System | The Radioisotope Service of the Veterans AdministrationHospital, Omaha, Nebraska, used a manual system of radioisotope accountability for three years.  Theprocedure which was satisfactory but time-consuming was converted from manual to a fully automated computersystem in January, 1963.  The program for purchased radioisotopes is written in FORMAT FORTRAN for the IBM1620 Computer.  A second program for maintaining accountability for reactor-created radioisotopes is written in the FORCOM programming language.  A minimum amount of bookkeeping is required by the reactor operatingstaff.  The United States Atomic Energy Commission regulations specify that records be kept.  This systemprovides detailed records for each container of radioactive material purchased and/or created in the Trigareactor indicating the amounts received, used, and/or transferred to the health physicist for disposal. Consolidated records contain total amounts received, used, and/or disposed of for any specified periodof time.  Purchased radioisotopes are reported in millicuries; reactor-created radioisotopes in microcuries. | Lahners, E. L.
1316 | Bessel Functions of the First Kind (Algorithm 236 [S17]) | Gautschi, W.
1317 | Poisson-Charlier Polynomials (Algorithm 234 [S23]) | Samet, P.A.
1318 | Arccossin (Algorithm 206 [B1]) | Bowlden, H. J.
1319 | Crout with Equilibration and Iteration (Algorithm 135 [F4]) | Meissner, L. P.
1320 | Inverse Permutation (Algorithm 250 [G6]) | Boonstra, B. H.
1321 | Outreal N (Algorithm [I5]) | Wirth, N. E.
1322 | Netflow (Algorithm 248 [H]) | Briggs, W. A.
1323 | A Correspondence Between ALGOL 60 and Church's Lambda-Notation: Part I* | This paper describes how some of the semanticsof ALGOL 60 can be formalized by establishing a correspondence between expressions of ALGOL 60 and expressionsin a modified form of Church's L-notation.  First a model for computer languages and compute behavioris described, based on the notions of functional application and functional abstraction, but also havinganalogues for imperative language features.  Then this model is used as an "abstract object language"into which ALGOL 60 is mapped.  Many of ALGOL 60's features emerge as particular arrangements ofa small number of structural rules, suggesting new classifications and generalizations.  The correspondenceis first described informally, mainly by illustrations.  The second part of the paper gives a formal description,i.e. an "abstract compiler" into the "abstract objct language."  This is itself presented in a "purelyfunctional" notation, that is one using only application and abstraction. | Landin, P. J.
1324 | Answering English questions by Computer: A Survey | Fifteen experimental English language question-answeringsystems which are programmed and operating are described and reviewed.  The systems range from a conversationmachine to programs which make sentences about pictures and systems which translate from Englishinto logical calculi.  Systems are classified as list-structured data-based, graphic data-based, text-basedand inferential.  Principles and methods of operations are detailed and discussed.  It is concludedthat the data-base question-answer has passed from initial research into the early developmentalphase.  The most difficult and important research questions for the advancement of general-purpose languageprocessors are seen to be concerned with measuring, dealing with ambiguities, translating into formallanguages and searching large tree structures. | Simmons, R. F.
1325 | Remote, On-Line, Real-time Computer Diagnosisof the Clinical Electrocardiogram | Presented in this paper is a brief report onthe hardware, software, system configuration and function of a system for the remote, online, real-time digitalcomputer diagnosis of clinical electrocardiograms.  It seems likely that efforts of this sort will leadto a satisfactory solution to the problem of the automatic diagnosis of electrocardiograms.  Currentattempts by the authors to extend the diagnostic capabilities of the present system are particularly concernedwith increasing the fidelity of the adaptive matched filters, the development of three dimensional pattern analysis,the analysis of parallel electrocardiographer-computer diagnostic interaction, and a study of the possibilityof introducing major, tree-like branching decisions early in the diagnostic process. | Whipple, G. H.Dickson, J. F.Horibe, H.Stark, L.
1326 | Boundary Networks | A feasible computer procedure is describedfor determining the total or partial inclusion of arbitrarily given points and lines with respect to aset of general polygonal domains which partition a plane bounded region.  A scheme for the computer representationof the boundaries of the domains and an algorithm, based on this  scheme, for evaluatingthe inclusion relations are specified in detail.  The method employs several levels of selection criteriafor the purpose of reducing the number of accesses to auxiliary storage devices and the amount of boundarydata for which processing is required. | Loomis, R. G.
1327 | Use of Decision Tables in Computer Programming | A decision table is a tabular form for displayingdecision logic.  Decision tables have many inherent advantages.  The technique to be illustratedputs these advantages to use in that it enables one to program directly from a decision table.  The techniqueis based on the creation of a binary image of a limited entry decision table in computer memory. A binary image of a given set of input conditions can also be created.  This data image is used to scanthe decision table image to arrive at the proper course of action.  There are several advantages gainedfrom the programming point view: (1) amount of computer memory used is drastically reduced, (2) programmingis simplified, and (3) documentation is brief and clear. | Kirk, H. W.
1328 | Further Remarks on Reducing Truncation Errors | Kahan, W.
1329 | Simulation of Boolean Functions in a Decimal computer | Mano, M. M.
1330 | Automated Plotting Flow-Charts on a Small Computer | Anderson, H. E.
1331 | Code Structures for Protection and Manipulation of Variable-Length Items | When items are made up of a variable numberof characters, each containing the same number of bits, certain control information (partition symbols)is inserted to mark their separations.  Since errors in identification of these control characterscan lead to serious trouble, methods of protecting these symbols are indicated.  A 6-bit code assignmentof alphanumeric characters for fixed word-length computers is given and its suitability for error detectionand variable-length item manipulation is shown.  Also indicated is its flexibility during certain arithmetic operations. | Ramamoorthy, C. V.
1332 | Subroutine Assembly | A description is given of an assembly system,which requires only one pass and does not maintain a table of information about the subroutine library. | Samet, P. A.
1333 | Reducing Truncation Errors Using Cascading Accumulators | When accumulating a large number of quantitiesas in numerical integration, the sum itself may become much larger than the individual addends. This results in truncation error.  Much of this error can be eliminated using cascading accumulatorsas noted in a recent article by Wolfe.  A simpler and slightly more flexible algorithm is presented whichdeals also with the case of negative addends. | Ross, D. R.
1334 | Mechanization of Tedious Algebra: TheNewcomb Operators of Planetary Theory | A computer program has been written to generatetables of formulas for the Newcomb operators of planetary theory.  The Newcomb operators are expressedas polynomials in two variables, one of which stands for a simple differential operator, and the otherfor an arbitrary integer.  The polynomials are generated by a recurrence scheme.  The program is coded inFORTRAN, using simple array manipulation techniques to perform the algebraic operations.  Formulas for over100 Newcomb operators have been produced by the program and typeset photographically on an S-560 Photon system. | Gerard, J. M.Izsak, I. G.Barnett, M. P.
1335 | Character Set for Optical CharacterRecognition (Proposed American Stand ard)
1336 | NPL: Highlights of A New Programming Language | Radin, G.Rogoway, H. P.
1337 | EULER: A Generalization of ALGOL, and its Formal Definition | Wirth, N.Weber, H.
1338 | Additional Comments on a Problem in Concurrent Progamming Control | Knuth, D. E.
1339 | A Contribution to the Development of ALGOL | Wirth, N.Hoare, C. A. R.
1340 | Multiplexing of Slow Peripherals | The philosophy of a monitor which allows slowoutput devices to be multiplexed is presented. | Abraham, C.Lance, G. N.Pearcey, T.
1341 | Levels of Computer Systems | In building current computer systems, we tendto break them down into "levels" of control, command and communication; in using the system, we breakour problems down correspondingly.  The continued use of such a structure raises questions about its effectson the usefulness of future systems, particularly with regard to such trends as time sharing, parallelprogramming, and, eventually, systems which learn.  In this essay some of these questions are posed, andthe general attitude we must take in pursuing the problem further is discussed. | Bryant, P.
1342 | Transportation Problem (Algorithms 293 [H]) | Bayer, G.
1343 | Havie Integrator (Algorithm 257 [D1]) | Farkas, I.
1344 | Statistical Computations Based Upon Algebraically Specified Models | Based upon a machine-readable statistical modeland related symbolic specifications, an efficient method of performing calculations for statistical modelsof a balanced complete nature is presented.  Fixes, mixed, and random analysis of variance modelsare considered.  A procedure for obtaining variance components and calculated F statistics for the model terms is included. | Schlater, J. E.Hemerle, W. J.
1345 | Tensor Calculations on the Computer | A FORMAC program has been written which is capableof calculating various quantities of interest in tensor calculus.  Using this code, Christoffel symbolshave been calculated for 12 basic orthogonal coordinate systems. | Waltons, J. J.
1346 | On the Application of the Process of Equalizationof Maxima to Obtain Rational Approximation to Certain Modified Bessel Functions | The second Remes algorithm as originally establishedfor polynomials, may converge or not when the approximating functions are rational.  However, thefew results known in this domain show how efficient the algorithm can be to obtain approximations with asmall error, much more than in the polynomial case, in which the best approximation can be very nearlyapproached directly by a series development.  The aim of this paper is to investigate the limitationsof the applicability of certain extensions of the algorithm to the case where the approximations are rationalas well as to present some numerical results. | Gargantini, L.
1347 | General Time-Varying Systems Error Sensitivities Program | The evaluation, by the propagation of variancetechnique, of the sensitivity of time-varying systems to initial condition and parameter errors, involvesthe determination of several system-dependent partial derivative matrices.  This requirement has led toseparate programs for each system under investigation.  A new program, through utilization of the Wengert differentiationtechnique, automatically determines the required matrices from specific system equations suppliedin subroutine form at execution time, eliminating the need for individualized programs, and presaging thefurther development of extremely general computer programs. | Wilkins, R. D.
1348 | FLOWTRACE, A Computer Program for Flowcharting Programs | The FLOWTRACE system produces flowcharts of programswritten in "almost any" programming language.  One most describe the syntax of the control statementsin his language; for this purpose a metalanguage is available.  The resultant object deck is used toflowchart any programs in the language described.  Several examples of FAP and SNOBOL flowcharts are given. However, it is not necessary to confine one's scope to existing languages.  One may define his ownlanguage in any "well-structured" manner.  This feature is particularly useful when it is desirableto chart only comments within a program.  Such an approach permits the documentation of descriptive remarksand avoids the inclusion of coding details. | Sherman, P. M.
1349 | Computing Capabilities at Western European Universities | This report on the author's trip to universitiesin Western Europe in the summer of 1966 gives brief descriptions of computing activities at each institutionvisited.  Present equipment capabilities vary from moderate to large scale; however, many institutionsplan to acquire complex time-shared systems in the near future.  In the author's opinion, the stateof the art lags behind that on this continent.  This lag is attributed to four principal factors: (a)the handicapping organization of academic procedures; (b) the university-government financial relationship;(c) the subordinated organization of the computing facility; (d) the paucity of professional interchangeof knowledge.  The effects of these constraints are explicated. | Finerman, A.
1350 | The Augmented Predictive Analyzer for Context-FreeLanguages-Its Relative Efficiency | It has been proven by Greibach that for a givencontext-free grammar G, a standard-form grammar Gs can be constructed, which generates the same languagesas is generated by G and whose rules are all of the form Z --> cY(1) ... Y(m), (m >= O) where Z andY(i) are intermediate symbols and c a terminal symbol.  Since the predictive analyzer at Harvard usesa standard-form grammar, it can accept the language of any context-free Grammar G, given an equivalent standard-formgrammar Gs.  The structural descriptions SD(Gs,X) assigned to a given sentence X by the predictiveanalyzer, however, are usually different from the structural descriptions SD(G,X) assigned to thesame sentence by the original context-free grammar G from which Gs is derived.  In Section 1, an algorithm,originally due to Abbott is described standard-form grammar each of whose rules is in standard form, supplementedby additional information describing its derivation from the original context-free grammar. A technique for performing the SD(Gs,X) to SD(G,X) transformation effectively is also described.  In section2, the augmented predictive analyzer as a parsing algorithm for arbitrary context-free languages is comparedwith two other parsing algorithms: a selective top-to-bottom algorithm similar to Irons' "error correctingparse algorithm" and an immediate constituent analyzer which is an extension of Sakai-Cocke's algorithmfor normal grammars.  The comparison is based upon several criteria of efficiency, covering core-storagerequirements, complexities of the programs and processing time. | Kuno,S.
1351 | Automatic Error Bounds on Real Zeros of Rational Functions | A procedure for implementing an interval arithmeticversion of the Newton-Raphson method is proposed.  The procedure require only a starting intervalover which the zeros of a given rational function are to be located.  The method automatically provides bounds for roundoff error. | Dargel, R. H.Loscalzo, F. R.Witt, T. H.
1352 | Automatic Integration of a Function with a Parameter | Two efficient methods for automatic numericalintegration are Romberg integration and adaptive Simpson integration.  For integrands of the form f(x)g(x,a)where a is a parameter, it is shown that Romberg's method is more efficient.  A FORTRAN programshows how to achieve this greater efficiency. | Rabinowitz, P.
1353 | Techniques for Automatic Tolerance Control in Linear Programming | In this technical note, the numerical stepsfor the simplex method of linear programming are reviewed and the tolerances needed in the numerical procedureare defined.  Objective criteria are given for accomplishing the numerical steps of the methodand the calculation of necessary tolerances. | Clasen, R. J.
1354 | Conversion of Decision Tables to ComputerPrograms by Rule Mark Techniques | The rule mask technique is one method of convertinglimited entry decision tables to computer programs.  Recent discussion suggest that in many circumstancesit is to be preferred to the technique of constructing networks or trees.  A drawback of thetechnique as hitherto presented is its liability to produce object programs of longer run time than necessary. In this paper a modification of the technique is discussed which takes into account both rule frequenciesand the relative times for evaluating conditions.  This can materially improve object program run time. | King, P. J. H.
1355 | Regular Coulomb Wave Functions (Algorithm 292 ) | Gautschi, W.
1356 | Havie Integrator (Algorithm 257 [D1]) | Hillstrom, K.
1357 | Examination Scheduling (Algorithm 286 [H]) | Williams, R.
1358 | Syntax Macros and Extended Translation | A translation approach is described which allowsone to extended the syntax and semantics of a given high-level base language by the use of a newformalism called a syntax-macro.  Syntax-macros define string transformations based on syntactic elementsof the base language.  Two types of macros are discussed, and examples are given of their use.  Theconditional generation of macros based on options and alternatives recognized by the scan are also described. | Leavenworth, B. M.
1359 | Data Filtering Applied to Information Storage and Retrieval Applications | Manipulation of data strings is the most complexprocessing function in information storage and retrieval applications.  Data string manipulationis discussed within the context of an interpretive processing environment controlled by the use of proceduraldirectives.  The sequence of procedural directives is derived from a job assumed to be expressed in a user-orientedsource language.  Each data string with the structured data environment (data bank) is explicitlyor implicitly related to a format declarationresiding in a format library.  The processing mechanicsassociated with data string manipulation is developed in accordance with a generalized data filtering concept. This results in the implementation of a two-part data filter module that satisfies internal processingfunctions by filtering data strings through format declarations associated with its input and output ports. | Larsen, R. P.
1360 | Description of Systems Used for Data Transmission* (An ASA Tutorial)
1361 | Rectangular Holes in Twelve-Row PunchedCards* (Proposed American Standard)
1362 | Code Extension in ASCII* (An ASA Tutorial) | The American Standard Code for InformationInterchange (ASCII) contains a number of control characters associated with the principle of code extension,that is, with the representation of information which cannot be directly represented by means of the charactersin the Code.  The manner of use of these characters has not previously been completely described. This paper presents a set of mutually consistent philosophies regarding code extension applications,and suggests a corollary set of doctrines for the application of the code extension characters.  Distinctionsare drawn between code extension and such other concepts as "graphic substitution" or "syntacticrepresentation" which are often used to meet similar requirements.  Also covered are certain topics whichare not truly concerned with code extension but which are often linked with it in discussion on code applications. The material in this paper is equally applicable in principle to the (proposed) ISO international7-bit code for information interchange.
1363 | A General Method of Systematic Interval Computationfor Numerical Integration of Initial Value Problems | A procedure is given for continuously computingand monitoring the step size to be used by a self-starting, p-th order numerical integration methodto solve an initial value problem.  The procedure uses an estimate of the truncation error to calculate the step size. | Martin, W. C.Paulson, K. C.Sashkin, L.
1364 | Mathematical Experimentation in Time-Lag Modulation | Equations of the form du/dt = g(u(t),u(h(t)))arise in a number of scientific contexts.  The authors point out some interesting properties of thesolution u'(t) = -u(t-1-k*sin(wt))+sin(at).  These properties were obtained by means of numerical solution. | Bellman, R.Buell, J.Kalaba, R.
1365 | Eliminating Monotonous Mathematics with FORMAC | The FORMAC (FORmula MAnipulation Compiler)programming system provides a powerful tool for performing mathematical analysis.  It is an extensionof FORTRAN IV which permits the use of the computer to perform the tedious algebraic computations that arisein many different fields.  Among the areas in which it has been successfully used are: differentiationof complicated expressions, expansion of truncated power series, solution of simultaneous equations withliteral coefficients, nonlinear maximum likelihood estimation, tensor analysis, and generation of the coefficientsof equations in Keplerian motion.  These types of analysis-which arose in the solution of specificpractical problems in physics, engineering, astronomy, statistics and astronautics-are discussed inthe paper.  In addition to its usage for specific problem solutions, FORMAC can also be used to automatethe analysis phase in certain production programming.  Several such applications are presented. | Tobey, R. G.
1366 | Computer Simulation-Discussion of theTechnique and Comparison of Languages  | The purpose of this paper is to present a comparisonof some computer simulation languages and of some of the involved in comparing software packagesfor digital computers are discussed in Part I.  The issue is obvious: users of digital computersmust choose from available languages or write their own.  Substantial costs can occur, particularly in training,implementation and computer time if an inappropriate language is chosen.More and more computer simulationlanguages are being developed: comparisons and evaluations of existing languages are useful for designersand implementers as well as users.  The second part is devoted to computer simulation and simulationlanguages.  The computational characteristics of simulation are discussed with  special attention beingpaid to a distinction between continuous and discrete change models.  Part III presents a detailed comparisonof six simulation languages and packages: SIMSCRIPT, CLP, CSL, GASP, CPSS and SOL.  The characteristics ofeach are summarized in a series of tables.  The implications of this analysis for designers of languages,for users, and for implementers are developed.  The conclusion of the paper is that the packages nowavailable for computer simulation offer features which none of the more general-purpose packages do andthat analysis of strengths and weaknesses of each suggests ways in which both current and future simulationlanguages and packages can be improved. | Teichroew, D.Lubin, J. F.
1367 | Character Structure and Character Parity Sensefor Parallel-by-Bit Data Communication in ASCII* (Proposed American Standard)
1368 | Systematic Generation of Hamiltonian Circuits | For a combinatorial matrix which may specifyboth directed and nondirected arcs, the paper describes a computer program which generates systematicallyand exhaustively all the Hamiltonian circuits. Specific application is made to the "traveling salesman" problem. | Roberts, S. M.
1369 | Half Rotations in N-Dimensional Euclidean Space | An iterative procedure is described for determininghalf rotations in n-dimensional Euclidean space. The method is a variant of the cyclic Jacobiprocedure and utilizers elementary plane rotations to obtain the half rotation matrix.  Numerical examples are given. | McCamon, R. B.
1370 | Linear Equations, Exact Solutions (Algorithm 290 [F4]) | Boothroyd, J.
1371 | Logarithm of Gamma Function (Algorithm 291 [S14]) | Pike, M. C.Hill, I. D.
1372 | Direct Search (Algorithm 178 [E4]) | Bell, M.Pike, M. C.
1373 | Gamma Function; Gamma Function for Range 1 to2; Reciprocal Gamma Function to Real Argument; Gamma Function; Logarithm of Gamma Function (Algorithms34[S14]; 54[S14]; 80[S14]; 221[S14]; 291[S14]) | Pike, M. C.Hill, I. D.
1374 | Evaluation of Determinant; DeterminantEvaluation (Algorithms 41[F3]; 269[F3]) | Bergson, A.
1375 | Function Minimization (Algorithm 251 [E4]) | Fletcher, R.
1376 | Modified Graeffee Method (Algorithm 256 [C2]) | Stern, G.
1377 | Pseudo-Random Numbers (Algorithm 266 [G5]) | Hansson, L.
1378 | Pseudo-Random Numbers (Algorithm 266 [G5]) | Hill, I. D.Pike, M. C.
1379 | A Final Solution to the Dangling Else of ALGOL 60 and Related Languages | The dangling else problem consists of a classof potential ambiguities in ALGOL-like conditional statements whose basic form is "if B1 then if B2 thenS1 else S2" where B1 and B2 are Boolean expressions and S1 and S2 are basic statements.  The difficultylies in whether to attach the else to the first if or to the second one.  Existing solutions to the problemare either ambiguous or unnecessarily restrictive.  Let Sand S1 be statements.  We define S to be closedif "S else S1" is not a statement, and to be open if "S else S1" is a statement.  Thus an unconditionalstatement is  a closed statement.  Open and closed conditional statements are defined by syntax equationsin such a way as to preserve openness and closure.  In each case, an else must always be preceded by a closedstatement.  It is shown that the syntax equations are unambiguous, and that may change in the statementtypes required within the syntax equations would lead to either ambiguity or unnecessary restriction. | Abrahams, P. W.
1380 | SIMULA-an ALGOL-Based Simulation Language | This paper is an introduction to SIMULA, aprogramming language designed to provide a systems analyst with unified concepts which facilitate theconcise description of discrete event systems.  A system description also serves as a source language simulationprogram.  SIMULA is an extension of ALGOL 60 in which the most important new conceptsis that of quasi-parallel processing. | Dahl, O. J.Nygaard, K.
1381 | Impact of Computers on the Undergraduate Mathematics Curriculum  | The use of computers to permit the widespread applicationof mathematical ideas requiring computation in science and technology is extremely significant forthe understanding of our current society.  Student interest in this development is intense and if properlyutilized should yield a much better understanding of mathematical concepts as well as the ideas of programmingand logical structure which have been introduced into many fields by the use of computers.  The presentpaper suggests that that portion of the undergraduate mathematical curriculum which is preparation for the useof mathematics by persons who are not professional mathematicians be modified to include the extensionsand clarifications which are possible because of computers.  An early introduction to programming isdesirable to permit a continuing use of automatic computation to illustrate and clarify mathematical concepts. Following the calculus equation stage an intensive introduction to numerical analysis shouldbe added to the current curriculum.  In addition to providing competence in the mostly used computingtechniques, it would permit a more sophisticated utilization of the advanced mathematical ideas associatedwith complex variables and transform theories. | Murray, F. J.
1382 | Desired Computer Impact on Undergraduate Mathematics  | Three matters relating to the theme of theSymposium are discussed here.  The author examines some projections concerning the supply and demand formathematicians in the United States through the mid-1970s, comments briefly on some of the factors whichmay influence the professional activities of applied mathematicians over the next several years,and discusses in broad terms how this information may relate to the undergraduate training of mathematicians. | Macon, N.
1383 | Implications of the Digital Computerfor Education In the Mathematical Sciences | The digital computer has profoundly altered thedefinition of what is interesting in mathematics.  The importance of applied logic in human affairs ischanged by the existence of the "logical engine."  The result is that one should no longer think in termsof a single discipline of mathematics but in terms of a complex of mathematical sciences. | Givens, W.
1384 | Mathematics for Undergraduate Computer Scientists | The mathematical requirements for an undergraduateprogram in Computer Science are a subject of debate.  The Association for Computing Machinery'sCurriculum Committee, however, believes that these requirements are essentially the same as the mathematicalcontent of physical sciences undergraduate programs.  The Committee believes that these requirementsshould assure the student of a broad mathematical background and should enable him to take a wide varietyof courses in other scientific disciplines.  The Committee's concern is to develop a solidscientific  approach to Computer Science. | Atchison, W. F.
1385 | Computer Technology in Communist China, 1956-1965 | Based on information from translations of CommunistChinese news items and periodical literature for the 1965 period, computer technology in China isreviewed under the following headings: (1) initial planning, organization and educational aspects of computertechnology and automation; (2) machine development progress: two major specific machines in 1958-59, withSoviet aid; a vacuum in 1960-64 due to the withdrawal of Soviet aid; then presumably all-Chinese-made machinesfrom 1965 to the present; (3) computer applications; (4) the trend of automation: control of production processesrather than data processing; and (5) the "Yun Ch'ou Hsueh" (Science of Operation and Programming)campaign of 1958-60, during which an attempt was made to bring concepts such as linear programmingto ordinary Chinese workers and peasants.  Communist China is adjudged to have a marginal computer capability,with most of its machines probably being of a binary nature; however, a turning point may have been reached in mid-1965. | Audette, D. G.
1386 | Symbolic Factoring of Polynomials in Several Variables | An algorithm for finding the symbolic factors ofa multi-variate polynomial with integer coefficients is presented.  The algorithm is an extension of a techniqueused by Kronecker in a proof that the prime factoring of any polynomial may be found in a finite numberof steps.  The algorithm consists of factoring single-variable instances of the given polynomial byKronecker's method and introducing the remaining variables by interpolation.  Techniques for implementing thealgorithm and several examples are discussed.  The algorithm promises sufficient power to be used efficientlyin an online system for symbolic mathematics. | Jordan, D. E.Kain, R. Y.Clapp, L. C.
1387 | Solution of Systems of Polynomial Equations By Elimination | The elimination procedure as described by Williamshas been coded in LISP and FORMAC and used in solving systems of polynomial equations.  It is foundthat the method is very effective in the case of small systems, where it yields all solutions withoutthe need for initial estimates. The method, by itself, appears in appropriate, however, in the solutionof large systems of equation due to the explosive growth in the intermediate equations and the hazardswhich arise when the coefficients are truncated.  A comparison is made with difficulties found in otherproblems in non-numerical mathematics such as symbolic integration and simplification. | Moses, J.
1388 | AUTOMAST: Automatic Mathematical Analysis and Symbolic Translation | A procedure for numerically solving systemsof ordinary differential equation is shown to also generate symbolic solutions.  The procedure is basedon a finite Taylor series expansion that includes an estimate of the error in the final result.  A computerprogram is described that reads in a system of such equations and then generates the expansionsfor all of the dependent variables. The expansions are determined symbolically, hence any non-numeric parametersin the original equations are carried automatically into the final expansions.  Thus the exact influenceof any parameters on the problem solution can be easily displayed. | Ball, W. E.Berns, R. I.
1389 | A Programmer's Description of L^6 | Bell Telephone Laboratories' Low-Linked List LanguageL^6 (pronounced "L-six") is a new programming language for list structure manipulations.  It containsmany of the facilities which underlie such list processors as IPL, LISP, COMIT ad SNOBOL, but permitsthe user to get much closer to machine code in order to write faster-running programs, to use storagemore efficiently and to build a wider variety of linked data structures. | Knowlton, K. C.
1390 | CONVERT | A programming language is described whichis applicable to problems conveniently described by transformation rules.  By this is meant that patternsmay be prescribed, each being associated with a skeleton, so that a series of such pairs may be searcheduntil a pattern is found which matches an expression to be transformed.  The conditions for a matchare governed by a code which also allows subexpressions to be identified and eventually substituted into thecorresponding skeleton.  The primitive patterns and primitive skeletons are described, as well as theprinciple which allow their elaboration in to more complicated patterns and skeletons.  The advantages of thelanguage are that it allows one to apply transformation rules to lists and arrays as easily as strings, that bothpatterns and skeletons may be defined recursively, and that as a consequence programs may be stated quite concisely. | Guzman, A.McIntosh, H. V.
1391 | Computer Experiments in Finite Algebra | A medium-scale programming system is writtenin MAD and FAP on the IBM 7094 to manipulate some of the objects of modern algebra: finite groups, mapsand sets of maps, subsets and sets of subsets, constant integers and truth-values.  Designed to operatein a time-sharing environment, the system can serve as a teacher's aid to the undergraduate student ofmodern algebra, as well as for the working scientist or engineer wishing to familiarize himself with the subset. | Maurer, W. D.
1392 | Experience with FORMAC Algorithm Design | Various facets of the design and implementationof mathematical expression manipulation algorithms are discussed.  Concrete examples are provided by theFORMAC EXPAND and differentiation algorithms, a basic FORMAC utility routine, and an experiment in theextraction of the skeletal structure of an expression.  One recurrent theme is the need to avoid excessiveintermediate expression swell in order to minimize core storage requirements. Although many details fromthe FORMAC implementation are presented, an attempt is made to stress principles and ideas of general relevancein the design of algorithms for manipulating mathematical expressions. | Tobey, R. G.
1393 | PM, A System for Polynomial Manipulation | PM is an IBM 7094 program system for formal manipulationof polynomials in any number of variables, with integral coefficients unrestricted in size.  Someof the formal operations which can be performed by the system are sums, differences, products, quotients,derivatives, substitutions and greater common divisors.  PM is based on the REFCO III list processingsystem, which is described and compared with the LISP and SLIP systems.  The PM subroutines for arithmeticof large integers are described as constituting an independently useful subsystem.  PM is compared withthe ALPAK system in several respects, including the choice of canonical forms for polynomials.  A newalgorithm for polynomial greatest common divisor calculation is mentioned, and exaples areincluded to illustrate its superiority. | Collins, G. E.
1394 | Computation of Algebraic Properties of ElementaryParticle Reactions Using a Digital Computer | A large number of calculations in high-energyelementary particle physics involve the manipulation of complicated algebraic expressions containing bothtensor and noncommutative matrix quantities.  Many of these calculations take several months to complete, althoughthe operations involved follow straightforward rules.  In this paper a program is described, which hasbeen developed in LISP for solving such problems.  The manner in which these problems are encountered isoutlined, and their representation in the computer discussed.  At present, about six months of human worktakes less than fifteen minutes on an IBM 7090.  Limitations of the present system and future plans are also outlined. | Hearn, A. C.
1395 | On the Implementation of AMBIT, A Language for Symbol Manipulation | A brief description is given of the implementationtechnique for the replacement rule of the AMBIT programming language.  The algorithm for the "AMBITscan" and an example of its application are given.  The algorithm is applicable to other membersof the family of string transformation languages of which AMBIT is a member, and it provides a rationalefor the design of the AMBIT language. | Christensen, C.
1396 | Survey of Formula Manipulation | The field of formula manipulation is surveyed,with particular attention to the specific capabilities of differentiation, integration and the supporting capabilitiesof simplification, displays and input/output editing, and precision arithmetic.  General systems-bothbatch and online-are described.  Finally, some programs to solve specific applications are discussed. | Sammet, J. E.
1397 | Proceedings of the ACM Symposium on Symbolic and Algebraic Manipulation | The ACM Symposium on Symbolic and AlgebraicManipulation brought together over four hundred people interested in programming languages designedfor manipulation of algebraic formulas and symbol strings, in their applications, and in algorithms fortheir implementation.  Twenty-eight papers were presented, followed by a lively panel discussion offuture directions.  Evening meetings were arranged for several interest groups.  The conference was sponsoredby the ACM Special Interest Committee on Symbolic and Algebraic Manipulation.  The program committee consistedof Chairman Jean E. Sammet, Paul Abrahams, Thomas E. Cheatham, Max Goldstein, and Douglas Mcllroy. Conference arrangements were made by Lewis C. Clapp, Daniel Bobrow and James H. Griesmer.-Robert W. Floyd, Editor
1398 | Robot Data Screening: A Solution to MultivariateType Problems in the Biological and Social Sciences | A new approach is outlined toward the solutionof the type of multivariate problem that is found usually in the biological and social sciences aswell as in medicine.  This approach uses a "logical" rather than a "statistical" criterion by which variablesare grouped into a deterministic model.  Algorithm are developed by which some variables are kept on forfurther analysis while others are eliminated.  Criteria for the acceptance of a variable as well as thetermination of the searching process are derived from information theory. | Sterling, T.Gleser, M.Haberman, S.Pollack, S.
1399 | On Top-to-Bottom Recognition and Left Recursion | A procedure is given for obtaining structuraldescriptions in a context-free grammar by performing the recognition according to a strongly equivalent, left-recursion-freegrammar. The effect of allowing null strings in the rewriting rules is discussed. | Kurki-Suonio, R.
1400 | Free-Text Inputs to Utility Routines | Through the use of some rather simple techniques,it is frequently possible to produce a program which will accept free-text inputs.  The techniques arediscussed and related to a general tape manipulation routine. | Blum, R. I.
1401 | Quasilinearization and the Calculation of Eigenvalues | Several eigenvalue problems for systems ofordinary differential equations are considered.  They are resolved computationally using the quasilinerizationtechnique, a quadratically convergent successive approximation scheme related tothe Newton-Raphson-Kantorovich method. | Bellman, R., Kagiwada, H.Kalaba, R.
1402 | Partial Step Integration | A partial step integration equation is derivedfor use with the Adams or Adams-Bashforth method of integration of differential equations.  This methodof obtaining functional values at points intermediate to the integration points yields accuracy comparableto the integration and does not require storing of additional information as in interpolation methods. | Glauz, R. D.
1403 | A Method for Finding the m Smallest Values ofa Monotonic Function Defined on Ordered Sets of Positive Integers | The minimum value of a monotonic increasingfunction defined on a partially ordered set S is assumed on the set of minimal points of S.  This observationis used to devise an efficient method for finding the m smallest functional values of monotonicfunctions defined on ordered pairs of positive integers.  The method is easily extended to includemonotonic functions defined on ordered n-tuples.  Included is a FORTRAN program which was written to implementthe procedure for a certain important case. | Sigillito, V. G.
1404 | Computational Aspects of Multiple CovarianceAnalysis on a Multifactor Structure | The computational procedure for the analysisof multiple covariance in statistics is discussed with reference to the analysis of variance.  A specialoperator calculus developed by Hartly for programming analysis of variance for multifactor experiments is extendedto cover the analysis of covariance.  This extension is accomplished by utilizing the connectionbetween the analysis of covariance and the analysis of variance and by introducing a new operator.  Theresults are illustrated by a numerical example for analysis of covariance, in which the basic computationsare shown to be carried out by an analysis-of-variance program. | Peng, K. C.
1405 | Matrix Triangulation with Integer Arithmetic (Algorithm 287 [F1]) | Blankinship, W. A.
1406 | Solution of simultaneous Linear DiophantineEquations (Algorithm 288 [F4]) | Blankinship, W. A.
1407 | Confidence Interval for a Ratio (Algorithm 289 [G1]) | Hill, I. D.Pike, M. C.
1408 | The Eschenbach Drum Scheme | The prime function of a drum, operating inreal time, is to perform accesses quickly.  The usual means for increasing this capacity is to incorporateengineering or hardware improvements.  In this paper the problem is attacked not by changing thedrum, but rather by modifying the manner in which it operates.  At the outset, a drum is given a functionaldefinition.  Then a simple design scheme (Eschenbach) is introduced which enormously increases the rate ofaccessing for drums so defined.  This is shown to enable a system to perform a job by employing fewer orless expensive drums.  It is suggested that although the design scheme has a specific use, the method underlying ithas more general applicability.  The question of the efficacy of the drum scheme is then raised.  Todeal with this, a standard of efficiency is developed in light of realistic real-time circumstances.  The drumscheme is then modelled in a manner which permits it to be analyzed as a problem in queueing theory. Thus one is enabled to ascertain whether the drum scheme is efficient enough for its application.  Again,whereas the analysis of the drum scheme has a specific use, the methods underlying it have more general applicability. | Weingarten, A.
1409 | NEBULA: A Digital Computer Using a 20 Mc Glass Delay Line Memory | Oregon State University has designed and constructeda medium-speed serial digital computer using glass delay lines circulating at 22 Mc as memory. The design objectives as originally conceived in a special seminar were: (1) to be a research projectin computer design; (2) to be usable as an educational machine;and (3) to have easily modifiable hardware forbasic research in computer systems design.  An unusual arrangement of information within the 22 Mcmemory allows a simple interface with the 340 Kc arithmetic unit, which results in an effective zero latencytime and provides possibilities for an associative memory.  The arithmetic unit has a command structure similarto large parallel machines, and uses flip-flop arithmetic and control registers throughout.  All hardwaredevelopment has been aimed toward the concept of easy modification, elaborate console controls foreffective man-machine interaction and low cost. | Boles, J. A.Rux, P. T.Weingarten Jr., F. W.
1410 | Interarrival Statistics for Time Sharing Systems | The optimization of time-shared system performancerequires the description of the stochastic processes governing the user inputs and the program activity. This paper provides a statistical description of the user input process in the SDC-ARPA general-purposeTime-Sharing System (TSS).  The input process is assumed to be stationary, and to be defined by theinterarrival time distribution.  The data obtained appear to justify satisfactorily the common assumptionthat the interarrival times are serially independent.  The data do not appear to justify, except as a veryrough approximation, the usual assumption off an exponential distribution for interarrival time.  A muchmore satisfactory approximation to the data can be obtained with a biphase or triphase hyperexponential distribution. | Coffman, E. G.Wood, R. C.
1411 | Comparison of Several Algorithms for Computationof Means, Standard Deviations and Correlation Coefficients | Several algorithms for computation of basicstatistics are compared by their performance on systematically generated test data.  The statisticscalculated were the mean, standard deviation and correlation coefficient.  For each statistic, the algorithmincluded the usual computing formulas, correction due to an accumulated error term, and a recursive computationof the current value of the statistic.  The usual computing formulas were also evaluated indouble precision.  Large errors were noted for some calculation using the usual computing formulas.  The mostreliable technique was correction of the initial estimate by use of an accumulated error term.  To eliminatethe need for making two passes on the data, it was suggested that the initial estimate of themean be obtained from a subset of the data. | Neely, P. M.
1412 | The Banking Information System Concept | Most large commercial banks have progressed tothe  point where their major accounting applications have been automated and more sophisticated usage ofdata processing equipment is being sought.  This, coupled with the availability of equipment well suitedto real-time, direct access processing,has led to development within some banks of the central fileof data base approach toward a banking information system.  The banking information system now serves thetwo-fold purpose of providing real-time responses to inquires about individual account stasus and providingmore complex combinations of information for management use.  Both kinds of processing draw upon acommon store of data contained in the direct access central file.  This data base includes indexes whichfacilitate cross referencing of account information so that all relationships between bank and customer maybe discerned.  In introducing the banking information system concept, a gradual approach to account cross-referencingand file conversion is most prudent.  Generally, this system must interface with other computerapplications already existing within the bank. | Head, R. V.
1413 | A Vision of Technology and Education | Educational technology is currently quitefashionable.  Here, as in many other branches or aspects of technology, changes possible in the next generationor two are now known as ideas, discoveries or inventions.  The unknown is whether the potentialwill become the actual and, if so, on what time scale.  This ignorance stems largely from ignorance aboutthe social response to potential technological change.  The object of this paper is to present a visionof potential educational technology and to raise questions about the modes of social response andadaptation likely to be evoked by such a vision. | Oettinger, A. G.
1414 | Twelve-Row Punched-Card Code for InformationInterchange* (Proposed American Standard)
1415 | Automatic Derivation of Microsentences | The decomposition of long complex English sentencesinto shorter kernel-like constituent sentences (microsentences)has often been suggested as an avenuetoward conducting automatic retrieval of natural language messages.  To explore the prospects of sucha step, the authors attempted in 1963 to prepare a general program for deriving microsentences from longersentences that had been syntactically analyzed by the Harvard Multipath Analysis Program.  The basicidea was to extract the subject, verb and object (if any) of each clause and to reassemble these materialsinto a grammatical microsentence.  A program is described in this paper, which was designed to operateon the tree structure output of the analyzer, and the microsentences that were produced are exhibited. The authors conclude that while microsentences of the quality achieved do not open up immediate prospectsfor improving the performance of automatic message retrieval systems, they may have practicalvalue in man-machine systems using human monitors to select the preferred syntactic interpretation of a sentence. | Carmody, B. TJones Jr., P. E.
1416 | A Fortran Technique for Simplifying Input to Report Generators | Typical report generators allow the productionof standard forms when tabulating a magnetic tape file; the extraction of nonstandard sets of information,with suitable annotation, involves troublesome forms design.  A method of information extraction involvingthe calculation of suitable FORTRAN FORMAT statements, which combats this problem, is described. | Cleary, J. G.
1417 | Economies of Scale and the IBM System/360 | Cost functions among five System/360 modelsare analyzed through examinations of instruction times, program kernels and a "typical" instruction mix. Comparisons are made between the data developed here and Grosch's Law which seems to be applicable tomuch of the data.  Sizable economies of scale are unquestionably present in computing equipment.  | Solomon Jr., M. B.
1418 | Examination Scheduling (Algorithm 286 [ZH]) | Peck, J. E. L.Williams, M. R.
1419 | Chebyshev Quadrature (Algorithm 279 [D1]) | Hopgood, F. R. A.Litherland, C.
1420 | A New Uniform Pseudorandom Number Generator | A new multiplicative congruential pseudorandomnumber generator is discussed, in which the modulus is the largest prime within accumulator capacityand the multiplier is a primitive root of that prime.  This generator passes the usual statisticaltests and in addition the least significant bits appear to be as random as the most significant bits-aproperty which generators having modulus 2^k do not possess. | Hutchinson, D. W.
1421 | A Contribution to the Development of ALGOL | A programming language similar in many respectsto ALGOL 60, but incorporating a large number of improvements based on six years experience with thatlanguage, is described in detail.  Part I consists of an introduction to the new language and a summaryof the changes made to ALGOL 60, together with a discussion of the motives behind there visions.  Part IIis a rigorous definition of the proposed language.  Part III describes a set of proposed standard proceduresto be used with the language, including facilities for input/output. | Wirth, N.Hoare, C. A. R.
1422 | Eleven-Sixteenths Inch PerforatedPaper Tape (Proposed American Standard)
1423 | A Simple Algorithm for Computing the Generalized Inverse of a Matrix | The generalized inverse of a matrix is importantin analysis because it provides an extension of the concept of an inverse which applies to all matrices. It also has many applications in numerical analysis, but it is not widely used because the existingalgorithms are fairly complicated and require considerable storage space.  A simple extension hasbeen found to the conventional orthogonalization method for inverting non-singular matrices, which givesthe generalized inverse with little extra effort and with no additional storage requirements.  The algorithmgives the generalized inverse for any m by n matrix A, including the special case when m+n and Ais non-singular and the case when m>n and rank(A) = n.  In the first case the algorithm gives the ordinaryinverse of A.  In the second case the algorithm yields the ordinary least squares transformation matrixINV(A'A)A' and has the advantage of avoiding the loss of significance which results in forming the product A'A explicitly. | Rust, R.Burrus, W. R.Schneeberger, C.
1424 | Automatic Analysis of Electronic Digital Circuits Using List Processing | A mapping from black diagrams of digital circuitsto list structures is described, together with a list processing program written for the ControlData 3600 which uses this mapping to automatically carry out circuit analysis. | Shalla, L.
1425 | Flow Diagrams, Turing Machines AndLanguages With Only Two Formation Rules | In the first part of the paper, flow diagramsare introduced to represent inter al. mappings of a set into itself.  Although not every diagram isdecomposable into a finite number of given base diagrams, this becomes true at a semantical level dueto a suitable extension of the given set and of the basic mappings defined in it.  Two normalizationmethods of flow diagrams are given.  The first has three base diagrams; the second, only two.  In the secondpart of the paper, the second method is applied to the theory of Turing machines.  With every Turingmachine provided with a two-way half-tape, there is associated a similar machine, doing essentiallythe same job, but working on a tape obtained from the first one by interspersing alternate blank squares. The new machine belongs to the family, elsewhere introduced, generated by composition and iteration fromthe two machines L and R.  That family is a proper subfamily of the whole family of Turing machines. | Bohm, C.Jacopini, G.
1426 | A Simulation of Hospital Admission Policy | A study is described which simulates differentadmission policies of a large specialized hospital.  The objective is to determine better policies forstabilization of admission and census rates while maintaining a reasonably full hospital.  There types ofpolicies were examined: admission based on percentages of discharge rates, discharge rates plus or minus aconstant, and fixed authorizations independent of discharge rates.  The last type policy produced more stablesimulated results, and when put into practice, improvements were realized. | Smith, W. G.Solomon Jr., M. B.
1427 | Simulation of Radioisotope Scans by Computer | In radioisotope scanning, a field which is assumingincreasing importance in medical diagnosis, the scan is a two-dimensional pattern made up of dots. Areas of increased source activity are represented on the scan by areas of increased dot density.  To studythe output of scanners with various characteristics, a program which simulates radioisotope scans has beenwritten  for a PDP-1 computer with auxiliary disk storage and cathode ray tube display.  Past and presentresearch using the output of the simulator has shown the flexibility of the system to be important. The structure of this program can be useful in the simulation of the output of any quantum-limited system. | Pizer, S. M.
1428 | SHOCK III, A Computer System As an Aidin the Management of Critically III Patients | SHOCK III, an online digital computer systemto assist the physician, nurse and paramedical personnel in monitoring and reporting on critically ill patients, is described. | Rockwell Jr., M. A.Shubin, H.Weil, M. H.Meagher, P. F.
1429 | Matrix Reduction Using the Hungarian MethodFor The Generation of School Timetables | The application of Kuhn's Hungarian Methodto the problem of matrix reduction as needed in Gotlieb's method for timetable generation is described. The method is suited to both hand and computer calculation.  Devices to improve the efficiencyof the basic algorithm are discussed. | Lions, J.
1430 | Multiple Precision Floating-Point Conversionfrom Decimal-to-Binary and Vice Versa | Decimal-to-binary and binary-to-decimal floating-pointconversion is often performed by using a table of the powers 10^i, (ia positive integer) forconverting from base 10 to base 2, and by using a table of the coefficient of a polynomial approximationof 10^x, (0<=x<1) for converting from base 2 to base 10.  These tables occupy a large storage regionin the case of a nonsingle precision conversion.  This paper shows that a single small table sufficesfor a floating-point conversion from decimal to binary, and vice versa, in any useful precision. | Mancino, O. G.
1431 | On a Storage Mapping Function For Data Structures | Some basic facts about certain data structuresare reviewed and an efficient algorithm is presented for constructing a storage mapping function fora structure from the structure's definition. | Deuel, P.
1432 | Incorporation of Nonstandard Input/Output Devices into FORTRAN Systems | A FORTRAN system may readily be modified tohandle input/output with nonstandard media on the same basis on which it handles the standard media.  Thisis done by providing a character-handling subroutine suited to the nonstandard medium and arranged to be calledby an otherwise unused output statement type or unit number. This method was used to control outputof alphanumeric information on a digital graph plotter. | Cohn, C. E.
1433 | A Note on Linear Programming Algorithm Design: A Combinatorial Problem | As linear programming models grow bigger andbigger in size, much actual data that must be memorized is often put on magnetic tape or disk, andconsequently there is an improportionality fast rise in the consumption of computer time.To cut downthis expense, an ever increasing effort is made to design more efficient algorithms.  This paper ismeant to support the effort.  It is attempted to find some characteristics of the way a pivot columnis found.  The number of repetitions of a certain transfer of data from tape to core memory is considered. After some simplification, the problem is restated in a general way.  The generating function of the probabilitydistribution and the moment generating function of the number of repetitions is found.  Asymptoticformulas are given for the moments using a result from a paper of S. Narumi [1].  The resultsmay be applied to write very efficient routines that search for an extreme value in a table.  Formulasprovide a means of calculating the computer timings in this case. | Roes, P. B. M.
1434 | A Monte Carlo Algorithm for Assigning Students to Classes | A technique of random choice is illustratedby application to the problem of assigning students to a fixed schedule of courses.  Using the techniqueit is possible to reduce or eliminate difficulties that result when a popular section is filled and closedbefore all students requesting and requiring it have been scheduled.  The effectiveness of automaticscheduling is retained without loss of the students privilege of picking favorite instructors. | Macon, N.Walker, E. E.
1435 | Design of Computer Simulation Experiments for Industrial Systems | The aim of this paper is to provide backgroundinformation on the existing literature on experimental design techniques which may be applicable to the designof computer simulation experiments for industrial systems.  Although major emphasis is placed on analysisof variance techniques, three other techniques of data analysis are considered-multiple ranking procedures,sequential sampling and spectral analysis.  The paper treats four specific experimental designproblems and several techniques for solving them.  The four experimental design problems are: (1) theproblem of stochastic convergence, (2) the problem of factor selection, (3) the problem of motiveand (4) the many response problem. | Burdick, D. S.Naylor, T. H.
1436 | Interchange of Two Blocks of Data (Algorithm 284 [K2]) | Fletcher, W.
1437 | The Mutual Primal-Dual Method (Algorithm 285 [H]) | Aird, T. J.
1438 | A Method for Locating Zeros of Complex Functions | A method for computing the index, or windingnumber, is developed and applied to the problem of finding zeros of functions from the plane into the plane. | Cain Jr., G. L.
1439 | Mechanization of the Curve Fitting Process: DATAN | A process for fitting a curve to approximate dataand the problem it creates for the engineer-programmer is defined.  An approach has also been defined and a systemhas been written for the SRU 1107 to mechanize a major portion of this process.  The techniques developedto accomplish the mechanization are largely empirical, and are dependent for their informationonly on the actual data points. | Simonsen, R. H.Anketell, D. L.
1440 | Starting Approximations for Square Root Calculation on IBM System/360 | Several starting approximations for squareroot calculation by Newton's method are presented in a form to facilitate their use in IBM System/360 squareroot routines.  These approximations include several for the range [1/16, 1], which is the intervalof primary interest on IBM System/360. | Fike, C. T.
1441 | Methods of Numerical Integration Applied toa System Having Trivial Function Evaluations | A study has been made to determine which methodsof numerical integration require the least computation time for a given amount of truncation errorwhen applied to a particular system of ordinary differential equations where function evaluations arerelatively trivial.  Recent methods due to Butcher and Gear are compared with classic Runge-Kutta, Kutta-Nystromand Adams methods.  Some of the newer one-step methods due to Butcher are found to be slightly superior,but no one method is found to have any great advantage over the others in the application to this particular problem. | Waters, J.
1442 | Recorded Magnetic Tape For Information Interchange(800 CPI, NRZI)* (Proposed American Standard)
1443 | A Method for Finding the Least Squares Estimateof the Intersection Point of Two Helices in Space | When the helical trajectories of two chargedparticles moving away from a common point in a magnetic field are reconstructed from measurements onthe tracks, the reconstructed tracks are perturbed by measurement and other errors and do not, in general,intersect.  A method is given for adjusting the reconstructed tracks in a least squares manner so that they do intersect. | Royston, R. J.Gregory, J.
1444 | An Algorithm for Generating Projective ReductionFormulas for Matrix Elements of Many-Electron Wavefunctions | An ALGOL procedure is given for automaticallygenerating formulas for matrix elements arising in the variational solution of the Schrodingerequation for many-electron systems. | Reeves, C. M.
1445 | Use of the Computer to Teach Introductory Statistics | It has always been obvious that the aid to calculationoffered by the computer forces a change in the curricula of mathematics, statistics, physics,engineering and other courses.  Not so obvious are the many pedagogic aids the computer can offer inteaching the subject matter.  The possibilities of giving the student a better technical as well as conceptualunderstanding of statistics were explored for a number of years at the College of Medicine ofthe University of Cincinnati and are reported here. | Sterling, T. D.Pollack, S. V.
1446 | Chebyshev Quadrature (Algorithm 279 [D1]) | Hopgood, F. R. A.Litherland, C.
1447 | Abscissas and Weights for Gregory Quadrature [D1]) | Welsch, J. H.
1448 | Abscissas and Weights for Romberg Quadrature (Algorithm 281 [D1]) | Welsch, J. H.
1449 | Derivatives (Algorithm 282 [S22]) | Gautschi, W.
1450 | Simultaneous Displacement of PolynomialRoots if Real and Simple (Algorithm 283 [C2]) | Kerner, I. O.
1451 | Runge-Kutta Integration (Algorithm 9 [D2]) | Thacher Jr., H. C.
1452 | Kutta-Merson (Algorithm 218 [D2] | Bayer, G.
1453 | A Nonrecursive Method of Syntax Specification | The use of the Kleene regular expression notationfor describing algebraic language syntax, in particular of ALGOL, is described in this paper. A FORTRAN II computer program for carrying out the elimination algorithm of Gorn,similar to Gaussian eliminationfor linear systems of algebraic equations, is described.  This was applied to numerous smallerlanguages, including some sublanguage of ALGOL.  A hand calculation result of the application of the algorithmto all of ALGOL is given, thus expressing the Revised ALGOL 1960 syntax in completely nonrecursiveterms, as far as its context-free portion is concerned.  This description in many ways is far moreintuitively understood than the previous recursive description, it is suggested.  The paper also includesresults of the machine program, which does not include a simplification algorithm. | Carr III, J. W.Weiland, J.
1454 | A Simple User-Oriented Compiler Source Languagefor Programming Automatic Test Equipment | For the nonprogrammer, difficulty in usinga language increases rapidly with the number of nonproblem-oriented conventions.  A simple language, evenif inelegant, which considers the user's background as part of the problem may be more effective than a sourcelanguage containing subtle and more powerful capabilities.  The language described in this paper isused to write computer programs which test electronic equipment.  Because this testing process contains fewcomplex ideas, there is little need for the elegance and redundancy of a highly syntax-oriented language. A simple and direct language will suffice for the problem.  The eventual users of this language are militarydepot personnel who cannot he expected to have computer programming skill or significant programmingtraining.  For this nonprogramming-oriented user, it was essential to create a language using familiarengineering statements; programming-oriented conventions would have unnecessarily complicated his task. | Scheff, B. H.
1455 | TRAC, A Procedure-Describing Language for the Reactive Typewriter | A description of the TRAC (Text ReckoningAnd Compiling) language and processing algorithm is given.  The TRAC language was developed as the basisof a software package for the reactive typewriter.  In the TRAC language, one can write procedures foraccepting, naming and storing any character string from the typewriter; for modifying any string in any way;for treating any string at any time as an executable procedure, or as a name, or as text; and for printingout any string.  The TRAC language is based upon an extension and generalization to character stringsof the programming concept of the "macro."  Through the ability of TRAC to accept and store definitions ofprocedures, the capabilities of the language can be indefinitely extended, and can deal with characterstrings, integers and Boolean vector variables. | Mooers, C. N.
1456 | Storage and Retrieval of Aspects of Meaning in Directed Graph Structures | An experimental system that uses LISP to makea conceptual dictionary is described.  The dictionary associates with each English word the syntactic information,definitional material, and references to the contexts in which it has been used to define other words. Such relations as class inclusion, possession, and active or passive actions are used as definitionalmaterial.  The resulting structure serves as a powerful vehicle for research on the logic of question answering. Examples of methods of inputting information and answering simple English questions are given.  Animportant conclusion is that, although LISP and other list processing languages are ideally suited forproducing complex associative structures, they are inadequate vehicles for language processing on anylarge scale-at east until they can use auxiliary memory as a continuous extension of core memory. | Simmons, R. F.
1457 | Data Manipulation and Programming Problemsin Automatic Information Retrieval | Automatic information retrieval programs requirethe manipulation of a variety of different data structures, including linear text, sparse matrices,and tree or list structures.  The main data manipulations to be performed in automatic informationsystems are first briefly reviewed.  A variety of data representations which have been used to describestructured information are then examined, and the characteristics of various processing languages areoutlined in the light of the procedures requiring implementation.  Advantages of these programming languagesfor the retrieval application are examined, and suggestions are made for the design of programmingfacilities to aid in information retrieval. | Salton, G.
1458 | Online Programming | When the transition has been made from off lineto online programming, there are a number of changes in the working conditions noted.  These changesin the environment make necessary corresponding changes in the processes related to producing and checkingout programs.  In the main, it it not the programming language itself which must be changed toprovide a facility for the online user; it is the system surrounding the programming language.  In thispaper the online environment and its effect on programming are discussed. | Schwartz, J. I.
1459 | Requirements for Real-Time Languages | Real-time languages have different requirementsfrom other programming languages because of the special nature of their applications, the environmentin which their object programs are executed and the environment in which they may be compiled.  Itmay not be the language extensions that ultimately advance developments in the field.  Progress may be madeby attacking the special compiling and executing system problems that must be solved. | Opler, A.
1460 | Evolution of the Meta-Assembly Program | A generalized assembler called a "meta-assembler"is described.  The meta-assembler is defined and factors which contributed to its evolution are presented. How a meta-assembler is made to function as an assembly program is described. Finally, the implicationof meta-assemblers on compiler design is discussed. | Ferguson, D. E.
1461 | Discussion Summary on Operating Systems
1462 | Multilevel Operating Systems | The Basic software for all newer computersis built on the well-established need for standard operating systems. This implies that all applications-nomatter how large, complex or time consuming-must operate under (or, more precisely, on top of) the standardsystem.  Large applications require supervisory monitors which handle problems similar to those ofthe operating systems, but at a different level.  Sometimes, still a third or even a fourth such levelis required or desirable.  This leads naturally to the concept of multilevel systems-similar vertically,but different horizontally.  Proper division of responsibility between levels leads to greater efficiency andless logical complexity, while actually enhancing capability. | Orchard-Hays, W.
1463 | More on Extensible Machines | One of the most salient characteristics of extensiblemachines (EM) is the facility for providing system control over program-to-program and program-to-datalinkage (e.g., address connection).  It is the intent of this paper to expand and clarify the remarksconcerning program-to-program and program-to-data linkage that were embodied in the authors' previouspaper on the EM concepts, and to, finally, trace the employment of linkage mechanisms throughvarious levels of programming languages. | Leonard, G. F.Goodroe, J. R.
1464 | An ALGOL Compiler: Construction and Usein Relation to an Elaborate Operating System | An ALGOL translator has been prepared and integratedinto the IBSYS Operating System.  Assembly and "go" features of IBSYS permit immediate execution withoptional listings, decks and debugging information.  Using the chain feature of IBSYS, links written inMAP or FORTRAN as well as ALGOL may be called by the ALGOL main program.  In addition, procedures codedin MAP may be included in any ALGOL program.  Although assembly plus loading time exceeds compilationtime, the total time is satisfactory and the user gets ease and facility which are fully compensating. | Boussard, J. C.
1465 | Program Translation Viewed as a General Data Processing Problem | Efficiency dictates that the overall effectivenessof a compiler be increased by all means available.  For a compiler to have a substantial usefullife it needs a clear logical structure, reliability and sound data processing techniques.  A compiler mustbe based on fixed conventions to preserve efficiency and reliability; empty options and default conventionsviolate this dictum.  Use of structure to associate various parts of a program and economy offeatures promote clarity and reliability. | Naur, P.
1466 | Discussion Summary on Graphical Languages
1467 | A Graphical ServiceSystem With Variable Syntax | Man-machine interaction in many fields of endeavorshould be greatly facilitated in the near future through the use of interactive graphical languages. To provide a variety of display scope communication procedures, a Graphic Service system which functionsas a generalized graphical language translator, is being developed to aid the definition aswell as the use of new graphical languages. | Roberts, L. G.
1468 | Syntax-Directed Interpretation of Classes of Pictures | A descriptive scheme for classes of pictures basedon labeling techniques using parallel processing algorithms was proposed by the author some years ago. Since then much work has been done in applying this to bubble chamber pictures.  The parallel processingsimulator, originally written for an IBM 7094system, has now been rewritten for a CDC 3600 system. This paper descriptive models by considering their specific application to bubble chamber pictures.  Howthe description generated in this phase can be embedded in a larger "conversation" program is explainedby means of a certain specific example that has been worked out.  A partial generative grammar for"handwritten" English letters is given, as are also a few computer-generated outputs using this grammarand the parallel processing simulator mentioned earlier. | Narasimhan, R.
1469 | The Next 700 Programming Languages  | A family of unimplemented computing languagesis described that is intended to span differences of application area by a unified framework.  This frameworkdictates the rules about the uses of user-coined names, and the conventions about characterizing functionalrelationships.  Within this framework the design of a specific language splits into two independentparts.  One is the choice of written appearances of programs (or more generally, their physical representation). The other is the choice of the abstract entities (such as numbers, character-strings, listsof them, functional relations among them) that can be referred to in the language.  The system is biasedtowards "expressions" rather than "statements."  It includes a nonprocedural(purely functional) subsystemthat aims to expand the class of users' needs that can be met by a single print-instruction, without sacrificingthe important properties that make conventional right-hand-side expressions easy to construct and understand. | Landin, P. J.
1470 | The Structure of Programming Languages | The following are identified as major componentsof every programming language: (1) the elementary program statement, (2) mechanisms for linking elementarystatements together, (3) the means by which a program can obtain data inputs.  Several alternativeforms of each of these components are described, compared and evaluated.  Many examples, frequently fromlist processing languages, illustrate the forms described.  Elementary program statements usually takethe form of commands, requirements, or implicit specifications.  A command is an imperative statementthat commands the action to be taken.  A requirement describes the effect to be achieved without saying anythingabout the actions to be taken.  An implicit specification is similar to a requirement, but the programmermust understand what actions will be taken to achieve the desired effect.  Subroutines may be enteredexplicitly, by execute call, or by function composition.  Explicitly called subroutines generallyrequire special linkage conventions.  An execute subroutine call is syntactically indistinguishable froma basic instruction of the programming language.  Function composition is a convenient alternative tothe explicit call.  The three principal ways of getting inputs for routines are (1) by referring tothe data itself, (2) by referring to the data by a "name", and (3) by referring to it implicitly by meansof variables or functions.  Names are useful entry points into permanent data structures, but canbe error-causing distractions in other contexts. The author discusses advantages, disadvantages, and factorsinfluencing the choice of a form of component for a language.   He concludes by suggesting the evolutionof programming languages toward one which will permit all the most convenient ways of structuringprograms, organizing systems, and referencing data. | Raphael, B.
1471 | Programming Semantics for Multiprogrammed computations | The semantics are defined for a number of meta-instructionswhich perform operation essential to the writing of programs in multiprogrammed computersystems.  These meta-instructions relate to parallel processing, protection of separate computations, programdebugging, and the sharing among users of memory segments and other computing objects, the names of whichare hierarchically structured.  The language sophistication contemplated is midway between an assemblylanguage and an advanced algebraic language. | Dennis,J. B.VanHorn, E. C.
1472 | Description of a High Capacity, FastTurnaround University Computing Center | The operating system for the UNIVAC 1107 at CaseInstitute is reviewed.  The system is of interest because of the low turnaround times achieved, the highthroughput achieved and the lack of an operating staff.  Turnaround times below 5 minutes and job volumeabove 75,000 per quarter year one reported. | Lynch, W.C.
1473 | The Stability of the Fourth Order Runge-KuttaMethod for the Solution of Systems of Differential Equations | The problem of the region of stability of thefourth order-Runge-Kutta method for the solution of systems of differential equations is studied.  Thisregion can be characterized by means of linear transformation but can not be given in a closed form. In the paper, this region is determined by the electronic digital computer Z22. | Karim, A. I. A.
1474 | Tests of Probabilistic Models for Propagation of Roundoff Errors | In any prolonged computation it is generallyassumed that the accumulated effect of roundoff errors is in some sense statistical.  The purpose of thispaper is to give precise descriptions of certain probabilistic models for roundoff error, and then todescribe a series of experiments for testing the validity of these models.  It is concluded that the modelsare in general very good.  Discrepancies are both rare and mild.  The test techniques can also beused to experiment with various types of special arithmetic. | Hull, T. E.Swenson, J. R.
1475 | Dribble Posting a Master File | Many business applications employ sequentialmagnetic tape rather than random-access storage techniques to process a very small number of transactionsagainst a voluminous master file.  In such situations, it may prove economical to avoid creating anew master file during each updating run by producing instead a dribble ledger containing only those masterfile accounts which have experienced activity. | Head, R. V.
1476 | Control Procedures for Data Communication-An ASA Progress Report | Sectional Committee X.3 of the American StandardsAssociation, has charged one of its task groups, X3.3.4, with the responsibility to "Define and specifyfunctional control requirements and characteristics governing the operation of digital data generating andreceiving systems interconnected by communication system."  This effort is primarily directed toward systemsemploying the American Standard Code for Information Interchange (ASCII).  This paper represents a progressreport on the work of this group toward a proposal for national and international standardization in thefield of control procedures.  It describes both the old and new work of the task group.  The new workis presented in detail, while the work that has been presented in earlier papers ["Control Procedures forData Communication," Task Group document X3.3.4/44, May 1964: "Transparent-Mode Control Procedures for DataCommunication," Task Group document X3.3.4/58, December, 1964: Comm. ACM 8 (Apr. 1965), 203-206; "ControlProcedures for Data Communications," Task Group document X3.3.4/60, March, 1965] is retained herein summary form.  Many of the concepts and principles described herein have been submitted to the InternationalOrganization for Standardization via earlier papers and are now embodied in working papers of that organization. 
1477 | EULER: A Generalization of ALGOL, and its Formal Definition: Part II* | Wirth, N.Weber, H.
1478 | Exponential Curve Fit (Algorithm 275 [E2]) | Deily, G. R.
1479 | Constrained Exponential Curve Fit (Algorithm 276 [E2]) | Deily, G. R.
1480 | Computation of Chebyshev Series Coefficients (Algorithm 277[C6]) | Smith, L. B.
1481 | Graph Plotter (Algorithm 278 [J6]) | Lloyd, P.
1482 | BUGSYS: A Programming System for Picture Processing-Not for Debugging | BUGSYS is a picture processing and measuringsystem that depends upon a pictorial input to the computer's memory.  BUGSYS can be used for manytypes of applications.  In particular, the authors have used the system for the analysis of linear graphs. The main concept of the system is the use of a collection of programmable pointers, whichare visualized as a family of "bugs." | Ledley, R. S.Jacobsen, J.Belson, M.
1483 | A Comparison of the FORTRAN LanguageImplementation for Several Computers | A feature-by-feature comparison is made of fivedifferent implementations of FORTRAN IV representing three different manufacturers.  A table is constructedshowing, where possible, the use of each feature in each implementation.  Only those items which aredifferent from, or have been added to FORTRAN II are shown. | Wright, D. L.
1484 | A Language for Describing the Functions of Synchronous Systems*  | Before the design of a system is started, theexact function desired of it should be specified.  It is suggested that a computer-oriented language beused for this purpose.  The inadequacies of the standard programming languages for the description ofsystems are discussed, and a dialect of ALGOL which is suitable for describing synchronous systems is introduced. These descriptions can be used for simulation and automatic design of the system described, inaddition to communicating system specifications. | Parnas, D. L.
1485 | The Structure of Programming Languages | In this paper the major components of everyprogramming language are identified as: (1) the elementary program statement, (2) mechanisms for linkingelementary statements together, (3) the means by which a program can obtain data inputs.  Severalalternative forms of each of these components are also described, compared and evaluated.  Many examples,frequently from list processing languages, illustrate the forms described.  The advantages, disadvantages andfactors influencing the choice of a form of component for a language are discussed, and the paper concludeswith the suggestion that programming languages evolve toward one which will permit all the most convenientways of structuring programs, organizing systems and referencing data. | Raphael, B.
1486 | A Reprogramming Machine | In this paper a description is given of a modelprogramming system which is directed by a programming language and has a library for storing the user's items. Rules are given for transforming programs written in the language and for rearranging the items in thelibrary so that they share their common parts.  Some speculations are made about how the mechanicaldetection of common parts or patterns of library items could help a user to solve his problems, and aboutthe relationships between the behavior of the reprogramming machine and human intelligent behavior. | Burge, W. H.
1487 | ELIZA-A Computer Program For the Study ofNaturalLanguage Communication Between Man And Machine | ELIZA is a program operating within the MACtime-sharing system at MIT which makes certain kinds of natural language conversation between man andcomputer possible.  Input sentences are analyzed on the basis of decomposition rules which are triggeredby key words appearing in the input text.  Responses are generated by reassembly rules associated with selecteddecomposition rules.  the fundamental technical problems with which ELIZA is concerned are: (1)theidentification of key words, (2) the discovery of minimal context, (3) the choice of appropriate transformations,(4) generation of responses in the absence of key words, and (5) the provision of an editing capabilityfor ELIZA "scripts".  A discussion of some psychological issues relevant to the ELIZA approach aswell as of future developments concludes the paper. | Weizenbaum, J.
1488 | Programming Decision Tables in FORTRAN, COBOL or ALGOL | A simple broad-based approach for programmingdecision tables in FORTRAN or COBOL is developed and presented.  With inputs in standard form, as definedin the paper, the programming of any decision table can be done with one or two FORTRAN statements,or with two COBOL statements, if the COMPUTE verb is available in the COBOL processor.  It is  shownthat the method is applicable even when there are more than two mutually exclusive states of one, two ormore table conditions.  It is further shown that multi-state conditions in decision tables can oftensimplify the programming.  The method outlined has the further advantage that all possible combinationsof conditions are considered.  It is shown that the suggested procedure is easily implemented in ALGOL. | Veinott, C. G.
1489 | Data, Documentation and Decision Tables | In business data processing systems, it isnecessary to be able to define and document data, files, programs and decision rules in a way that adequatelyrepresents both (1) their changing information content, and (2) their continuous interaction.  Tabulardescription makes this possible, being notably objective, through and economical in cost and time whensystems must be analyzed and programs prepared or modified.  To show how quickly tabular techniquesmake an unfamiliar system manageable, a detailed example and a self-test are provided. | Fisher, D. L.
1490 | One Inch Perforated Paper Tape for InformationInterchange (Proposed American Standard)
1491 | EULER: A Generalization ALGOL, and its Formal Definition: Part I* | A method for defining programming languages isdeveloped which introduces a rigorous relationship between structure and meaning.  The structure of alanguage is defined by a phrase structure syntax, the meaning in terms of the effects which the executionof a sequence of interpretation rules exerts upon a fixed set of variables, called the Environment. There exists a one-to-one correspondence between syntactic rules and interpretation rules is determined bythe sequence of corresponding syntactic reductions which constitute a parse.  The individual interpretationrules are explained in terms of an elementary an d obvious algorithmic notation.  A constructivemethod for evaluating a text is provided, and for certain decidable classes of languages their unambiguityis proved.  As an example, a generalization of ALGOL is described in full detail to demonstrate thatconcepts like block-structure, procedures, parameters, etc. can be defined adequately and precisely by this method. | Wirth, N.Weber, H.
1492 | Serrev (Algorithm 273 [C1]) | Thacher Jr., H. C.
1493 | Generation of Hilbert Derived Test Matrix (Algorithm 274 [F1]) | Boothroyd, J.
1494 | Complete Elliptic Integral of the Second Kind (Algorithm 56 [S21]) | Larssen, G. M.
1495 | Solution of Transcendental Equations by Series Reversion | An algorithm is developed for expressing thesolution Y, of the equation F(Y) = G(X) as a power series in (X - X0) when f and g are given as power series,andthe root Y0, is known at Y=X0.  The algorithm is illustrated for the equation Y^Y = X, i.e., (1+y)*ln(1+y) = ln(1+x). | Thacher Jr., H. C.
1496 | A Formal Semantics for Computer Languagesand its Application In a Compiler-Compiler | A semantic meta-language has been developedfor representing the meanings of statements in a large class of computer languages.  This meta-languagehas been the basis for construction of an efficient, functioning compiler-compiler.  An informal discussionof the meta-language based on the example of a complete translator for a small language is presented. | Feldman, J. A.
1497 | On the Normalization Requirement ofDivisor in Divide- and- Correct Methods | This paper presents an analysis on the normalizationrequirement of the divisor in a divide-and-correct method.  This analysis is made subject to the conditionthat not more than one correction is required to obtain the true quotient character, from the trialestimate got from the division of a two-precision segment of every partial remainder by a suitably roundedsingle-precision divisor.  (This segmented division is denoted here as a (2, 1) precision basic division.) It is found that the normalization requirement could be narrowed down to a smaller range of divisors,provided the magnitude of the character next to the leading character of the divisor is known.  If,however, the normalization is to be eliminated one has to choose proper higher precision segments of operandsfor the basic division.  Also considered is the possibility of eliminating the normalization by anincrease on the number of corrections on the quotient estimate got from a (2, 1) precision basic division. It is shown that such a scheme is economical only for small radices. | Krishnamurthy, E. V.Nandi, S. K.
1498 | The ALCOR Illinois 7090/7094 Post Mortem Dump | A dump technique for programs written in ALGOL60 is described.  This technique provides an intelligible analysis of an unsuccessful computationprocess in terms of the original source program. | Bayer, R.Gries, D.Paul, M.Wiehle, H. R.
1499 | Chebyschev Curve-Fit (revised) (Algorithm 318 [E2]) | Boothroyd, J.
1500 | Chebyschev Curve-Fit (Algorithm 91 [E2]) | Boothroyd, J.
1501 | Eigenvectors of a 2n x 2n Matrix | It has been known that the eigenvalues of acertain 2n x 2n matrix can be obtained by use of two smaller matrices of order n which can be easilyconstructed.  An algorithm is given to obtain the eigenvectors of the 2n x 2n matrix by use ofthe eigenvectors of the smaller matrices. | Charmonman, S.
1502 | An Online Editor | An online, interactive system for test editingis described in detail, with remarks on the theoretical and experimental justification for its form. Emphasis throughout the system is on providing maximum convenience and power for the user.  Notablefeatures are its ability to handle any piece of text, the content-searching facility, and the character-by-characterediting operations.  The editor can be programmed to a limited extent. | Deutsch, L. P.Lampson, B. W.
1503 | A SIMSCRIPT-FORTRAN Case Study | Two programs for a vehicle dispatching model,one written in 7040 SIMSCRIPT and the other in 7040 FORTRAN IV are compared. The comparison is madein terms of basic program design decisions, storage requirements, computer time used, and the ease of makingchanges.  In the SIMSCRIPT program, the primary design considerations center around the choice of modelvariables, model changing events, and model testing.  In the FORTRAN program, basic design problems relateto the representation of the passage of time, the allocation of storage, and the organization of inputdata.  The comparison of these differently designed programs shows that the SIMSCRIPT program uses more computerstorage and more computer time, but requires fewer program changes to introduce model revisions. | Weinert, A. E.
1504 | Algorithms for Finding a Fundamental Setof Cycles for an Undirected Linear Graph | Given the adjacency matrix of the graph, the algorithmpresented in this paper finds a spanning tree and then constructs the set of fundamental cycles. Our algorithm is slower than an algorithm presented by Welch by a ratio of N/3 (N is the number of nodes)but requires less storage.  For graphs with a large number of nodes and edges, when storage is limited ouralgorithm is superior to Welch's; however, when the graphs are small, or machine storage is very large,Welch's algorithm is superior.  Timing estimates and storage requirements for both methods are presented. | Gotlieb, C. C.Corneil, D. G.
1505 | A System Organization for Resource Allocation  | This paper introduces a system for resource managementusing the concepts of "process," facility," and "event."  Except for the processor no attempt hasbeen made to give serious suggestions for the policy to be followed for resource allocation.  However, a basicframework is provided in which a system analyst can express solutions to resource management problems. The paper is divided into a tutorial presentation, a description of the system primitives, and a small collectionof examples of the use of the primitives. | Dahm, D. M.Gerbstadt, F. H.Pacelli, M. M.
1506 | The LACONIQ Monitor: Time Sharing for Online Dialogues | The LACONIQ (Laboratory Computer Online Inquiry)Monitor was developed primarily to support non-numerical applications such as retrieval from verylarge files by means of a "dialogue" between a system user and a retrieval application.  The monitorwas designed so that it could work with a small computer (an IBM System 360/30).  Therefore techniquesfor resource allocation were important.  For this reason the use of core storage, computational facilities,and input-output were all scheduled.  An unusual feature of the system is that it is event-driven ratherthan clock-driven.  The program segments called into execution by the remote CRT consoles are invariablyrun to completion rather than "rolled-out" to be brought back at a later time. | Drew, D. L.
1507 | A Multiprogramming Environment for Online Data Acquis ition and Analysis | An experimental system for acquis ition and analysisof large bodies of data derived from scientific experiments is described.  Its architecture and implementationis largely based on certain objectives and characteristics of a general data analysis scheme. Early applications have been oriented towards the investigation of data obtained in biological research. Some of the problems encountered by the chosen approach are discussed. | Lockemann, P. C.Knutsen, W. D.
1508 | Magnetic Tape Labels for Information Interchange (Proposed USA Standard)
1509 | Recorded Magnetic Tape for Information Interchange(200 CPI, NRZI) (Proposed USA Standard)
1510 | Finding a Solution of N Functional Equationsin N Unknown (Algorithm 314 [C5]) | Dulley, D.B.Pitteway, L. V.
1511 | The Damped Taylor's Series Method for Minimizinga Sum of Squares and for Solving Systems of Nonlinear Equations | Spath, H.
1512 | Solution of Simultaneous Non-Linear Equations (Algorithm 316[C5]) | Brown, K. M.
1513 | PERMUTATION (Algorithm 317 [G6]) | Robinson, C. L.
1514 | On the Expected Gain From Adjust ing Matched Term Retrieval Systems | A file adjustment procedure based on maximizingthe Bayes expected gain proposed for matched term retrieval systems.  The expected gain and its probabilitydistribution are derived as a function of: (1) the prior proportion of omitted terms, and (2) thecoefficient of separation between two distributions corresponding to values of an adjustment statistic.  Anexample evaluates the gain parameters for a typical information retrieval system. | Shumway, R. H.
1515 | A Computer System for Inference Execution and Data Retrieval | This paper presents a RAND project concernedwith the use of computers as assistants in the logical analysis of large collections of factual data. A system called Relational Data File was developed for this purpose.  The Relational Data File is brieflydetailed and problems arising from its implementation are discussed. | Levien, R. E.
1516 | Automatic Data Compression | The "information explosion" noted in recentyears makes it essential that storage requirements for all information be kept to a minimum.  A fully automaticand rapid three-part compressor which can be used with "any" body of information to greatly reduceslow external storage requirements and to increase the rate of information transmission through a computeris described in this paper.  The system will also automatically decode the compressed informationon an item-by-item basis when it is required.  The three component compressors, which can be used separatelyto accomplish their specific tasks, are discussed: NUPAK for the automatic compression of numerical data, ANPAKfor the automatic compression of "any" information, and IOPAK for further compression of information to be stored on tape or cards. | Marron, B. A.DeMaine, P. A. D.
1517 | Methods for Analyzing Data from Computer Simulation Experiments | This paper addresses itself to the problem ofanalyzing data generated by computer simulations of economic systems.  We first turn to a hypothetical firm,whose operation is represented by  single-channel, multistation queueing model.  The firm seeks to maximizetotal expected profit for the coming period by selecting one of five operating plans, where eachplan incorporates a certain marketing strategy, an allocation of productive inputs, and a total cost. The results of the simulated activity under each plan are subjected to an F-test, two multiple comparisonmethods, and a multiple ranking method.  We illustrate, compare, and evaluate these techniques. The paper adopts the position that the particular technique of analysis (possibly not any one of the above)chosen by the experimenter should be an expression of his experimental objective: The F-test tests the homogeneityof the plans; multiple comparison methods quantify their differences; and multiple ranking methodsdirectly identify the one best plan or best plans. | Naylor, T. H.Wertz, K.Wonnacott, T. H.
1518 | An Experimental Model of System/360 | The problem of predicting the performance ofmodern computer systems is formidable.  One general technique which can ease this problem is macroscopic simulation. This paper reports on the applicability of that technique to System/360.  The paper describesan experimental model of System/360-its hardware, software, and its environment.  The measures of system performanceproduced by the model consist of statistics relating to turnaround time, throughput, hardware utilization,software utilization, and queueing processes.  The model is mechanized in SIMSCRIPT and consists ofsome 1750 statements.  An auxiliary programs, the Job Generator, creates automatically the propertiesof System/360 jobs that get simulated. | Katz, J. H.
1519 | GEORGE 3-A General Purpose Time Sharing and Operating System | An Operating System is described which willrun on a wide variety of configurations of the I.C.T. 1900, and can handle a large number of online consoleusers while at the same time running several off line (background) jobs.  The system is not orientedtowards either mode and can be either a batch processing system (such as the ATLAS Supervisor, IBSYS,or GECOS), or a multiaccess system (resembling, to the user, CTSS or MULTICS), or both simultaneously,depending on the installation, which can adjust the Schedulers.  Both online users and off line jobs usea common Command Language.  The system includes a Multilevel device-independent File Store. | Oestreicher, M. D.Bailey, M. J.Strauss, J. I.
1520 | Absolute Value and Square Root of a Complex Number (Algorithm 312 [A2]) | Friedland, P.
1521 | Multi-Dimensional Partition Generator (Algorithm 313 [A1]) | Bratley, P.McKay, J. K. S.
1522 | Chebyschev Quadrature (Algorithm 279 [D1]) | Hillstrom, K.
1523 | SHARER, a Time Sharing System for the CDC 6600 | A time sharing system embedded within thestandard batch processing system for the CDC 6600 is described.  The system is general purpose and file-based,providing facilities for file input, manipulation, editing, compilation, and conversational execution. It uses a simple scheme for system extension for a machine with only one relocation and memory bound register. No attempt was made to use reentrant code, or to simulate segmentation or paging.  Implementationtime was approximately six man-years, with the majority of the code being written in FORTRAN. | Harrison, M. C.Schwartz, J. T.
1524 | A Stopping Criterion for Polynomial Root Finding | When searching for the root of a polynomial,it is generally difficult to know just when to accept a number as an adequate approximation to the root. In this paper an algorithm is presented which allows one to terminate the iteration process on thebasis of calculated bounds for the roundoff error which occurs in evaluating the polynomial.  This stoppingcriterion has been tested on numerous examples and has been found to serve as a satisfactory meansfor accepting a complex number as a zero of a real polynomial. | Adams, D. A.
1525 | On Computing The Fast Fourier Transform | Cooley and Tukey have proposed a fast algorithmfor computing complex Fourier transform and have shown major time savings in using it to computelarge transforms on a digital computer.  With n a power of two, computing time for this algorithm isproportional to n log2 n, a major improvement over other methods with computing time proportional to n^2. In this paper, the fast Fourier transform algorithm is briefly reviewed and fast difference equation methodsfor accurately computing the needed trigonometric function values are given.  The problem of computinga large Fourier transform on a system with virtual memory is considered, and a solution is proposed.  Thismethod has been used to compute complex Fourier transforms of size n = 2^16 on a computer with 2^15words of core storage; this exceeds by a factor of eight the maximum radix two transform size with fixedallocation of this amount of core storage.  The method has also been used to compute large mixed radixtransforms.  A scaling plan for computing the fast Fourier transform with fixed-point arithmetic is also given. | Singleton, R. C.
1526 | Multiprogramming under a Page on Demand Strategy | A model of multiprogramming for a particularcomputer system using a page on demand strategy is developed.  Analysis of this model is used to predictperformance (measured by the average usage of the CPU) when user programs are typical of those arisingfrom an interactive time sharing environment.  The effect of several hardware modifications is alsoanalyzed.  A parameter, readily calculated from the hardware characteristics and the program statistics,is proposed for gauging the effect of multiprogramming. | Smith, J. L.
1527 | A Grammar Base Question Answering Procedure | The subject of this paper is a procedure forthe automatic retrieval of certain segments of stored information, either explicitly or implicitly represented,through questions posed in natural language sentences.  This procedure makes use of a sentence recognitiondevice for the class of grammars which will correctly decide between the grammatical and ungrammaticalsentences of a natural language.  It is possible to make use of a recognition device of thissort for the following reason: Much data is fully expressible as a set of sentences in a natural language,a set which can be exhaustively and exclusively generated by a grammar.  Based upon the rules of this grammar,a sentence recognizer will evaluate sentences, questions in the normal situation.  Since the recognitionfunction succeeds just in case the posed question is drawn from the set of sentences expressing the data,or, more correctly, is grammatical in terms of the grammar for this set of sentences, sentence recognitionitself is a procedure for retrieving information.  When the recognition function succeeds, itsvalue represents the requested information. | Rosenbaum, P.
1528 | Three Fonts of Computer Drawn Letters | Detailed descriptions are given for three fontsof letters.  Letter shapes are entirely described by numbers.  The basic vectors are in a general formso the fonts may be easily drawn on a variety of computers and cathode-ray tubes.  The fonts include bothupper and lower case Roman letters, mathematical signs, and upper and lower case Greek letters.  Designof the fonts is described.  However, the principal contribution of this paper concerns the fonts themselves. | Mathews, M. V.Lochbaum, C.Moss, J. A.
1529 | Decomposition Programming An Analysis of Matrix Substructure  | A petroleum blending problem was analyzed in orderto compare the primal and primal-dual decomposition algorithms.  In the course of the analysis, a substructurewas discovered which has relevance to the relative performance of the two algorithms and to theirabsolute performance as compared with a standard primal-Simplex solution without decomposition. | Bell, E. J.
1530 | The ML/I Macro Processor | A general purpose macro processor called ML/Iis described.  ML/I has been implemented on the PDP-7 and I.C.T. Atlas 2 computers and is intended as atool to allow users to extend any existing programming language by incorporating new statements and othersyntactic forms of their own choosing and in their own notation.  This allows a complete user-orientedlanguage to be built up with relative ease. | Brown, P. J.
1531 | The Remaining Trouble Spots in ALGOL 60 | This paper lists the ambiguities remainingin the language ALGOL 60, which have been noticed since the publication of the Revised ALGOL 60 Report in 1963. | Knuth, D. E.
1532 | The Hardware-Software Complementarity | Oettinger, A. G.
1533 | A Marovian Model of the University of Michigan Executive System | A mathematical model of a computer's executivesystem is postulated and its parameters estimated with the aid of extensive data on the system's operation. Although simplifying assumptions are made, the results predicted by the model agree reasonable wellwith actual results.  The model is used to study the effects of changes in the executive system andin one of its compilers.  Further applications of the model are discussed. | Foley, J. D.
1534 | DAD, The C.S.I.R.O. Operating System | The design and implementation of the C.S.I.R.O.operating system, DAD, is described in detail.  This system is designed for the Control Data 3600 usinga large drum backing store and is intended to allow the integration of a remote console (display) subsysteminto a conventional job stack environment.  The use of the drums, the buffering of input and outputon slow peripherals, and the execution of normal job stack work are described.  The display subsystemis described only as it integrates into the rest of the system.  The techniques found useful in the developmentof DAD are given, and an assessment is made of the validity of various design decisions.  Performancefigures based on several months of operation are tabulated. | Austin, B. J.Holden, T. S.Hudson, R. H.
1535 | A Comment on Index Register Allocation | A technique is presented to reduce the enumerationrequired by a known procedure for optimal index register allocation in straight-line programs. This technique is based on the construction of a link diagram, which shows at any step the future occurrencesof indexes which must be loaded into index registers.  This diagram determines in advance the requiredregister configuration at certain steps of the program, so that the program is subdivided into separateportions to which the allocation procedure may be applied independently. | Luccio, F.
1536 | Dynamic Computation of Derivatives | It is shown how Wengert's procedure for computationof derivatives can be implemented conveniently by use of compiler-generated complex addition, subtraction,and linkage to complex arithmetic subroutines. Evaluation of a function and derivative proceed inparallel, as in Wengert's procedure, but with the "imaginary" parts of variables declared complex bearingthe values of the derivatives of the real parts.  This technique provides a simple way to compute thederivatives of a function, without the need for deriving and programming the evaluation ofexplicit formulas for the derivatives. | Lesk, A. M.
1537 | Prime Number Generator 1 (Algorithm 310 [A1]) | Chartres, B. A.
1538 | Prime Number Generator 2 (Algorithm 311 [A1]) | Chartres, B. A.
1539 | Prime Number Generator 1; Prime Number Generator2 (Algorithm 35[A1]; Algorithm 310[A1]; Algorithm 311[A1]) | Chartres, B. A.
1540 | An Algorithm for Class Scheduling With Section Preference | An algorithm for assignment of students to classesin a fixed time schedule that allows students to give a preference for sections within courses is given. If consistent with the objective of balanced sections, these preferences will be honored.  The algorithmis more stochastic than Monte Carlo in nature.  Results are given that compare it to a nonpreference assignment algorithm. | Busam, V. A.
1541 | A Language for Modeling and Simulating Dynamic Systems | The general objective of this language isto facilitate both the modeling and experimental aspects of simulation studies.  The ability to representsystems containing highly interactive processes is an essential feature.  The nature of the language,and the role of the process concept, is presented by means of an extended example. | Parente, R. J.Krasnow, H. S.
1542 | A Microprogrammed Implementation of EULER on IBM System/360 Model 30 | An experimental processing system for the algorithmiclanguage EULER has been implemented in microprogramming on an IBM System/360 Model 30 using asecond Read-Only Storage unit.  The system consists of a microprogrammed compiler and a microprogrammedString Language Interpreter, and of an I/O control program written in 360 machine language.  The system is describedand results are given in terms of microprogram and main storage space required and compiler and interpreterperformance obtained.  The role of microprogramming is stressed, which opens a new dimension in the processingof interpretive code.  The structure and content of a higher level language can be matched by an appropriateinterpretive language which can be executed efficiently by microprograms on existing computer hardware. | Weber, H.
1543 | Computer Formulation of the Equations of Motion Using Tensor Notation | A means is described for extending the areaof application of digital computers beyond the numerical data processing stage and reducing the need forhuman participation in the formulation of certain types of computer problems.  By the use of tensor calculusand a computer language designed to facilitate symbolic mathematical computation, a method has beendevised whereby a digital computer can be used to do non-numeric work, that is, symbolic algebraic manipulationand differentiation. To illustrate the techniques involved, a digital computer has been usedto derive the equations of motion of a point mass in a general orthogonal curvilinear coordinate system. Since this operation involves a formulation in terms of first- and second-order differential coefficients,it provides a good demonstration of a computer's capability to do non-numeric work and to assist in theformulation process which normally precedes the numerical data processing stage.  Moreover, this particularproblem serves to illustrate the advantages of the mathematical techniques employed.  With the programprepared for this purpose the computer will derive the equations of motion in any coordinate systemrequested by the user.   Results are presented for the following coordinate systems: cylindricalpolar, spherical polar, and prolate spheroidal. | Howard, J. C.
1544 | Tele-CUPL: A Telephone Time Sharing System | A general purpose, remote access, computing systemis described, that employs twelve-key keyboard telephones as terminals.  Audio output is provided directlyto the telephone terminals, but the system will normally be used in conjunction with remotely locatedhigh speed printing devices.  The system is a compatible extension of an existing batch processingsystem.  A significant element of the system is a scheme for transmitting alphanumeric information by singlestrokes on a numeric keyboard.  The programmed scanner uses context to eliminate the ambiguity in transmission. | Conway, R. W.Morgan, H. L.
1545 | Legal Safeguards to Insure Privacy in a Computer Society | Westin, A. F.
1546 | Toward Standards for Handwritten Zero and Oh | Bemer, R. W.
1547 | Gamma Function with Arbitrary Precision (Algorithm 309 [S14]) | Filho, A. M.S.Schwachheim, G.
1548 | Parsing of Decision Tables | Reduction in the size of decision tables can beaccomplished by several techniques.  The techniques considered in this paper are on the parsing of decisiontables with regard to horizontal and vertical data structures, job identity, hardware and job priorities,and context relationships.  Such parsing rests upon some conventions for the linkage of decision tables. | Chapin, N.
1549 | An Efficient Machine-Independent Procedure forGarbage Collection in Various List Structures | A method for returning registers to the freelist is an essential part of any list processing system.  In this paper, past solutions of the recoveryproblem are reviewed and compared.  A new algorithm is presented which offers significant advantages of speedand storage utilization.  The routine for implementing this algorithm can be written in the list language withwhich it is to be used, thus insuring a degree of machine independence.  Finally, the application of thealgorithm to a number of different list structures appearing in the literature is indicated. | Schorr, H.Waite, W. M.
1550 | A Comparison of Batch Processing and Instant Turnaround | A study of the programming efforts of studentsin an introductory programming course is presented and the effects of having instant turnaround (a few minutes)as opposed to conventional batch processing with turnaround times of a few hours are examined.  Amongthe items compared are the number of computer runs per trip to the computation center, program preparationtime, keypunching time, debugging time, number of runs, and elapsed time from the first runto the last run on each problem.  Even though the results are influenced by the fact that "bonus points"were given for completion of a programming problemin less than a specified number of runs, thereis evidence to support "Instant" over "Batch". | Smith, L. B.
1551 | On Compiling Algorithms for Arithmetic Expressions | This paper deals with algorithms concerning arithmeticexpressions used in a FORTRAN IV compiler for a HITAC-5020 computer having n accumulators.  Thealgorithms generate an object code which minimizes the frequency of storing and recovering the partial resultsof the arithmetic expressions in cases where there are several accumulators. | Nakata, I.
1552 | The AED Free Storage Package | The most fundamental underlying problem in sophisticatedsoftware systems involving elaborate, changing data structure is dynamic storage allocationfor flexible problem modeling.  The Free Storage Package of the AED-1 Compiler Systems allows blocksof available storage to be obtained and returned for reuse.  The total available space is partitionedinto a hierarchy of free storage zones, each of which has its own characteristics.  Blocks may be ofany size, and special provisions allow efficient handling of selected sizes, control of shattering andgarbage collection, and sharing of physical space between zones.  The routines of the package performhigh level functions automatically, but also allow access and control of fine internal details as well. | Ross, D. T.
1553 | Contextual Understanding by Computers | A further development of a computer program(ELIZA) capable of conversing in natural language is discussed.  The importance of context to both humanand machine understanding is stressed.  It is argued that the adequacy of the level of understandingachieved in a particular conversation depends on the purpose of that conversation, and that absoluteunderstanding on the part of either humans or machines is impossible. | Weizenbaum, J.
1554 | A Computer Technique for Displaying n-Dimensional Hyperobjects | A digital computer and automatic plotter havebeen used to generate three-dimensional stereoscopic movies of the three-dimensional parallel and perspectiveprojections of four-dimensional hyperobjects rotating in four-dimensional space.  The observed projectionsand their motions were a direct extensionof three-dimensional experience, but no profound "feeling"or insight into the fourth spatial dimension was obtained.  The technique can be generalized to n-dimensionsand applied to any n-dimensional hyperobject or hypersurface. | Noll, A. M.
1555 | Symmetric Polynomials (Algorithm 305 [C1]) | Bratley, P.McKay, J. K. S.
1556 | Permutations with Repetitions (Algorithm 306 [G6]) | Bratley, P.
1557 | Symmetric Group Characters (Algorithm 307 [A1]) | McKay, J. K. S.
1558 | Generation of Permutations in Pseudo-LexicographicOrder (Algorithm  [G6]) | Ord-Smith, R. J.
1559 | Permutation Generator; Permutation in LexicographicalOrder; Permute; Generation of Permutations in Lexicographical Order (Algorithm 87[G6]; Algorithm102[G6]; Algorithm 130[G6]; Algorithm 202[G6]) | Ord-Smith, R. J.
1560 | Transport; Transportation Problem (Algorithm 258[H]; Algorithm 293[H]) | Sims, L. S.
1561 | The Mutual Primal-Dual Method (Algorithm 285 [H]) | Spath, H.
1562 | Airy Function (Algorithm 301 [S20]) | Pitteway, M. L. V.
1563 | A Method for Finding Hamilton Paths and Knight's Tours | The use of Warnsdorff's rule for finding aknight's tour is generalized and applied to the problem of finding a Hamilton path in a graph.  A graph-theoreticjustification for the method is given. | Pohl, I.
1564 | Description of Basic Algorithm in DETAB/65 Preprocessor | The basic algorithm for the conversion of decisiontables into COBOL code is contained in thegenerator portion of the DETAB/65 preprocessor.  Thegenerator analyzes a decision table and produces simple COBOL conditional statements.  Core storage issaved by using queueing techniques and extensive indexing and also by outputting the code as it is generated,a line at a time.  The only optimization attempted is the elimination of obviously unnecessarytests on certain conditions in the decision table.  Since the preprocessor and this language associated withit were developed for COBOL users, the preprocessor was written in a modular form in required COBOL-61. | Callahan, M. D.Chapman, A. E.
1565 | A Language-Independent Macro Processor | A macro processor is described which can beused with almost any source language.  It provides all features normally associated with a macro facility,plus the ability to make arbitrary transformations of the argument strings.  The program is used at theBasser Computing Department, University of Sydney, Sydney, Australia, to process text for eight different compilers. | Waite, W. M.
1566 | Optimal Starting Values for Newton-Raphson Calculation of SQRT(x) | The problem of obtaining starting values forthe Newton-Raphson calculation of SQRT(x) on a digital computer is considered.  It is shown that theconventionally used best uniform approximations to SQRT(x) do not provide optimal starting values. The problem of obtaining optimal starting values.  The problem of obtaining optimal starting values isstated, and several basic results are proved.  A table of optimal polynomial starting values is given. | Moursund, D. G.
1567 | On the Representation of Symmetric Polynomials | Relations are given between certain symmetricpolynomials in the light of the theory of the symmetric group.  Such an approach unifies earlier workand lends insight to previously published work by Aaron Booker.  A generalization of Graeffe's root-squaringtechnique for the determination of the roots of a polynomial is suggested. | McKay, J. K. S.
1568 | Plotting a Function of Three Independent Variables | A method is developed for constructing an approximateplot of a function of three independent variables.  The plot is similar to a conventional contourmap except that there are three scales to represent the independent variables.  Scale values of the threeindependent variables are added vectorially, and the value of the function is then read fromthe values associated with nearby contours. | Stineman, R. W.
1569 | Implementing Phrase-Structure Productions in PL/I | A method is described for implementing the productionsof a context-free phrase structure grammar in a PL/I procedure whose structure and statements parallelthe structure and notation of the grammar. | Irwin, L.
1570 | String Processing Techniques | The internal organization of string processingsystems is discussed.  Six techniques for data structures are presented and evaluated on the basis of:(1) creation of strings; (2) examination of strings; and (3) alteration of strings.  Speed of operation, storagerequirements, effect on paging, and programmer convenience are also considered.  One of the techniques,single-word linked blocks, is used in an example demonstrating an implementation of a SNOBOL stringprocessing language on an IBM System/360. | Madnick, S. E.
1571 | A User-Oriented Time-Shared Online System | An existing system and planned additions withinthe Data Processing Laboratory of the Brain Research Institute at UCLA is described.  The systemrepresents an attempt to provide research workers of the Institute with the ability to interact directlywith a highly sophisticated digital computing complex in the most direct and simple fashion possible. It is anticipated that, with the accumulation of experience using the present system, significant advanceswill be possible in the system design through determination of interface parameters between thebiological scientist and the digital computer. | Betyar, L.
1572 | The Simulation of Time sharing Systems | The development of new large scale time-sharingsystems has raised a number of problems for computation center management.  Not only is it necessaryto develop an appropriate hardware configuration for these systems, but appropriate software adjustmentsmust be made.  Unfortunately, these systems often do not respond to changes in the manner that intuitionwould suggest, and there are few guides to assist in the analysis of performance characteristics.  Thedevelopment of a comprehensive simulation model to assist in the investigation of these questions isdescribed in this paper.  The resulting model has a general purpose design and can be used to study avariety of time-sharing systems.  It can also be used to assist in the design and development of new time-sharingalgorithms or techniques.  For the sake of efficiency and greater applicability, the model wasimplemented in a limited FORTRAN subset that is compatible with most FORTRAN IV compilers. The use ofthe simulation is demonstrated by a study of the IBM 360/67 time-sharing system. | Nielsen, N. R.
1573 | An Adaptive Quadrature Procedure withRandom Panel Sizes (Algorithm [D1]) | Gallaher, L. J.
1574 | Normal Curve Integral (Algorithm 304 [S15]) | Hill, I. D.Joyce, S. A.
1575 | Incomplete Beta Ratio (Algorithm 179 [S14]) | Pike, M. C.Hill, I. D.
1576 | Eigenvalues of a Real Symmetric Matrixby the QR Method (Algorithm 253 [F2]) | Welsch, J. H.
1577 | Eigenvalues and Eigenvectors of a Real SymmetricMatrix by the QR Method (Algorithm 254 [F2]) | Welsch, J. H.
1578 | Generalized Least Squares Fit By OrthogonalPolynomials (Algorithm 296 [E2]) | Makinson, G. J.
1579 | Real Error Function, ERF(x) (Algorithm 123 [S15]) | Hill, I. D.Joyce, S. A.
1580 | Error Function-Large X (Algorithm 180 [S15]) | Hill, I. D.Joyce, S. A.
1581 | Complementary Error Function-Large X (Algorithm 181 [S15]) | Hill, I. D.Joyce, S. A.
1582 | GAUSS (Algorithm 209 [S15]) | Hill, I. D.Joyce, S. A.
1583 | Normal Distribution Function (Algorithm 226 [S15]) | Hill, I. D.Joyce, S. A.
1584 | Procedure for the Normal Distribution Functions (Algorithm 272 [S15]) | Hill, I. D.Joyce, S. A.
1585 | Normal Curve Integral (Algorithm 304 [S15]) | Hill, I. D.Joyce, S. A.
1586 | A Generalized Bairstow Algorithm | The Bairstow algorithm is generalized to thecase of a polynomial which is itself a linear combination of polynomials satisfying a three-term recursion. Convergence properties of the method are derived. | Golub, G. H.Robertson, T. N.
1587 | Storage Allocation in a Certain Iterative Process | A method of core storage allocation in a certainiterative process is described and estimates of the machine time required are given.  The method isapplicable to iterative processes in which input data items once chosen are never again needed.  In thismethod the input data is continuously relocated and the space made available apportioned to the outputtables when an overflow occurs.  Some important special cases are considered in which considerable simplification occurs. | Abramowich, J.
1588 | PL/I List Processing | The concepts of list processing have been introducedinto the PL/I language.  With these new facilities, it is possible to write PL/I procedures thatoperate on simple and complex data list organizations.  Most list-processing languages have suffered from theirinability to deal directly with complex data structures and/or from their inability to perform thecomplete range of programming language operations upon the data list structures.  These two problems havebeen eliminated in the list-processing facilities of PL/I.  The basic concepts of list processing andthe philosophy of the PL/I language extensions are discussed.  In addition, several detailed list-processing examples are provided. | Lawson Jr., H. W.
1589 | DIALOG: A Conversational Programming System with a Graphical Orientation | DIALOG is an algebraic language for onlineuse with a graphical input-output console device.  It is a computational aid for the casual user, whichprovides basic facilities for graphical and numeric input and display, online and off line program preparationand storage, and hard copy presentation of results.  Use of the system requires a minimum of experienceor instruction, since the growth of an overlaying system control language has been prevented, and thereare no processor-oriented statements, like variable type or dimension declarations.  Moreover, in the onlinesituation the processor interacts with the graphical keyboard on a character-by-character basis so as torestrict the programmer's choice of input symbols to those which are syntactically correct. DIALOG has beenin daily operation at the IIT Research Institute since February, 1966. | Cameron, S. H.Ewing, D.Liveright, M.
1590 | Pitch Period Determination of Speech Sounds | A computer procedure which determines pitchperiods by the recognition of the peak structure of the speech waveform is described.  Speech sounds weresampled by a microphone and an analog-to-digital converter attached to an interconnected IBM 7090-PDP-1system.  These utterances were recorded at the normal noise level of the computer room but were notband-compressed or phase-distorted in any manner.  A sequence of operations defined on the speech wave selectsa list of points along the waveform as candidates for pitch markers.  These markers are validated byan error detection and correction procedure.About 95 percent of the pitch periods were recognized correctlywithin 1 to 2 times real-time on the IBM 7090. | Reddy, D. R.
1591 | A Model for a Multifunctional Teaching System | A teaching system model that was incorporatedinto an operating system of a large computer is described.  The model transferred control to theoperating system to execute functions other than teaching, and then recovered control in order to resumeteaching.  The teaching system (ABAC-II) was written to run under the operating system (IBSYS) forthe IBM 7044 Graphic System.  Because the teaching system automatically terminated and rescheduled itself,a student studying a course presented at a cathode-ray display terminal could switch readily between studentmode and programmer mode.  During the latter, the full resources of the operating system (language processors,compilers, library and user's programs) were at his disposal.  He could for example, write, assemble,debug, and execute at the terminal a program written in any language processed by the operating system. A course could therefore include text material interleaved with programming problems which the studentcould solve without leaving the terminal.  Exercises in simulation and gaming could also be provided.  Theimplications of a teaching system with this degree of flexibility for industrial and executive trainingas well as academic education are discussed.  In addition, the advantages of this type of system for computerprogramming and operation are also considered. | Engvold, K. J.Hughes, J. L.
1592 | String Similarity and Misspellings | The problem of programming a computer to determinewhether or not a string of characters is a misspelling of a given word was considered.  A numberofalgorithms were evaluated-some proposed by other writers, some by the author.  These techniqueswere tested on a collection of misspellings made by students at various grade levels.  While many ofthe methods were clearly unsatisfactory, some gave as few as 2.1 percent incorrect determinations. | Alberga, C. N.
1593 | A Simple Technique for Digital Division | A simple and economical method for digitaldivision is described.  The method is suitable for divisors whose leading character is either radix lessone or is unity with the next character equal to zero; also the method is direct and needs only half thenumber of arithmetic operations needed by a variant of the Harvard iterative method, described by Gilman,which is suitable for similar divisors. | Nandi, S. K.Krishnamurthy, E. V.
1594 | An Algorithm for Generating Permutations | An algorithm is described which under repeatedapplication generates all permutations of K elements.  Only the previously generated permutation,the constant K, and a temporary index are needed.  Starting with a particular ordering of K elements (abcd),repeated application of the algorithm will generate K-1 additional permutations by K-1 successiverotations.  From the initial circular ordering of K objects, another circular ordering can be obtainedby rotating the K-1 lowest elements.  For each new K-1 circular ordering, another K-2 can be obtainedby rotating the K-2 lowest elements.  By continuing in this manner, applications of the algorithm will generateall (K-1)! circular orderings, or since each circular ordering yields K permutations thealgorithm generates all K! permutations. | Langdon Jr., G. G.
1595 | On the Computer Enumeration of Finite Topologies | The problem of enumerating the number of topologieswhich can be formed from a finite point set is considered both theoretically and computationally. Certain fundamental results are established, leading to an algorithm for enumerating finite topologies,and computed results are given for n <= 7.  An interesting side result of the computational workwas the unearthing of a theoretical error which had been induced into the literature; the use of the computerin combinatorics represents, chronologically, an early application, and this side result underscoresits continuing usefulness in this area. | Evans, J. W.Harary, F.Lynn, M. S.
1596 | Airy Function (Algorithm 301 [S20]) | Bond, G.Pitteway, M. L. V.
1597 | Transpose Vector Stored Array (Algorithm 302 [K2]) | Boothroyd, J.
1598 | Least Squares Fit By Orthogonal Polynomials (Algorithm 28 [E2]) | Makinson, G. J.
1599 | Numerical Solution of the Polynomial Equation (Algorithm 300 [C2]) | Kohfeld, J. J.
1600 | Chebyshev Quadrature (Algorithm 279 [D1]) | Hillstrom, K.
1601 | Parallel Numerical Methods for the Solution of Equations | Classical iterative procedures for the numericalsolution of equations provide at each stage a single new approximation to the root in question.  Atechnique is given for the development of numerical procedures which provide, at each stage, several approximationsto a solution of an equation.  The s8everal approximations obtained in any iteration are computationallyindependent, making the methods of interest in a parallel processing environment.  Convergence isinsured by extracting the "best information" at each iteration.  Several families of numerical procedureswhich use the technique of the procedures in a parallel processing environment are developed and measurementsof these statistics are reported.  These measurements are interpreted in a parallel processingenvironment.  In such an environment the procedures obtained are superior to standard algorithms. | Shedler, G. S.
1602 | POSE: A Language for Posing Problems to a Computer | A language, POSE, is described which is a drasticdeparture from the FORTRAN/ALGOL type, though it does utilize FORTRAN formula and logic representations(and actually contains FORTRAN VI as a subset).  With the new language, the user need only describehis problem in "equation-like" form. The method of solution is automatically provided in conjunctionwith the translation from equation form to computer instruction. In this way the POSE language user cansolve difficult computational problems (like the solution of differential equation) without requiringa knowledge of numerical methods or the intricacies of computer subroutine logic. Essentially all clericaloperations now required for FORTRAN programming have been automated so that the POSE programmerneed not be concerned with these details. | Schlesinger, S.Sashkin, L.
1603 | A Multiprogramming Monitor for Small Machines | INT, a combination hardware/software monitordesigned to control a wide variety of real-time input/output devices, is described.  The simple hardwareadditions provide a uniform device to machine interface for such elements as keyboards graphic inputdevices, and interval timers.  The software relieves the user program from the details of input/output timing,buffering, and task scheduling and provides parallel processing capability.  User programs communicatewith the monitor through a small set of meta-instruction which consists mostly of machine-language subroutine calls. | Hornbuckle, G. D.
1604 | Further Analysis of a Computing Center Environment | Empirical distributions of program lengths,execution times, processing times, and loading times of over 10,000 jobs serviced in a university computingcenter environment are presented.  The data are subdivided according to certain characteristics of usersand jobs to obtain selected empirical conditional distributions of those time properties as well as statisticalmeasures of other interesting properties.  The results are interpreted in terms of the properties of the system studied. | Walter, E. S.Wallace, V. L.
1605 | An Experimental Comparison of Time Sharing and Batch Processing | The effectiveness for program developmentof the MIT Compatible Time-Sharing System (CTSS) was compared with that of the IBM IBSYS batch-processingsystem by means of a statistically designed experiment.  An identical set of four programming problemswas assigned to each of a group of four programming subjects.  Influences external to the systems, such asthe sequence of problem solution, and programmer and problem characteristics, were specified as designfactors in the experiment.  Data was obtained for six variables (e.g., programmer time, computer time,elapsed time, etc.) which were considered to be definitive of "system effectiveness," and analysis ofvariance techniques were employed to estimate system differences in these variables after differences due tothe design factors had been eliminated.  Statistical analysis of the experimental results provided strongevidence of important system differences, as well as a critique of the experimental design itselfwith implications for further experimentation. | Schatzoff, M.Tsao, R.Wiig, R.
1606 | Chi-Squared Integral (Algorithm 299 [S15]) | Hill, I. D.Pike, M. C.
1607 | Coulomb Wave Functions (Algorithm 300 [S22]) | Gunn, J. H.
1608 | Numerical Integration of Function That Has a Pole | It is common to need to integrate numericallyfunctions that diverge somewhere outside the range of integration.  Even if the divergence occurs quitefar away, integration formulas like Simpson's, that depend on fitting a polynomial, usually will beinaccurate: near a pole they will be very bad.  A method is described that gives formulas that will integratefunctions of this kind accurately if the orders and positions of the poles are known.  Explicitformulas are given that are easy to use on an automatic computer.  It is shown that they can be usedfor some other singularities as well as poles.  If the integral converges, integration can be carriedto the singularity.  The accuracy of the integration with a pole of second order is discussed, and, as an example,the new formula is compared with Simpson's.  The new formulas are useful even far from the pole,while near the pole their advantage is overwhelming. | Eisner, E.
1609 | Scheduling University Course Examinations by Computer | A new approach to the problem of schedulingcourse examinations is presented.  In principle, an examination schedule which requires a minimum numberof examination periods and satisfies the constraint that no student be required to take two examinationssimultaneously can be found in two steps.  First, course which may have their examinations scheduled atthe same period are grouped together in all possible ways.  Then a minimum number of these groups, such thateach course is included at least once, are selected.  By removing multiple occurrences of courses and then schedulingeach group at a different period a minimal schedule can be obtained.  Known algorithms for carryingout these procedures are prohibitively expensive.  Approximations to the ideal procedure outlined above aregiven which yield nonminimal but feasible schedules with a very small expenditure of time.  Results of experimentsusing these techniques are given.  These are encouraging and indicate that further experimentation would be worthwhile. | Hall Jr., A. D.Acton, F. S.
1610 | A Method for the Solution of Transportation Problems with Tall Matrices | A method is presented for the solution of thetransportation problem having a cost matrix with few columns.  The computer implementation of this methodshows it to be very fast and efficient.  Application are indicted for the personnel classification problemas well as the classical transportation problem.  An example is worked out in detail. | Dwyer, P. S.Galler, B. A.
1611 | Scheduling Project Networks | Some of the basic concepts and terminologyof project networking are developed.  The Critical Path Algorithm incorporated in the C-E-I-R proprietaryscheduling system RAMPS (Resource Allocation and Multi-Project Scheduling) is described.  The error detectionand network analysis features of the algorithm are also described. | Klein, M. M.
1612 | Top-to-bottom Parsing Rehabilitated? | This note is concerned with the efficiencyof the Top-to-Bottom parsing algorithm as used in connection with programming language grammars.  It isshown, for instance, that retracing of unprofitable paths can often be eliminated by a suitable rearrangementof the productions defining the grammar.  The essential weakness of the method is in dealing with complicatedsyntactic structures which are in practice only sparsely occupied, e.g., arithmetic expressions. | Brooker, R. A.
1613 | One-Pass Compilation of Arithmetic Expressions for a Parallel Processor | Under the assumption that a processor may havea multiplicity of arithmetic units, a compiler for such a processor should produce object code to takeadvantage of possible parallelism of operation.  Most of the presently known compilation techniquesare inadequate for such a processor because they produce expression structures that must be evaluated serially. A technique is presented here for compiling arithmetic expressions into structures that can beevaluated with a high degree of parallelism.  The algorithm is a variant of the so-called "top-down"analysis technique, and requires only one pass of the input text. | Stone, H. S.
1614 | A Proposal for Definitions in ALGOL | An extension to ALGOL is proposed for addingnew data types and operators to the language.  Definitions may occur in any block heading and terminatewith the block.  They are an integral part of the program and are not fixed in the language.  Eventhe behavior of existing operators may be redefined.  The processing of text containing defined contexts featuresa "replacement rule" that eliminates unnecessary iterations and temporary storage.  Examples of definition setsare given for real and complex matrices, complex numbers, file processing, and list manipulation. | Galler, B. A.Perlis, A. J.
1615 | An Algorithm for Generating Root Locus Diagrams | A technique for using a digital computer todraw both ordinary and time-lag root locus diagrams is described.  Ordinary diagrams are drawn much fasterand more accurately than ever before.  Time-lag diagrams, which had been impossible to obtain, are drawnwith the same speed and accuracy as ordinary diagrams. | Krall, A. M.Fornaro, R.
1616 | Tensor Calculations on Computer: Appendix | In the main text of the paper [Comm. ACM 9,12 (Dec. 196), 864], a FORMAC program was discussed which is capable of calculating various quantitiesof interest in tensor calculus.  This Appendix is intended as an example of the program output.  Chrisoffelsymbols calculated for 12 basic orthogonal coordinate systems are listed. | Walton, J. J.
1617 | Eigenvalues and Eigenvectors of theSymmetric System (Algorithm 297 [F2]) | Boothroyd, J.
1618 | Determination of the Square-Root of a PositiveDefinite Matrix (Algorithm 298 [F1]) | Spath, H.
1619 | Error-Free Methods for Statistical Computations | Neely has discussed computational error generatedby some algorithms used to compute various statistics.  In the present paper methods are describedwhich are error-free, simple in concept, and usually less costly in machine time than those mentioned by Neely. | Rodden, B. E.
1620 | Methods of Evaluating Polynomial Approximationsin Function Evaluation Routines | The method of nested multiplication is commonlyused in function evaluation routines to evaluate approximation polynomials.  New polynomial evaluationmethods have been developed in recent years which require fewer multiplications than nested multiplicationand may therefore be preferable for use in function evaluation routines.  Although some of these methodsdo not appear to be practically useful because of rounding-error difficulties, several methods of evaluatinglow-degree polynomials have been found to be satisfactory.  Three such methods are described and illustrated. | File, C. T.
1621 | Computer Typesetting of ALGOL | An application of computer-aided typesettingis introduced.  A working method is described for publishing ALGOL by computerized translation fromHardware into Reference representation, computerized planning of typographical lay-out and computerized controlof a typesetting machine.  The point is made that experts in science, technology, and programming areguaranteed a correct ALGOL documentation without spending valuable time and power on typographic considerations and proofreading. | Sydow, L. V.
1622 | An Efficient Procedure for the Generation of Closed Subsets | An efficient algorithm is described for generatingsubsets of a set S which satisfy constraints of the form: "If s(i) is a member of the subset, thens(j) must also be a member of the subset."  The algorithm has been programmed in the WISP language andsuccessfully run on the IBM 7094 in connection with a routine to detect feedback in multidimensional iterative networks. | Waite, W. M.
1623 | An Application of FORMAC | A nonlinear circuit analysis problem is statedand the way in which it was solved using FORMAC is indicated.  The solution of the problem using FORMACwas notable since several other methods that were tried failed.  The problem is straightforward (althoughuntenable by hand) but nevertheless involved an elaborate use of the FORMAC language.  The programwas fairly large and utilized practically every command.  In particular, it made extensive use of thePART command.  Several tricks were necessary in order to circumvent some of the shortcomings of theFORMAC system.  This paper is more concerned with the use of programming techniques in FORMAC than withthe actual engineering problem, although readers may be interested in the problem because it is statedin a general (mathematical) sense and could be of interest in areas other than circuit analysis. | Neidleman, L. D.
1624 | Automatic Dimensioning | Examples of algorithm that will accomplishautomatic storage reservation without the need for explicit array declarations are described. | Klerer, M.May, J.
1625 | On the Automatic Simplification of Source-Language Programs | Methods of simplification that can be appliedautomatically to programs written in an ALGOL-like language are discussed.  The simplifications are basedon the form of the program and the knowledge obtained by a processor, without any understanding of what theprogram is supposed to do.  These methods have been implemented in a processor called SURE that acceptsa program written in JOVIAL and outputs an equivalent JOVIAL program that may be shorter and may be executedfaster than the original.  SURE is described, some of the problems encountered in automatic improvementat the source-language level are discussed, and further types of automatic program improvement are suggested. | Clark, E. R.
1626 | Structure of a LISP System Using Two-Level Storage | In an ideal list-processing system there wouldbe enough core memory to contain all the data and programs.  Described in this paper are a numberof techniques that have been used to build a LISP system utilizing a drum for its principal storage medium, with a surprisingly low time penalty for use of this slow storage device.  The techniques includecareful segmentation of system programs, allocation of virtual memory to allow address arithmetic for typedetermination, and a special algorithm for building reasonably linearized lists.  A scheme for binding variablesis described which is good in this environment and allows for complete compatibility between compiledand interpreted programs with no special declarations. | Bobrow, D. G.Murphy, D. L.
1627 | Application of Level Changing to a Multilevel Storage Organization | A technique for organizing the devices of a computerstorage system is described.  This technique, called the multilevel store, provides a means for economicallysatisfying the requirements for very large storage capacities of certain data management and informationretrieval systems.  The concept of level changing is introduced and its application to the multilevelstore is discussed.  A possible means for physically organizing the information for efficientuse of the multilevel store is presented. | Morenoff, E.McLean, J. B.
1628 | The Emergence of a Profession | Computer programming deals with an enormousvariety of activities and is carried on by people with a great variety of backgrounds.  It seems clearthat part but not all of this activity is evolving toward a distinct professional field, but that thescope of this emerging profession, and some of its economic, social, and educational characteristics areas yet by no means well defined.  In this paper, these issues are examined and some opinions about them are expressed. | Orden, A.
1629 | Stat-Pack: A Biostatistical Programming Package | A package of FORTRAN statistical programs for useon almost any small to medium size (40k characters or 8k words) for which a FORTRAN II compiler existsis described and its availability is announced.  The major design criteria of ease of use, ease of modification,flexibility of input and detail of output are described. | Shannon, S.Henschke, C.
1630 | Computer Representation of Planar Regions by Their Skeletons | Any region can be regarded as a union of maximalneighborhoods of its points, and can be specified by the centers and radii of these neighborhoods; thisset is a sort of"skeleton" of the region.  The storage required to represent a region in this way iscomparable to that required when it is represented by encoding its boundary.  Moreover, the skeleton representationseems to have advantages when it is necessary to determine repeatedly whether points are insideor outside the region, or to perform set-theoretic operations on regions. | Pfaltz, J. L. Rosenfeld, A.
1631 | Testing a Random Number Generator | The first 1,000,000 numbers produced by therandom number generator used in the General Purpose Systems Simulator (GPSS) were subjected to statisticaltests.  The tests are described and the results of the tests are presented.  These particular tests indicatethat the numbers are satisfactory.  It is recommended that suitable tests be applied to allrandom numbers used in computer simulations. | Gorenstein, S.
1632 | Programming the Tabular Method of Analysisof Variance for Factorial Experiments  | The ease of programming the tabular method of analysisof variance for complete factorial experiments in a FORTRAN language is demonstrated.  In this method,the total sum of squares is partitioned into orthogonal single degree of freedom sums of squares;main effect and interaction sums of squares are then obtained by appropriate pooling of the single degreeof freedom sums of squares.  Program segments to accomplish the procedure are presented.  Modificationsto handle hierarchical designs and replicated experiments are mentioned. A FORTRAN II programfor an IBM 7094 is described briefly. | Carmer, S. G.
1633 | A Modified Newton Method for Polynomials | A modified Newton method for polynomials isdiscussed.  It is assumed one has approximations for all the roots of the polynomial.  Three variationsare described.  If the roots are simple, it is shown that under appropriate conditions, twoof the variations are cubically convergent. | Ehrlich, L. W.
1634 | 27 bits Are Not Enough for 8-digit Accuracy | From the inequality 10^8 < 2^27, we are likelyto conclude that we can represent 8-digit decimal floating-point numbers accurately by 27-bit floating-pointnumbers.  However, we need 28 significant bits to represent some 8-digit numbers accurately. In general, we can show that if 10^p < 2^q-1, then q significant bits are always enough for p-digit decimalaccuracy.  Finally, we can define a compact 27-bit floating-point representation that will give 28significant bits, for numbers of practical importance. | Goldberg, I. B.
1635 | Parameters for Pseudo Runge-Kutta Methods | The object of this note is to present a choiceof the free parameters in the third- and fourth-order pseudo Runge-Kutta methods involving two points. Thischoice of parameters causes a bound on the principal part of the truncation error term to be near the minimumfor the fourth-order method and at the minimum for the third-order method. | Byrne, G. D.
1636 | Invariant Imbeding and the Numerical Integrationof Boundary-Value Problems for Unstable Linear Systems of Ordinary Differential Equations | In such diverse areas as radiative transferin planetary atmospheres and optimal guidance and control, two-point boundary-value problems for unstablesystems arise, greatly complicating the numerical solution.  An invariant imbeding technique is presentedwhich is useful in overcoming these frequently encountered instabilities, and the resultsof some numerical experiments are given. | Belman, R. E.Kagiwada, H. H.Kalaba, R. E.
1637 | Problems in the Statistical Analysis of SimulationExperiments: The Comparison of Means and the Length of Sample Records | Research is continued into statistical analysisof simulation experiments containing autocorrelated time series.  It is shown how to estimate the lengthsof sample records needed to use certain large sample results in measuring stability.  Analogies between autocorrelateddata and independent observations are described.  A way to test the difference of the meanof two experiments is suggested.  It is shown how the variance of the sample mean relates to the spectrumof the generating process, and estimation of the quantities of interest is described. The resultsexpand the possibilities of statistical spectral analysis as applied to simulation experiments. | Fishman, G. S.
1638 | Sorting by Replacement Selecting | In sorting by replacement selecting, the expectedlength of a sequence beginning with the i-th element (i>1) is proved to be 2F, in accordance witha conjecture of E. H. Friend, where F is the number of memory cells used.  The expected length of the j-thsequence is determined to be F times a j-th degree polynomial in e, such that the value of this polynomialapproaches 2 as j approaches infinity.  Recursive formulas are obtained for both the mean and the standarddeviation of the length of the j-th sequence.  The mathematical proofs of these results are basedupon the assumption that n, the number of items to be sorted, is infinite, but it is shown that the errordue to the finiteness of n approaches zero rapidly as n increases. | Gasner, B. J.
1639 | Exponential Curve Fit (Algorithm 295 [E2]) | Spath, H.
1640 | Generalized Least Squared Fit By OrthogonalPolynomials (Algorithm 296 [E2]) | Makinson, G. J.
1641 | A Use of Fast and Slow Memories in List-Processing Languages | A scheme is described which permitting a substantialincrease in memory space utilized to store list-structured data.  It consists in reducing to onelevel a nonhomogeneous store composed of fast (core) and slow (disk or drum) memories.  The space availablein slow memory is divided into pages each containing a given number of machine words.  The reduction to aone-level memory is performed by a program which leaves the most often called pages in the fast memory. When a new page from slow store is requested, the page in core having the longest period of inactivityis transferred back to the slow store.  The complete scheme has been implemented in connection witha LISP embedding into ALGOL, using an IBM 7044 with 32k of core memory and disks.  Gains in memory spacewere about 100-fold.  As often happens in programming applications the price of the additional space is computertime.  Although the disks have an access time 10^4 times slower than core, tests indicate that theactual slow down varied from 3 to 10, depending on the number of pages available in the fast store. | Cohen, J.
1642 | Time Sharing on a Computer with a Small Memory | Techniques to make time sharing attractive ona computer with a small central memory are presented.  "Small" is taken to mean that only one user program plusa monitor will fit into the memory at any time.  The techniques depend on having two levels of secondarystorage: level 1, several times larger than the main memory and quite fast; and level 2,many times larger and slower than level 1. | Fisher, R. O.Shepard, C. D.
1643 | An Improvement to Iterative Methods of Polynomial Factorization | Methods of polynomial factorization whichfind the zeros one at a time require the division of the polynomial by the accepted factor.  It is shownhow the accuracy of this division may be increased by dividing in order of both ascending and descendingpowers of the variable and choosing a crossover point which minimizes a very simply calculated error criterion. | Bingham, J. A. C.
1644 | On the Computation of Least Squares Polynomials | Rounding error accumulated during digital computationof a least squares polynomial makes the computed polynomial only an approximation to the true leastsquare polynomial.  A simple method for adjust ing the constant term of the computed polynomial to geta better approximation to the true least squares polynomial is described. | Goldberg, M.
1645 | A Note on Computing Approximations to the Exponential Function | Two methods are discussed which result in nearminimax rational approximations to the exponential function and at the same time retain the desirable propertythat the approximation for negative values of the argument is the reciprocal of the approximationfor corresponding positive values.  These methods lead to approximations which are much superior to thecommonly used convergents of the Gaussian continued fraction for the exponential.  Coefficients and errorsare given for the intervals [-.5*ln 2, .5*ln 2] and [-ln 2, ln 2]. | Cody, W. J.Ralston, A.
1646 | DITRAN-A Compiler Emphasizing Diagnostics | DITRAN (Diagnostic FORTRAN) is an implementationof ASA Basic FORTRAN with rather extensive error checking capabilities both at compilation timeand during execution of a program.  The need for improved diagnostic capabilities and some objectivesto be met by any compiler are discussed.  Attention is given to the design and implementation of DITRANand the particular techniques employed to provide the diagnostic features.  The handling of error messagesby a general macro approach is described.  Special features which provide teaching aids for use by instructors are noted. | Moulton, P. G.Muller, M. E.
1647 | WATFOR-The University of Waterloo FORTRAN IV Compiler | WATFOR is an in-core, load-and-go compilerwhich has been implemented within the IBM 7040/44 operating system.  FORTRAN IV was selected as the sourcelanguage in order to achieve maximum language compatibility with other available compiling systems,in particular the IBM 7040/44 FORTRAN IV system.  The principal advantage of the WATFOR compiler is thatit translates FORTRAN IV programs at speeds of up to 100 statements per second.  Since the compilerresides core there is virtually no system overhead, and hence large batches of "student" programs may be processed veryefficiently.  The compiler also provides extensive error diagnostics, during both the compilationand the execution phases of a program run.  This feature makes the system attractive toboth learners and learned users alike. | Shantz, P. W.German, R. A.Mitchell, J. G.
1648 | Uniform Random (Algorithm 294 [G5]) | Strome, W. M.
1649 | Data Directed Input-Output in FORTRAN | A statement which is similar to the NAMELISTstatement of FORTRAN IV has been incorporated in the FORTRAN 63 compiler.  The FORTRAN 63 implementationallows a greater flexibility and simplicity than the FORTRAN IV feature.  The Hollerith names, thelocation, the mode and the dimensions of a variable can be discovered by means of standard FORTRAN statements. Methods of using this information are illustrated in relation to general purpose data directed input andoutput routines; some other uses such as matrix manipulation are discussed. | Hassitt, A.
1650 | A Unifying Computational Method for theAnalysis of Complete Factorial Experiments | A computational method which may be used forthe calculation of sums of squares in the analysis of variance of complete factorial experiments and inthe computation of main effect or interaction means is described.  The method is elucidated as unifying sinceone method can be used for a variety of purposes each previously requiring different methods.  The programmingadvantages of such a method are obvious.  The following variants are discussed: (1) the standardanalysis of variance; (2) analyses omitting certain levels of one or more factors; (3) separate analysesfor some levels of a factor or for combinations of levels of more than one factor.  These are performedsimultaneously; (4) the calculation of main effect or interaction means.  The mean expects the data in standardorder and it leaves the data in that order so that many analyses of the same data can be performedwithout rearrangement.  The total sum of squares, excluding a replication sum of squares, is partitionedinto all polynomial partitions and their interactions each with one degree of freedom.  This is so evenif factors have unequally spaced factor levels. | Cooper, B. E.
1651 | An Interpretive Input Routine for Linear Programming | In this descriptive article an input codeis presented which greatly simplifies data input to any linear programming solution routine, for subsequentuse either as a pedagogical device or for solving rather small LP problems.  This latter (limited)use derives not at all from inherent limitations in the code itself, but from an efficiency evaluation:large LP problems would doubtless benefit from an input system more suited for bulk data handling thanthe input code described.  From a user's standpoint, input appears almost exactly as a textbook presentationof the LP problem (limited only by a keypunch's inability to write subscripts, etc.).  The input interpreterscans column wise, thus no fixed format data preparation is required.  The user may also, undervery general requirements only, liberally use editorial comments throughout the input deck as anaid in identification, e.g., of row constraints.  The article includes examples of input, output from asolution routine presently in use, and a skeleton flowchart of the input interpreter. | Aigner, D. J.
1652 | A Code for Non-numeric Information ProcessingApplications in Online Systems | A code has been specifically designed to simplifythe internal information processing operations within an online computer system with respect to non-numericapplications, and to maximize the transfer rate of the information channel linking the system andthe system user.  The code has direct application to problems in area such as information retrieval, documentclassification, computer-aided teaching and text editing.  This code, called IPC (Information ProcessingCode), is an 8-bit code set constructed so that 7, 6, 5 and 4-bit subsets can be easily derivedfrom the basic set.  The code set is organized so that simple binary operations can distinguish betweenthe numeric alphabetic, special symbol and control character codes.  The number of usable characters withinthe basic set size may be expanded either by use of escape codes included in the set, or by suitableinterpretation of otherwise unassigned codes on the basis of the requirements of local environments. | Morenoff, E.McLean, J. B.
1653 | System Performance Evaluation: Survey and Appraisal | The state of the art of system performanceevaluation is reviewed and evaluation goals and problems are examined.  Throughput, turnaround, andavailability are defined as fundamental measures of performance; overhead and CPU speed are placed inperspective.  The appropriateness of instruction mixes, kernels, simulators, and other tools is discussed,as well as pitfalls which may be encountered when using them.  Analysis, simulation, and synthesis arepresented as three levels of approach to evaluation, requiring successively greater amounts of information. The central role of measurement in performance evaluation and in the development of evaluation methods is explored. | Calingaert, P.
1654 | A University's Educational Program in Computer Science | After a review of the power of contemporary computers,computer science is defined in several ways.  The objectives of computer science education arestated, and it is asserted that in a North American university these will be achieved only through a computerscience department.  The program at Stanford University is reviewed as an example.  The appendicesinclude syllabic of Ph.D. qualifying examinations for Stanford's Computer Science Department. | Forsythe, G. E.
1655 | Code Extension Procedures for InformationInterchange* (Proposed USA Standard)
1656 | Procedures for the Standardization Process* (Proposed USA Standard)
1657 | Implementation of the SHARER2 Time-Sharing System | A simple mechanism is described for the executionof part of a program with its own memory protection.  This allows such a program to act as asuboperating system.  An improved version of the SHARER time-sharing system using this feature is described. | Harrison, M. C..Koperating system, memory protection, time-sharing,multiprogramming, monitor, submonitor, suboperating system.C4.32 4.31 4.32
1658 | Analysis of Algorithms for the Zero-One Programming Problem | This paper is concerned with a review and examinationof several existing algorithms for the zero-one programming problem.  Computational experienceis summarized.  The machine time and storage requirements of several of the algorithms are comparedover several test problems of small and intermediate size.  Computer experiments still provide little hopeof solving problems with over 100 variables with a reasonable amount of machine time. | Gue, R. L.Liggett, J. C.Cain, K. C..Koperations research, optimization theory, integerprogramming, zero-one variables, algorithms.C5.39 5.41
1659 | Computational Linguistics in a Ph.D. Computer Science Program | This report contains recommendations for acourse curriculum on computational linguistics in a Ph.D. computer science program.  A classification of thesubject areas contained in computational linguistics is presented, and ten courses in these areas are described. A basic bibliography in computational linguistics is appended. | Kuno, S.Oettinger, A. G..Kcomputational linguistics, mathematical linguistics,language and computer, language data processing, computational linguistics course curriculum, computationallinguistics graduate program, computational linguistics bibliography, computer science curriculum.C1.52 3.42 3.43
1660 | Index By Subject To algorithms, 1960-1968
1661 | Multint (Algorithm 32 [D1]) | Kolbig, K. S..Knumerical integration, multidimensional integration, Gaussian integration.C5.16
1662 | Eigenvalues and Eigenvectors of a Real General Matrix [F2]) | Grad, J.Brebner, M. A..Keigenvalues, eigenvectors, latent roots, latentvectors, Householder's method, QR algorithm, inverse iteration.C5.14
1663 | Generator of Random Numbers Satisfying the Poisson distribution [G5]) | Snow, R. H..KPoisson distribution, random number generator, Monte Carlo.C5.12 5.5
1664 | An Algorithm for Deriving the Equations ofMathematical Physics by Symbolic Manipulation | A method is described whereby a digital computercan be used to derive the equations of mathematical physics in any curvilinear coordinate system requestedby the user.  The effectiveness of the technique is demonstrated by using it to derive the Navier-Stokesequations of fluid motion and the continuity equation.  To derive these equations by this method, theuser need know only the coordinate transformation equations relating the curvilinear coordinates of interestto an orthogonal Cartesian triad. When this program is used and the coordinate transformation equationsare supplied as input, the computer will derive the Navier-Stokes equations and the continuityequation.  The equations obtained will be relative to the curvilinear coordinate system specified by thetransformation equations used as input.  In this paper the emphasis is on theoretical considerations andmethodology rather than on programming details.  Results are presented for cylindrical polarand spherical polar coordinate systems. | Howard, J. C.Tashjian, H..KFORMAC, Navier-Strokes equations, continuity equation,tensor, tensor equation, curvilinear coordinate systems, FORTRAN, symbolic manipulation.C3.21 3.25 3.29 4.12 4.29
1665 | Automatic Generation of Efficient LexicalProcessors Using Finite State Techniques | The practical application of the theory offinite-state automata to automatically generate lexical processors is dealt with in this tutorial articleby the use of the AED RWORD system, developed at M.I.T. as part of the AED-1 system.  This systemaccepts as input description of the multicharacter items or of words allowable in a language given in termsof a subset of regular expressions. The output of the system is a lexical processor which reads a stringof characters and combines them into the items as defined by the regular expressions.  Each outputitem is identified by a code number together with a pointer to a block of storage containing the charactersand character count in the item.  The processors produced by the system are based on finite-state machines. Each state of a "machine" corresponds to a unique condition in the lexical processing of a characterstring.  At each state a character is read, and the machine changes to a new state.  At each transitionappropriate actions are taken based on the particular character read.  The system has been in operationsince 1966, and processors generated have compared favorably in speed to carefully hand-coded programsto accomplish the same task.  Lexical processors for AED-O and MAD are among the many which have beenproduced.  The techniques employed are independent of the nature of the items being evaluated.  If theword "events" is substituted for character string, these processors may be described as generalized decision-makingmechanisms based upon an ordered sequence of events.  This allows the system to be used in arange of applications outside the area of lexical processing.  However convenient these advantages maybe, speed is the most important consideration.  In designing a system for automatic generation of alexical processor, the goal was a processor which completely eliminated backup or rereading, which was nearlyas fast as hand-coded processors, which would analyze the language and detect errors, andwhich would be convenient and easy to use. | Johnson, W. L.Porter, J. H.Ackley, S. I.Ross, D. T..Kcharacter string, compiler, finite-state automata, finite-statemachine, lexical processor, nondeterministic machine, parsing, plex structure, regular expressions,sequentialmachine, syntactic analysis.C3.63 3.75 4.12 5.22 5.24 5.31
1666 | Solution of Linear Programs in 0-1 Variablesby Implicit Enumeration (Algorithm 341 [H]) | Byrne, J. L.Proll, L. G..Klinear programming, zero-one variables, partial enumeration.C5.41
1667 | Roots of Polynomials by a Root-Squaringand Resultant Routine (Algorithm 340 [C2]) | Noltemeier, A..Kroot finders, roots of polynomial equations, polynomialzeros, root-squaring operations, Graeffe method, resultant procedure, subresultant procedure,testing of roots, acceptance criteria.C5.15
1668 | An Algol Procedure for the Fast Fourier Transformwith Arbitrary Factors (Algorithm 339 [C6]) | Singleton, R. C..Kfast Fourier transform, multivariate Fourier transform,Fourier series, harmonic analysis, spectral analysis, orthogonal polynomials, orthogonal transformation,virtual core memory, permutation.C3.15 3.83 5.12 5.14
1669 | Algol Procedures for the Fast Fourier Transform (Algorithm 338 [C6]) | Singleton, R. C..Kfast Fourier transform, complex Fourier transform,multivariate Fourier transform, Fourier series, harmonic analysis, spectral analysis, orthogonal polynomials,orthogonal transformation, virtual core memory, permutation.C3.15 3.83 5.12 5.14
1670 | Correspondences of 8-Bit and Hollerith Codes forComputer Environments (A USASI Tutorial Standard)
1671 | A Phonological Rule Tester | The design and implementation of a system toalleviate the problem of rule evaluation for the linguist in the area of phonology are presented.  Itpermits the user to define, on-line, sets of rules statable within the framework presented in The SoundPatterns of English by Chomsky and Halle, 1968, to define phonemes as bundles of specified distinctivefeatures, to define data as strings of phonemes with associated grammatical structure, to test the effectof applying rules to the data, and to store both the definitions and results.  The rule applicationfacility described in detail was implemented by translating linguistic rules to rules in FLIP, aformat-directed list processor embedded in LISP.  This made the system construction easy while providingsophisticated capabilities for the linguist.  The system is written in BBN LISP on the ScientificData System 940 computer and is designed to be used on-line in interactive fashion, with control returnedto the user after each command is executed. | Borrow, D. G.Fraser, J. B..Kphonology, rule tester, linguistics, transformationalgrammar, LISP, format-directed list processing, on-line systems.C3.42 4.13 4.22
1672 | Practical Error Coefficients in the Integrationof Periodic Analytic Functions by the Trapezoidal Rule | Theoretical and practical values of error coefficientsuseful in bounding the error in integrating periodic analytic functions with the trapezoidal ruleare tabulated for various ranges of the parameters. | Rabinowitz, P..Ktheoretical error coefficients, practical error coefficients,numerical integration, periodic analytic functions, trapezoidal rule, roundoff error,truncation error, integration algorithm.C5.11 5.16
1673 | Approximate Solution of Initial Boundary WaveEquation Problems by Boundary-Value Techniques | A new boundary-value technique is proposed forthe treatment of initial-boundary-value problems for linear and mildly nonlinear wave equations.   Severalillustrative examples are offered to demonstrate the ease with which the method can be applied. | Greenspan, D..Kinitial-boundary-value problem, wave equation, boundary-value technique.C5.15 5.17
1674 | One-Line Random Number Generators and Their Use in Combinations | Some one-line random number generators, i.e.generators requiring a single FORTRAN instruction are discussed, and some short FORTRAN programs whichmix several such generators are described.  The aim is to provide methods for incorporating random numbergenerators directly in FORTRAN programs, by means of a few in-line instructions.  The advantages arespeed (avoiding linkage to and from a subroutine), convenience, and versatility.  Anyone wishing to experimentwith generators, either using congruential generators by themselves or mixing several generatorsto provide a composite with potentially better statistical properties than the library generatorscurrently available, may wish to consider some of the simple FORTRAN program discussed here.  | Marsaglia, G.Bray, T. A..Krandom number generation, Monte Carlo, simulation.C5.5
1675 | A Note on a Relevance Estimate and Its Improvement | In this paper the effect of iterating the improvementprocedure is examined.  It is shown that applications of the improvement factor beyond the firsttime are ineffectual, and that the factor is but a scale factor. | Korfhage, R. R..Kinformation retrieval, relevance, indexing, classification.C3.70 3.71 3.74
1676 | The LRLTRAN Compiler | Extensive software problems confront an organizationwhich possesses a number of different computers and which frequently acquires new ones. To maintain cohesion, a system must be developed, written in a high level language, which minimizes machinedependencies and isolates those which are necessary.  A language and a compiler for the language are discussedhere.  The language, called LRLTRAN, is a heavily augmented FORTRAN.  The tree-pass compiler makes useinternally of a postfix Polish notation (pass I to pass II) and a tree representation referred to asa "composite blocking table" (pass I to pass III).  Machine-independent optimization occurs in pass IIand DO-loop and machine-dependent optimization in pass III. | Mendicino, S. F.Martin, J. T.Ranelletti, J. E.Zwakenberg, R. G..Kcompiler, compiler-compiler, machine independence,scatter storage technique, Polish processor, common subsegments, tree representation, optimization.C4.12 4.20
1677 | Storage Organization in Programming Systems | The system of program and data representationthat has been in use on the Rice University computer for five years is described.  Each logical entity in storageoccupies a block of consecutive memory locations.  Each block is labeled by a codeword and may containa program, a data vector, or codewords which in turn label blocks to form arrays.  This storage arrangementis discussed with its realized advantages or programming systems: simplicity of programmed addressing,flexibility of data structures, efficiency of memory utilization, variability of system compositionduring execution, means of linkage between programs and from programs to data, and basis for storage protection. The application of labeled blocks may be extended to areas of time-sharing and multimedia storagecontrol.  On the basis of experience at rice, some ideas on such extensions are presented. | Jodeit, J. G..Kstorage allocation, storage organization, storagecontrol, codewords, data representation, program representation, data structures, storage protection,addressing mechanisms, paging, segmentation, file handling.C4.30 4.40 6.20
1678 | Automata, Formal Languages, Abstract Switching,and Computability in a Ph.D. Computer Science Program | A number of courses are listed in the areadescribe as automata, formal languages, abstract switching, and computability, that might be availableto a Ph.D. student in computer science.  A brief catalog description of each course is applied and therole of each of the courses in the graduate program is discussed. | McNaughton, R..KPh.D. computer-science curriculum, Ph.D. computerscience program, automata, formal languages, switching theory, theory of computability.C1.5 5.2 6.1
1679 | A Fast Fourier Transform Algorithm for Real-Valued Series | A new procedure is presented for calculating thecomplex, discrete Fourier transform of real-valued time series.  This procedure is described for an examplewhere the number of points in the series is an integral power of two.  This algorithm preservesthe order and symmetry of the Cooley-Turkey fast Fourier transform algorithm while effecting the two-to-onereduction in computation and storage which can be achieved when the series is real.  Also discussedare hardware and software implementations of the algorithm which perform only (N/4) log2 (N/2) complexmultiply and add operations, and which require only N real storage locations in analyzing each N-point record. | Bergland, G. D..Kfast Fourier transform, time series analysis, digitalfiltering, spectral analysis, real-time spectrum analyzers, Fourier analysis, discrete Fourier transform,digital spectrum analysis, Fourier analysis algorithm, Fourier synthesis algorithm.C3.80 3.81 4.9 5.49 6.22
1680 | A General-Purpose Display Processing and Tutorial System | ADEPT (A display-Expedited Processing and Tutorial)system is described.  This system was designed to improve man-computer communications by employinga display unit to interleave tutoring with other computer operations such as simulation, programming, andinformation retrieval.  It is written in FORTRAN IV (G) for the IBM System/360, Model 40, and the IBM 2250display Unit under Operating System/360.  Adept is a cataloged program that controls the standard operatingsystem by terminating and rescheduling itself automatically, relinquishing computer resources allocatedto it, and surrendering control to the operating system to perform other jobs.  It expands the powerand flexibility of computer-assisted instruction by making immediately available to students, teachers,and other users, the full resources (system-cataloged programs) of the operating system.  Language processorsand compilers, simulation models, mathematical solution techniques, stored data, and all other library anduser programs can be incorporated into instructional material without reprogramming.  Illustrations of the variousapplications are presented and their implications are discussed. | Engvold, K. J.Hughes, J. L..Kcomputer-assisted instruction, tutorial systems,programming, simulation, modeling, information retrieval operating systems, graphics, displays, man-machineinterface, on-line computing, graphic programming.C1.5 3.3 3.5 3.8 4.0 4.3
1681 | Easy English,a Language for InformationRetrieval Through a Remote Typewriter Console | Easy English is a natural command languagedesigned to simplify communication between man and machine through remote typewriter console.  It has been developedfor retrieval of documents from a computerized data base, the Moore School Information Systems Laboratoryfiles.  Requests are formulated in a standardized syntactical form (examples of which are presented), andthis form is then transformed into an equivalent query expressed in the retrieval system's original SymbolicCommand Language, which is briefly described.  Operation of easy English is detailed by illustrationof the transformations performed upon a sample request up to the point at which the request stringis sent to the system.  A macro flowchart of Easy English is included, and an Appendix providesthe printout of a retrieval demonstration. | Rubinoff, M.Bergman, S.Cautin, H.Rapp, F..Knatural language communication, on-line searching,remote console communication, information retrieval, man-machine communication, remote terminal communication,translator, document retrieval, conversational mode, information retrieval language, symbolic command language.C3.74 3.81 4.19
1682 | The Implementation of a BASIC System in a Multiprogramming Environment | The implementation of a remote terminal BASIC systemwithin the context of an existing multiprogramming computer system, the Burroughs B5500, is described. This implementation combines a unique mixture of machine language and interpretive techniques with an incremental compiler. | Braden, H. V.Wulf, W. A..Kmultiprogramming, incremental compilation, compilers, interpreters.C4.1 4.12 4.2 4.22 4.3 4.32
1683 | Boolean matrix Methods for the Detection of Simple Precedence Grammars | A mechanical procedure is derived for determiningwhether a given context-free phrase structure grammar is a simple precedence grammar.  This procedureconsists of elementary operations on suitably defined Boolean matrices.  Application of theprocedure to operator grammars is also given. | Martin, D. F..Ksyntax analysis, precedence analysis, simple precedencegrammar, simple precedence language, operator grammar, operator precedence, compilers, bounded-contextsyntactic analysis, Boolean matrices, relations.C4.12 5.23
1684 | Ambiguity in Limited Entry Decision Tables | The use of decision tables as a tool in systemsanalysis and for program specification is now becoming accepted.  Rules on redundancy, contradiction,and completeness for limited entry tables were published in 1963.  These are usually used for checking,preceded if necessary by a conversion from extended to limited entry form.  Processors which automaticallytranslate tables to more conventional program usually base their diagnostic facilities on these rules. In this paper it is suggested that these rules are unsatisfactory and that the important aspect ofchecking is to eliminate ambiguity from tables.  Ambiguity is defined and discussed, and a procedure forproducing checked-out decision tables is proposed.  The theoretical basis of the algorithm used is established.The importance of well-designed diagnostic facilities in decision table processors is emphasized. | King, P. J. H..Kdecision tables, DETAB-65, systems analysis .C3.50 4.19 4.49
1685 | GAN, a System for Generating and Analyzing Activity Networks | GAN, a system for generating activity networks,is designed to save time in the preparation of activity networks and to deal conveniently with networkprograms.  A defining description of a programming language designed for generating activity network froma set of standard networks is presented.  Also, a general idea of a language for performing calculationson activity networks (scheduling activity networks) is given. | Schurmann, A..Kactivity network, management project, standard network,network generator, network assembler, activity network analysis, network calculation, network program.C3.50 3.53 4.11 4.12 4.29
1686 | Computer Synthesis of Holograms for 3-D Display | Optical and digital holography are reviewed. The mathematical model and computational techniques of the authors' digital holographic process are discussed,and applications of computer holography are suggested.  Computer holograms have been made of three-dimensionalobjects which give faithful reconstructions, even in white light.  A new approach based on pointapertures for the image is discussed.  Photographs of the images reconstructed from digital holograms are presented. | Lesem, L. B.Hirsch, P. M..Kholography, optics, Fourier transforms, computerapplications, display device, photography, physics, mathematics, image processing.C3.17 3.19 5.19
1687 | Netflow (Algorithm 248 [H]) | Bray, T. A.Witzgall, C..Kcapacitated network, linear programming, minimum-costflow, network flow, out-of-kilter.C5.32 5.41
1688 | Netflow (Algorithm 248 [H]) | Henderson, J. H..Kcapacitated network, linear programming, minimum-costflow, network flow, out-of-kilter.C5.32 5.41
1689 | Calculation of a Polynomial and its DerivativeValues by Horner Scheme (Algorithm 337 [C1]) | Pankiewicz, W..Kfunction evaluation, polynomial evaluation,Algol procedure, Horner's scheme.C5.12 4.22
1690 | Netflow (Algorithm 336 [H]) | Bray, T. A.Witzgall, C..Kcapacitated network, linear programming, minimum-costflow, network flow, out-of-kilter.C5.32 5.41
1691 | A Comparison of the Correlational Behaviorof Random Number Generators for the IBM 360 | Hutchinson states that the "new" (prime modulo)multiplicative congruential pseudorandom generator, attributed to D. H. Lehmer, has passed the usual statisticaltests for random number generators.  It is here empirically shown that generators of this typecan produce sequences whose autocorrelation functions up to lag 50 exhibit evidence of nonrandomness for manymultiplicative constants.  An alternative generator proposed by Tausworthe, which uses irreducible polynomialsover the field of characteristic two, is shown to be free from this defect.  The applicability of thesetwo generators to the IBM 360 is then discussed.  Since computer word size can affect a generator's statisticalbehavior the older mixed and simple congruential generators, although extensively tested on computershaving 36 or more bits per word, may not be optimum generators for the IBM 360. | Whittlesey, J. R..Krandom numbers, pseudorandom number generators, autocorrelationfunction, serial correlation, digital shift-register generators, linear recurrence modulotwo, irreducible polynomials, primitive trinomials modulo two, congruential generators, prime numbers,statistical tests for randomness, IBM 360, 32-bit versus 36-bit word size.C5.5
1692 | Numerical Solution of a Thin Plate Heat Transfer Problem | The numerical solution of a system of linearequations resulting from a discrete approximation to a thin plate heat transfer problem is considered. The slow convergence of point iterative methods is analyzed and shown to be caused by one of the boundaryconditions. The difficulty may be removed by a standard line iterative technique. | Stewart III, G.W.Lick, D. W..Kheat transfer problem, Poisson equation, boundaryvalue problem, thin domain, successive overrelaxation (SOR), block SOR.C3.20 5.17
1693 | GPL, a Truly General Purpose Language | A truly general purpose programming language,GPL, is described which contains facilities for constructing (within the language) new data types aswell as facilities for operations performed upon them.  The basic language is minimal in the sense thatno basic element can be derived from the others with high efficiency in the object programs.  Constructslike the ALGOL 60 for-statements,and if-statements are not basic; they are special types of procedures. New "symbols" (underlined words in ALGOL 60) are implicitly defined by usage in other declarations.  Aspart words are definable, packed words are handled as easily as full words.  "Address" variables(pointers) are included in full generality. | Garwick, J. V..Kprogramming language, general purpose, self-extending, macro, ALGOL.C4.20
1694 | An Algorithm for the Probability ofthe Union of a Large Number of Events | An algorithm is presented which efficiently evaluatesthe probability for the union of n independent and not mutually exclusive events. The problem is thatof evaluating the sums of the products of all possible combinations of n variables in minimum time and storage space. | Miller, G. D..Kalgorithm, probability, optimum, storage vs. timecompromise, set union, mutually exclusive events.C5.12 5.5 5.6
1695 | PLEXUS-An On-Line System for Modeling Neural Networks | A description is presented of PLEXUS, a systemwhich enables a user to construct and specify a neural network, to analyze the output data producedby the network, and to store and retrieve networks and data from a library.  The system, operated entirelyfrom a digital display unit, interacts directly with the user and permits easy and rapid transitionsbetween the various phases of the modeling process.  PLEXUS is designed to complement neurophysiological researchso that the systematic development of neural models can be coordinated with experimental work.  PLEXUSnetworks are built up from components representing individual neurons, external stimuli, and interconnectingfibers, each component being of a relatively detailed nature.  Provision is also made for the use ofexperimental data as input to a network.  Convenient means for specification and modification of a network andextensive error-checking capabilities are provided. Data resulting from the simulation of a network may beanalyzed by a variety of techniques ranging from examinations of the gross characteristics of the data tothe determination of detailed statistical properties. | Dill, J. C.Randall, D. L.Richer, I..Kbiological modeling, data analysis, discrete systemsimulation, library systems, modeling, network simulation, neural networks, neurophysiologicalmodels, on-line simulation, simulation.C3.12 3.19 3.29 3.65
1696 | An Algorithm for Identifying the Ergodic Subchainsand Transient States of a Stochastic Matrix | An algorithm for identifying the ergodic subchainsand transient states of a stochastic matrixis presented.  Applications in Markov renewal programmingand in the construction of variable length codes are reviewed, and an updating procedure for dealingwith certain sequences of stochastic matrices is discussed.  Computation times are investigated experimentallyand compared with those of another recently propose method. | Fox, B. L.Landi, D. M..Kstochastic matrix, ergodic, chain identification.C5.39 5.5
1697 | Graphical Input/Output of Nonstandard Characters | A system developed at Harvard for graphicallyinputting and outputting nonstandard characters on a computer is printed.  In principle, the systemcan deal with any orthography, although at present it is limited to 4000 Chinese characters and some mathematicalsymbols.  New characters can be added to the repertoire of the system by graphical input ona display scope.  Text inputting is accomplished via a display scope or a Rand Tablet.  The organizationand operation of the current system are described, and a discussion of the relative merits of such a systemis given.  Illustrations of the computer input and output of Chinese characters are included.   | Hayashl, H.Duncan, S.Kuno, S..KChinese characters, input/output, orthography, RandTablet, PDP-1, automatic typesetting, man-machine communication, computer graphics, graphical input, on-line editing.C3.40 4.41
1698 | A Statistical Model for Console Behavior in Multiuser Computers | The ability of a computer system to communicatewith the outside world efficiently is as important as its ability to perform computations efficiently. It is quite difficult to characterize a particular user, but rather easy to characterize the entire user community. Based on the properties of this community we have postulated a hypothetical "virtual console." No claim is made that a virtual console behaves like any actual console, but the entire collection ofvirtual consoles models the collection of actual consoles.  Using the model we answer questions like: How many processes are suspended waiting for console input?  What is the maximum rate at which a process canexecute?  What bounds can be set on overall buffer requirements?  Answers to these and similar questionsare needed in certain aspects of operating system design. | Denning, P. J..Kstatistical models for input-output, operatingsystem design, input-output design.C4.30 4.41 5.5
1699 | Experimental Evaluation of InformationRetrieval Through a Teletypewriter | Experiments designed to evaluate the capabilitiesof mechanized information retrieval systems, with emphasis on interactive (man-machine) language and onsome of the mechanical and psychological limitations in their design, were conducted at the Moore School informationSystems Laboratory.  The basic assumption of the research is that an information retrieval systemthat provides for man-machine dialogue at a remote inquiry terminal should provide a searcher with manyof the tools which would be available to him were he actually performing his search at a library or repositoryof documents.  Factors involved in evaluation of such a system include ease of use, learning time, andeffectiveness of actual retrieval.  Three experiments and the conclusions resulting from them are detailed. | Rubinoff, M.Bergman, S.Franks, W.Rubinoff, E.R..Kinformation retrieval testing,  information systemevaluation, experimental document retrieval, document retrieval, document perusal, man-machine communication,remote console communication, teletypewriter communication, remote terminal communication, retrievalcommand language, symbolic command language, interactive systems, user learning factors, on-line searching.C3.72 3.74 3.79 3.81
1700 | PEEKABIT, Computer Offspring of PunchedCard PEEKABOO, for Natural Language Searching | The "peekaboo" idea from punched card informationretrieval methods has been mated with the idea of superimposed punching to produce a programmingtechnique which cuts computer run time in half on a test search of 33,000 subject index entries.  A searchprogram using the device has been operational since late 1963.  As an item is entered in the store,an 18-byte mask is created from the item's meaningful words using the inclusive OR operation.  If, at searchtime, the logical product (using the AND operation) of this mask and a similarly constructed question maskis not equal to the question mask, then one or more question words are not present in the store item. An equality is in conclusive; the words of the store item must be unpacked and compared with questionwords.  The present store is made up of over 600,000 subject index entries estimated to average 60 characterseach.  Longer texts, such as abstracts, could be handled by multiple masks. | Hutton, F. C..Kpeekaboo, superimposed coding, natural languagesearching text searching, information compaction, computer search technique.C3.74
1701 | Synchronous Signaling Rates for DataTransmission* (Proposed USA STandard)
1702 | Commentary on Mr. Mooers' Paper | Steel Jr., T. B.
1703 | Accommodating Standards and Identification of Programming Languages | The user public wants standardization andreliable identification of programming languages and related services.  One way of achieving these goalsillustrated by the methods adopted for TRAC T-64 interactive language, and its related family of languages. Oppressive rigidity usually associated with standardization is avoided by a new accommodation techniqueaccessible to the user to allow local variations with the language.  Explicit standardization of the languageis undertaken at the organizational source of the language.  Use of the organizational trademark(TRAC) on the published standards, and services relying upon them, provides a reliable public identification. These methods can be usefully applied to other programming languages and computer services. | Mooers, C. N..Kstandardization, programming languages, TRAC T-64language, tranemark, public identification of programming languages, standards which accommodate.C2.12 4.2 2.9
1704 | Minimum Excess Cost Curve (ALgorithm 217 [H]) | Muth, J. F..Kcritical path scheduling, PERT, cost/time tradeoffs, network flows.C3.59 5.41
1705 | A Set of Basic Input-Output Procedures (Algorithm 335 [15]) | By means of the primitives in symbol, outsymboland length, as requested by this journal's Algorithms Policy [Comm. ACM 10 (Nov. 67), 729] a basicset of input-output procedures is defined aiming at quality and flexibility.  Outreal, for instance, iswritten as a derived procedure; it outputs using the fixed point or the floating point representation,and rounds properly.  Variants can easily be written because of the explicit call of the procedures decomposeinteger and decompose real.  The highly recommended practice of echoing input is made easy with one subsetof derived procedures (ioi, ior, iob, ioa).  The documentation of output in the form of equivalent ALGOLstatements is also provided when use is made of the subset oti, otr, otb, ota.  The Berkeley styleof providing information on the form of output using prior calls of procedures such as real format isdefined.  A use of the parameter outchannel to provide information for simultaneous output to severalchannels is suggested.  Interrelationship between the declared procedures is furnished in tabular form. | De Vogelaere, R..Kinput output, transput, input output procedures,input echo, quality output, decompose integer, decompose real, style, Berkeley style, procedures relationship,output documentation, equivalent ALGOL statements, ALGOL, ALGOL 60, integer format, real format,outinteger, read real, input output Boolean, input output array, fixed point representation, floatingpoint representation, output channel interpretation.C4.0 4.41
1706 | CHAMP-Character Manipulation Procedures | A new programming language facility for symbolmanipulation is described.  String procedures may be declared and called in a standard ALGOL context. ALGOL procedures can in turn be called by string procedures so that numeric and symbolic processes mayconveniently be programmed together.  Concatenation and a variant of SNOBOL's pattern matching make upa set of primitive commands.  These are assembled together into conditional expressions which are to beused to provide alternative computational patterns.  Arrays of strings are processed using quantifiers. The class of things which may be assigned to an identifier can be restricted by a procedure expressedin the notation.  The language facilities have been implemented in the ALGOL compiler for the Burroughs B5500. | Storm, E. F..Ksymbol manipulation, string handling, charactermanipulation, conditional expressions, procedures, structure matching, recursive programming, quantifiers.C4.22 4.13
1707 | Generation of Positive Test Matrices with Known Positive Spectra | Sufficient conditions are given for a realmatrix to be similar to a positive matrix.  This result is used to construct a similarity transformationwhich, when applied to a particular upper triangular matrix, yields a positive matrix with a preassigned positive spectrum. | Hall, C. A.Porsching, T. A..Ktest matrices, positive matrices, similaritytransformation, positive eigenvalues.C5.1 5.14
1708 | A Note on the Efficiency of a LISP Computation in a Paged Machine | The problem of the use of two levels of storagefor programs is explored in the context of a LISP system which uses core memory as a buffer fora large virtual memory stored on a drum.  Details of timing are given for one particular problem. | Borrow, D. G.Murphy, D. L..Kstorage management, list processor implementation,LISP, paging, secondary storage utilization, efficiency of paged computation.C3.7 4.1 4.2
1709 | A Modification of Efroymson's Technique for Stepwise Regression Analysis | The computational technique conventionally usedfor stepwise multiple linear regression requires the storage of an n X n matrix of data.  When the numberof variables, n, is large, this requirement taxes the storage capacity of presently used machinery. The near symmetry of the matrices involved permits a modification requiring only half the storage and computationsof the conventional algorithm and this additional storage allows the analysis of problems containingmore variables.  Alternatively, it permits the analysis of problems containing the same numberof variables but with all computations performed in double precision. | Breaux, H. J..Kmultiple linear regression, statistical recurrenceformulas, correlation, linear statistical models, statistical computer programs, curve fitting.C4.0 4.40 5.0 5.5 5.10 5.13
1710 | ASP-A Ring Implemented Associative Structure Package | ASP is a general purpose Associative DataStructure Package in which an arbitrary number of data items and an arbitrary number of the relationshipsbetween these data items may be represented.  A special picture language is described which has provedvery useful for drawing ASP structures on paper.  ASP structures are built and manipulated by meansof a series of macro calls, which are outlined in the Appendix.  Emphasis is on the philosophy of the systemrather than a particular implementation, though sufficient information is included to enable thereader to produce his own implementation of ASP. | Lang, C. A.Gray, J. C..Kassociative, data structure, ring structure lists,list structure, set languages, modeling, graphics.C4.20 4.22
1711 | When Your Computer Needs a Lawyer | Possible liability for negligence, for othertorts (such as slander of credit) and for liability under theories of express or implied warranty (guarantees)are discussed, and legal complications are explained, so that users, operators, owners, and leasorsof computers may be alerted to potential legal problems. Focus is also on trouble spots in contractingfor data processing services, in automating record keeping operations, in deciding whether or not to automatecertain operations, and in complying with statutes and regulation relating to record keeping. Information is given on patents, copyrights and trade secret protection for programs, and the problemof using copyrighted material in information storage and retrieval systems, including the pendingcopyright and patent revision bills. | Banzhaf III, J. F..Klaw, legal, lawyer, liability, torts, negligence,contracts, warrantees, guarantees, accounting, regulations, simulation, income tax, copyrights, patents,trade secrets, standard of care, slander of credit, crime, criminals, record keeping records, evidence, copying.C1.3 2.11 2.12 2.2 3.33
1712 | Recovery of Disk Contents After System Failure | A method is discussed by which, after a systemmalfunction, the contents of disk files can be restored to their status at the time of the failure. | Lockemann, P. C.Knutsen, W. D..Kdata acquisitition, disk file organization,error recovery, file organization.C3.73
1713 | On Overcoming High-Priority Paralysisin Multiprogramming Systems: A Case His tory | High-priority paralysis is the degradationthat can occur in multiprogramming systems when scheduling is based primarily on preassigned priorities. It can be alleviated by modifying the scheduling algorithm to maximize the number of programs activeat one time.  The case his tory given in this paper indicates two general methods by which simultaneity canbe increased.  Possible refinements in the scheduling algorithm for future improvements are considered briefly. | Stevens, D. F..Kmultiprogram scheduling, dynamic priority assignment scheduling.C4.30 4.32 4.39
1714 | Procedure for the Normal Distribution (Algorithm 272 [S15]) | MacLaren, M. D..Knormal distribution function, error function,normal function, normal curve integral.C5.5 5.12
1715 | Direct Search (Algorithm 178 [E4])  | De Vogelaere, R..Kfunction minimization, search, direct search.C5.19
1716 | Normal Random Deviates (Algorithm 334 [G5]) | Bell, J. R..Knormal deviates, normal distribution, random number,random number generator, simulation, probability distribution, frequency distribution, random.C5.5 5.13
1717 | Generating Prime Implicants Via Ternary Encoding and Decimal Arithmetic | Decimal arithmetic, ternary encoding of cubes,and topological considerations are used in an algorithm to obtain the extremals and prime implicantsof Boolean functions. The algorithm, which has been programmed in the FORTRAN language, generally requiresless memory than other minimization procedures, and treats DON'T CARE terms in an efficient manner. | Dietmeyer, D. L.Duley, J. R..Kprime implicants, extremal, switching function,minimization, cubical complexes, ternary encoding.C3.24 6.1
1718 | "Logical" Arithmetic on Computerswith Two's Complement Binary Arithmetic | Algorithms are presented for multiplicationand division of unsigned integer operands in which the digits normally reserved for signs participate assignificant arithmetic digits with positive weight. | Ehrman, J. R..Kbinary arithmetic, unsigned operand arithmetic,maximum significance arithmetic, full-precision arithmetic.C3.15 5.11
1719 | A Methodology for Calculating andOptimizing Real-Time System Performance | The continually increasing size, complexity,number of types, and cost of data processing systems are causing serious re-examination within governmentand industry of the criteria for and methods of calculating and optimizing data processing system costand performance.  Real-time data processing systems as typified by the automated airline reservation systemare discussed in this paper.  Criteria for evaluating performance are described; a methodology for calculatingand optimizing is outlined; and the method is illustrated by carrying out a portion of the performancecalculation and the optimization of a drum-oriented message switching system. | Stimler, S.Brons, K. A..Kreal-time system analysis, real-time system design,real-time system performance criteria, real-time system cost performance ratio.C3.27 3.80 3.81 3.89 6.9
1720 | Master's Level Computer Science Curricula | The results of a survey of the course work doneby master's degree candidates at 25 US universities are presented, and some general comments concerningthe emphasis of these programs are given.   | Elliott, R. W..Ksurveys, education, computer science curricula.C1.52
1721 | Determination of the Intersection Points of TwoPlane Curves by Means of Differential Equations | A new method is proposed to calculate the intersectionpoints of two plane curves.  The theory of singular points off a system of two differential equationsis used in developing the method. The intersection point to be determined is identified with such a singularpoint and appropriate modifications are applied to the system to ensure that the singular point be stable,i.e. all integrals which start in the neighborhood of the singular point will always approach this pointif the integral parameter tends to infinity.  In addition a method is described for systematically searchingfor all intersection points in a prescribed rectangular area. | Kuiken, H. K..Kplane curves, intersection points, intersectionsplane curves, integration, differential equations, matrix iteration, singular points, nonlinear differentialequations, eigenvalues, complex roots, roots, stationary points, Runge Kutta, stable singularity, unstable singularity.C2.0 3.10 3.20 3.50 5.10
1722 | Methods of Convergence Improvement for Some Improper Integrals | In the numerical integration of an improperintegral of the first kind, it is customary to truncate the integral when the change yielded by the lastiteration is less than some predetermined constant. The efficiency of such integration schemes can oftenbe improved by use of recent advances in the theory of nonlinear transformations; however, for several importantintegrals, e.g. integrals whose integrands are rational polynomials, these transformations failto yield much improvement.  In this paper, several methods of convergence improvement are developed which greatlyimprove convergence of some improper integrals, including the integrals of rational polynomials. | McWilliams, G. V.Thompson, R. W..Kapproximation, nonlinear, improper integral, convergenceimprovement, numerical integration, rational polynomials, truncation.C3.15 5.13 5.16 5.19
1723 | Computer Construction of Project Networks | Project networks are used in PERT and CPM. An algorithm is given for constructing project networks directly from the project precedence relations. The algorithm creates "dummy" activities and topologically orders the arcs and nodes.  The number ofnodes created is minimal for the given precedence relations.  It has been experimentally programmedin FORTRAN II for the IBM 7094. | Fisher, A. C.Liebman, J. S.Nemhauser, G. L..Kproject networks, PERT, CPM, topologicalordering, network construction by computer.C5.32
1724 | A Generalized Partial Pass Block Sort | The design of a partial pass block sort witharbitrary range of key and number of work files is described. The design is a generalization of the PartialPass Column Sort by Ashenhurst and the Amphisbaenic Sort by Nagler. The power of the sort is tabulated forvarious sizes of input file and number of work files. consideration is given to the problem of combininga block sort with internal sorts, and to the best use of direct access storage devices. | Bayes, A..Kblock sort, partial pass sort, direct access devices,column sort, chaining, reverse chaining, sort, amphisbaenic.C5.31
1725 | A Simple Proof of Lewin's Ordered-RetrievalTheorem for Associative Memories | An efficient method of ordered retrieval of binarywords from an associative memory, as describedby Lewin, is based on the use of special readout circuitswhich indicate the digit values present in the individual digit columns of the memory.  Thus thecircuits indicate whether the individual digit columns contain digits of both values, or of only onevalue, or contain no digits at all (i.e. that the memory is empty).  The use of these circuits, whichin this paper are termed column value indicators, reduces considerably the number of memory accesses necessaryto retrieve in order a number of distinct words from the memory.  Lewin proves that, for the readoutby the described method of m distinct binary words, 2m - 1 memory accesses are necessary.  (Thus heproves that the number of necessary memory accesses of his method, unlike those of other methods, is independentof the word length.)  In this paper a very simple proof of this theorem derived from some elementaryaspects of the structure of sets of binary numbers is presented. | Wolinsky, A..Kassociative memories, content-addressed memories,ordered lists, ordered information retrieval, ordered retrieval theorem, column digit values, digitvalue variety, column sensing arrangement, digit value readout, digit variety readout, memory access, memoryaccess frequency, ordered retrieval efficiency, access frequency proof, retrieval theorem proof.C3.74 3.79 5.29 5.31 6.31 6.36
1726 | Preliminary Investigation of Techniquesfor Automated Reading of Unformatted Text | Methods for converting unstructured printedmaterial into computer code are experimentally investigated.  An operator-controlled mode, dependingon human demarcation of the various regions of the page for guiding the scanner, is implemented bymeans of a joystick and a CRT display.  This mode, for which some performance figures are obtained, is thoughtto be suitable for processing very complicated material, such as technical journals.  For simpler material,for instance the "claims" sections of patents, and in applications where the utmost accuracy is not necessary,an unsupervised mode is advocated.  Here, the textual portions of the page are located duringa rapid prescan by a rudimentary form of frequency analysis.  These areas are then rescanned at a higherresolution suitable for character recognition.  Error rates of the order of 0.1 percent are obtained ina simple problem involving photographs of telephone company meter boards.  Other matters related to thedesign of a general purpose page reader, such as the segmentation of printed text, the possibility oftime-sharing the scanner, interactive man-machine operation, and the facsimile reproduction of illustrations, are discussed. | Nagy, G..Kpattern recognition, character recognition, textreading, information retrieval, unformatted text operator-controlled reader, online reader,text-image discrimination, reading machine.C3.63 3.79 3.89 6.29 6.35
1727 | One Way of Estimating Frequencies of Jumps in a Program | For the segmentation of a program it is usefulto have a reasonable estimation of the values of S(ij), where S(ij) is the mean value of the numberof jumps from the i-th instruction on to the j-th instruction in the run time.  In the cases where theS(ij) are estimated directly, the structure of the whole program must be generally taken into account;therefore it is very difficult for the programmer and/or the translator to obtain a good estimation ofthe S(ij).  It is easier to estimate not S(ij) but the quantities P(ij)=S(ij)*C(i)/SUM[S(ij), j=1,N], whereC(i) is an arbitrary positive constant for each i.  Although the P(ij) are, for each i, proportional toS(ij), the estimation of P(ij) is easier, because we must estimate only the "probabilities" of eventswhere instruction i is executed after instruction I(i).  This estimation can often be done without consideringthe structure of the whole program.  In the first part of the paper, using the theory of theMarkov chains, an algorithm for the computation of the S(ij) from the P(ij) is found, and some waysof obtaining estimates of the P(ij) are given.  In the second part a variant of this algorithm is derived,avoiding the necessity of computation involving large matrices. | Kral, J..Kobject program reduction, supervisor calls decreasing,jump frequencies estimation, control transfers estimation, optimal program segmentation, Markov chainprogram correspondence, program graph, one-entry subgraph, locally estimated jump frequencies, supervisoroverhead decreasing, program segmentation algorithm, jump frequencies, program segmentation problem.C4.11 4.19 4.39 4.49
1728 | Further Experimental Data on the Behaviorof Programs in a Paging Environment | Results are summarized from an empirical studydirected at the measurement of program operating behavior in those multiprogramming systems in whichprograms are organized into fixed length pages.  The data collected from the interpretive execution ofa number of paged programs are used to describe the frequency of page faults, i.e. the frequency of thoseinstants at which an executing program requires a page of data or instructions not in main (core) memory. These data are used also for the evaluation of page replacement algorithms and for assessing theeffects on performance of changes in the amount of storage allocated to executing programs. | Coffman, E. G.Varian, L. C..Kpaging systems, paging, dynamic program behavior, programbehavior, virtual memory systems, single-level storage, one-level storage, operating system simulation,operating systems, supervisor simulation, machine language program interpretation.C4.13 4.32 4.39 4.9
1729 | Minit Algorithm for Linear Programming (Algorithm 333 [H]) | Salazar, R. C.Sen, S.K..Klinear programming, dual simplex method, primal problem, dual problem.C5.41
1730 | Jacobi Polynomials (Algorithm 332 [S22]) | Witte, B. F. W..KJacobi polynomials, orthogonal polynomials,three-term recurrences, special functions.C5.12
1731 | Gaussian Quadrature Formulas (Algorithm 331 [D1]) | Gautschi, W..Kquadrature, Gaussian quadrature, numerical integration,weight function, orthogonal polynomials.C5.16
1732 | Factorial Analysis of Variance (Algorithm 330 [G1]) | Oliver,I..Kfactorial variance analysis, variance, statistical analysis.C5.5
1733 | Distribution of Indistinguishable Objectsinto Distinguishable slots (Algorithm [G6]) | Fenichel, R. R..Kobject distributions, combinations, distribution numbers.C5.39
1734 | Chebyshev Solution to an OverdeterminedLinear System (Algorithm 328 [F4]) | Bartels, R. H.Goulub, H. G..KChebyshev solutions, overdetermined linearsystems, linear equations, exchange algorithm.C5.13 5.14 5.41
1735 | A Futures Market in Computer time | An auction method is described for allocatingcomputer time that allows the price of computer time to fluctuate with the demand and the relative priorityof users to be controlled so that more important projects get better access.  This auction is free of theperiodic fluctuation in computer use often associated with monthly time allocation schemes. | Sutherland, I. E..Kcomputer scheduling, auction, time allocation, operating efficiency.C2.40
1736 | Heading Format for Data Transmission (A USAAI Tutorial -- Standards)
1737 | A Global Parser for Context-Free Phrase Structure Grammars | Unger, S. H.
1738 | Writing an Outline Debugging Program for the Experienced User | Presently available online debugging routinesare often unsatisfactory for the experienced user because they require unnecessarily rigid and complicatedtyping formats, make it difficult for the user to correct typing errors, and consume excessivememory with intricate features.  In a debugging program it is of prime importance that the programbe simple, flexible, and highly efficient to use.  Communication between the user and the debugging programcan be improved by using certain techniques applicable to most online debugging programs.  Thesetechniques are presented and are illustrated by their use in OPAK (octal package), a debugging program codedfor the PDP-5/8 and the SDS-930.  The compromise between economy of utility program core storage and incorporationof elegant debugging features is discussed. | Brady, P. T..Kdebugging, utility program, programming languages.C4.42
1739 | Regular Expression Search Algorithm | A method for locating specific character stringsembedded in character text is described and an implementation of this method in the form of a compileris discussed.  The compiler accepts a regular expression as source language and produces an IBM 7094program as object language.  The object program then accepts the text to be searched as input and producesa signal every time an embedded string in the text matches the given regular expression.  Examples,problems, and solution are also presented. | Thompson, K..Ksearch, match, regular expression.C3.74 4.49 5.32
1740 | An Inexpensive Braille Terminal Device | The active use of time-shared facilities forblind programmers requires a braille terminal system.  Details are given for the construction of abrailler from a model 33 teletype by modifying the print head and increasing the resiliency of the platen. A description of the programming needed to drive the brailler is presented. | Anderson, G. B.Rogers, D. W..Kblind communication, blind programming aid, braille,braille computer communication, braille output, braille teletype, braille terminal, braille type head,embosser, tactile computer communication, tactile teletype, tactile terminal.C4.41 6.35
1741 | BRAD: The Brookhaven Raster Display | A multiconsole computer display system hasbeen designed that provides very rich displays at low unit cost.  Each BRAD (Brookhaven Raster Display)console can plot tens of thousands of points, or up to 4000 characters at 30 frames per second.  Afteran initial display system investment of $50,000 each display, with teletype, costs less than $3,000. The technique employed is that of programmatically generating a binary image of the desired display in acomputer.  The image is written on a rotating drum memory.  Independent read heads continuously displaythe picture, which is generated by swept horizontal lines.  A standard TV monitor serves as the display device. The technique has two drawbacks.  A computer must compute any image to be displayed.  Also, the "pointing"interaction is more difficult.  This is because the pointing function gives only the coordinatesof the point on the screen.  The inverse of the map generation process is required to calculatethe coordinates of the point on the screen.  The inverse of the map generation process is required tocalculate the coordinates at the selected point in the input space. | Ophir, D.Rankowitz, S.Shepherd, B. J.Spinrad, R. J..Kcomputer display, computer graphics, computer rasterdisplay, TV display console, digital TV display, swept raster computer display, swept raster TV computerdisplay, TV graphics terminal, multiconsole computer graphics, inexpensive graphic terminal.C2.0 4.49 6.35
1742 | On the Design of Display Processors | The flexibility and power needed in the datachannel for a computer display are considered.  To work efficiently, such a channel must have a sufficient numberof instructions that it is best understood as a small processor rather than a powerful channel. As it was found that successive improvements to the display processor design lie on a circular path, bymaking improvements one can return to the original simple design plus one new general purpose computer foreach trip around.  The degree of physical separation between display and parent computer is a key factor in display processor design. | Myer, T. H..Kdisplay processor design, display system, computergraphics, graphic terminal, displays, graphics, display generator, display channel, display programming,graphical interaction, remote displays.C2.44 6.22 6.29 6.35
1743 | Reliable Full-Duplex file Transmission over Half-Duplex Telephone Lines | A field-proven scheme for achieving reliableduplex transmission over a half-duplex communication line is presented, and to demonstrate the difficultyof the problem, another similar scheme, which is only slightly unreliable, is also presented.  A flowchartfor the reliable scheme and some interesting examples are given. | Lynch, W. C..Ktelephone communication, half duplex, transmission,error correction, full duplex, telephone errors.C3.81 4.41 6.35
1744 | Stable Numerical Methods for Obtaining the ChebyshevSolution to an Overdetermined System of Equations | An implementation of Stiefel's exchange algorithmfor determining a Chebyshev solution to an overdetermined system of linear equations is presented,that uses Gaussian LU decomposition with row interchanges.  The implementation is computationally morestable than those usually given in the literature.  A generalization of Stiefel's algorithm is developed whichpermits the occasional exchange of two equations simultaneously. | Bartels, R. H.Golub, G. H..KChebyshev solutions, overdetermined linearsystems, linear equations,exchange algorithm.C5.13 5.14 5.41
1745 | A Position Paper on Computing and Communications | The effective operation of free enterprise increating the envisioned information service industry is dependent upon three accomplishments: (1) the restructuringof our information processing industry so that a clear division of costs is made among computing,communications, and the development of information services; (2) the wide use of multiaccess system conceptsso that information services may share in the use of computer installations and so that the cost of theirconstruction is reasonable; and (3) the development of public, message-switched communications services sothat adequate provisions are made for information security. | Dennis, J. B..Kinformation networks, information systems, computingand free enterprise, computing economics, computer installation management, government regulation,communications services, distributed data base, program leasing.C2.3 2.40 3.80 4.30
1746 | Protection in an Information Processing Utility | One of the critical problems in the designof an information processing utility that permits flexible sharing of user information is privacy. One solution for this problem is discussed. | Graham, R.M..Kprotection, privacy, information processing utility,time-sharing, multi-user, multiprogramming, multiprocessing, security, shared information, controlledaccess, reliable operation, segmentation.C4.32 4.39
1747 | Three Criteria for Designing Computing Systems to Facilitate Debugging | The designer of a computing system should adoptexplicit criteria for accepting or rejecting proposed system features.  Three possible criteria of thiskind are input recordability, input specifiability, and asynchronous reproducibility of output.  These criteriaimply that a user can, if he desires, either know or control all the influences affecting the contentand extent of his computer's output.  To define the scope of the criteria, the notion of an abstractmachine of a programming language and the notion of a virtual computer are explained.  Examples of applicationsof the criteria concern the reading of a time-of-day clock,  the synchronization of parallelprocesses, protection in multiprogrammed systems, and the assignment of capability indexes. | Van Horn, E. C..Kcomputer design, computer design criteria, computersystems, computer systems design, input equipment, input equipment design, operating systems, operatingsystems design, multiprogramming, multiprogrammed systems, multiprogrammed system design, virtual computers,programming languages, programming language design, program semantics, programming language semantics,determinism, reproducibility, repeatability, deterministic computers, protection, memory protection,information security, information privacy, computing reliability, debugging, program debugging, program testing,parallel processing, parallel programming, multiprocessing.C2.11 4.12 4.13 4.20 4.30 4.42 4.43 5.24 6.20 6.35
1748 | A Scheduling Philosophy for Multiprocessing Systems | A collection of basic ideas is presented, whichhave been evolved by various workers over the past four years to provide a suitable framework for thedesign and analysis of multiprocessing systems.  The notions of process and state vector are discussed,and the nature of basic operations on processes is considered.  Some of the connections between processesand protection are analyzed.  A very general approach to priority-oriented scheduling is described,and its relationship to conventional interrupt systems is explained.  Some aspects of time-orientedscheduling are considered. The implementation of the scheduling mechanism is analyzed in detail and thefeasibility of embodying it in hardware established.  Finally, several methods for interlocking the executionof independent processes are presented and compared. | Lampson, B. W..Ktime-sharing, multiprocessing, process, scheduling,interlocks, protection, priority, interrupt systems.C4.31 4.32 6.21
1749 | The Structure of the "THE"-Multiprogramming System | A multiprogramming system is described inwhich all activities are divided over a number of sequential processes.  These sequential processes are placedat various hierarchical levels, in each of which one or more independent abstractions have beenimplemented.  The hierarchical structure proved to be vital for the verification of the logical soundnessof the design and the correctness of its implementation. | Dijkstra, E. W..Koperating system, multiprogramming system, systemhierarchy, system structure, real-time debugging, program verification, synchronizing primitives, cooperatingsequential processes, system levels, input-output buffering, multiprogramming, processor sharing, multiprocessing.C4.30 4.32
1750 | Considerations in the Design of a MultipleComputer System with Extended Core Storage | The use of large quantities of addressable(but not executable) fast random access memory to heighten the multiprogramming performance of a multicomputer systemis discussed.  The general design of the hardware arrangement and the software componentsand functions of such a system are based on a planned configuration of dual CDC 6600's that share onemillion words of extended core storage.  In the generalization of such a design, special emphasis isplaced on estimating expected gains when compared with the traditional configuration of separate and independentcomputers without extended core storage.  An observation is made on the use of conventional, slowerspeed, random access storage devices in place of the faster memory. | Fuchel, K.Heller, S..Kmultiple computer systems, extended core storage,multiprogrammed operating systems, multiprocessor operating systems, control data corporation 6600, operating system with ECS.C4.30 4.32
1751 | The Working Set Model for Program Behavior | Probably the most basic reason behind the absenceof a general treatment of resource allocation in modern computer systems is an adequate model forprogram behavior.  In this paper a new model, the "working set model," is developed. The working setof pages associated with a process, defined to be the collection of its most recently used pages, providesknowledge vital to the dynamic management of paged memories.  "Process" and "working set" are shown tobe manifestations of the same ongoing computational activity; then "processor demand" and "memory demand"are defined; and resource allocation is formulated as the problem of balancing demands against available equipment. | Denning, P. J..Kgeneral operating system concepts, multiprocessing,multiprogramming, operating systems, program behavior, program models, resource allocation, scheduling, storage allocation.C4.30 4.32
1752 | Resource Management for a Medium Scale Time-Sharing Operating system | Task scheduling and resource balancing fora medium size virtual memory paging machine are discussed in relation to a combined batch processingand time-sharing environment.  A synopsis is given of the task scheduling and paging algorithms that were implemented,and the results of comparative simulation are given by tracing the development of the algorithmsthrough six predecessor versions.  Throughout the discussion particular emphasis is placed on balancingthe system performance relative to the characteristics of all the system resources.  Simulation results relativeto alternate hardware characteristics and the effects of program mix and loading variations are also presented. | Oppenheimer, G.Weizer, N..Ktime-sharing, operating systems, resource management,task scheduling, paging, system simulation, memory management, virtual memories.C4.30 4.31 4.32
1753 | Virtual Memory, Processes, and Sharing in MULTICS | Some basic concepts involved in the designof the MULTICS operating system are introduced.  MULTICS concepts of processes, address space, and virtualmemory are defined and the use of paging and segmentation is explained.  The means by which usersmay share procedures and data is discussed and the mechanism by which symbolic references are dynamicallytransformed into virtual machine addresses is described in detail. | Daley, R. C.Dennis, J. B..Kvirtual memory, information sharing, shared procedures,data sharing, dynamic linking, segmentation, paging, multiprogramming, storage management,storage hierarchies, file maintenance.C3.73 4.32
1754 | Dynamic Storage Allocation Systems | In many recent computer system designs, hardwarefacilities have been provided for easing the problems of storage allocation.  A method of characterizingdynamic storage allocation systems-according to the functional capabilities provided and the underlyingtechniques used-is presented.  The basic purpose of the paper is to provide a useful perspective fromwhich the utility of various hardware facilities may be assessed.  A brief survey of storage allocationfacilities in several representative computer systems is included as an appendix. | Randell, B.Kuehner, C. J..Ksegmentation, paging, multiprogramming, storageallocation, storage management, virtual memories, storage fragmentation, storage hierarchies, addressing mechanisms.C4.30 6.20
1755 | Proceedings of the ACM Symposium on Operating system Principles | ACM Special Interest Committee
1756 | Hollerith Punched Card Code* (Proposed USA Standard)
1757 | Data Code for Calendar Date for Machine-to-MachineData Interchange* (Proposed USA Standard)
1758 | Symmetric Polynomials, (Algorithm 305 [C1]) | McKay, S..Ksymmetric polynomials, symmetric sum, unitarysymmetric functions, Schur functions.C5.39
1759 | Transportation Problem (Algorithm 293 [H]) | Bayer, G..Ktransportation problem, linear programming.C5.41
1760 | Normal Curve Integral (Algorithm 304 [S15]) | Bergson, A..Knormal curve integral, probability, special functions.C5.5 5.12
1761 | Chi-Squared Integral (Algorithm 299 [S15]) | O'Brien, W. M.Wood, J..Kchi-squared integral, probability, special functions.C5.5 5.12
1762 | Dilogarithm (Algorithm 327 [S22]) | Kolbig, K. S..Kdilogarithm function, special functions.C5.12
1763 | Roots of Low-Order Polynomial Equations (Algorithm 326 [C2]) | Nonweiler, T. F..Kroot finders, polynomial equation roots, quadraticequation roots, cubic equation roots, biquadratic equation roots, polynomial zeros.C5.15
1764 | Panel Discussion on Computer Appreciation | Session 19 of the ACM 20 th Anniversary Conferenceon August 31, 1967, was entitled Education, Design Experiments, and Computer Appreciation.  Its secondhalf consisted of a panel discussion on computer appreciation, organized and chaired by Elliot I. Organick. The four panelists were Charles H. Davidson, Bernard A. Galler, Richard, W. Hamming, and Alan J. Perlis. After making prepared statements, the panelists were joined in discussion by Andries van Dam and ArthurB.Kohn, who had presented papers in the first half.  This is a transcript of the panel discussion,condensed by Dr. Organick and edited by him and the panelists.  Some remarks referred to papers by vanDam and Kahn or to the discussion during the first half of the session.  Pertinent papers are included in the references. | Organick, E. I..Kcomputer appreciation, students' liberal arts courses,survey courses, beginning programming, course content, computer courses dropout rates, college versusprecollege, teaching and social responsibility.C1.1 1.51 1.52
1765 | Expenditures, Sources of Funds, and Utilizationof Digital Computers for Research and Instruction in Higher Education: 1964-65 with Projections for 1968-69 | The Southern Regional Education Board publisheda complete report on a survey it conducted to determine the funding and characterize the utilizationof computers used for research and instruction in institutions of higher education in the United States.The sampling survey is described and the estimates for this total population are presented. | Hamblen, J. W..Kcomputing centers, research, instruction, utilization,expenditures, support, sources of funds, higher education, post secondary education, colleges, universities.C1.52 2.45
1766 | Quasilinearization and the Estimationof Differential Operators from Eigenvalues | Given a linear ordinary differential operatorcontaining several unknown constants and a number of its eigenvalues, the values of the unknown constantsare estimated.  A precise formulation is provided, and an effective numerical procedure for solution is indicated.  The results of some computational experiments are given. | Bellman, R. E.Kagiwada, H. H.Kalaba, R. E.Vasudenvan, R..Kquasilinearization, eigenvalues, differential operators,nonlinear boundary-value problems, inverse problems,differential equations, system identification.C3.15 3.17 5.17
1767 | A General Purpose Graphic Language | Interactive use of computers with graphic terminalswill permit many new problems to be solved using machines.  In order to handle a variety of applications,it is expedient to develop a general purpose graphic language that is useful on a number of graphicdevices.  A system has been designed to produce such a language quickly and cheaply.  A model graphiclanguage which has been developed with the system is presented. | Kulsrud, H. E..Kgraphic language, interactive, incremental compilation,language design, metacompiler, syntax specified language.C4.12 4.22
1768 | A Global Parser for Context-Free Phrase Structure Grammars | An algorithm for analyzing any context-free phrasestructure grammar and for generating a program which can then parse any sentence in the language (orindicate that the given sentence is invalid) is described. The parser is of the "top-to-bottom" typeand is recursive . A number of heuristic procedures whose purpose is to shorten the basic algorithm by quicklyascertaining that certain substrings of the input sentence cannot correspond to the target nonterminalsymbols are included.  Both the generating algorithm and the parser have been implemented in RCASNOBOL and have been tested successfully on a number of artificial grammars and on a subset of ALGOL.  Anumber of the routines for extracting data about a grammar, such as minimum lengths of N-derivable stringsand possible prefixes, are given and may be of interest apart from their application in this particular context. | Unger, S. H..Kparser, syntax-directed compiler, context-freegrammars, syntactic analysis, translators.C3.42 4.12 5.24
1769 | The Expanding World of Computers | The onward sweep of automatic processing ofinformation is impeded by nine principal barriers: geography, cost, problem complexity, man-machine communication,inadequate sensors, lack of understanding, distance, time, and size.  The main incentive for breachingthese barriers is the universal need for processing information, ever more urgent as the greaterpart of human work activity changes from production to service.  Computer developments in hardware, programming,time-sharing, education, data communication, and displays are judged by how effectively they remove thesebarriers, and their barrier-smashing potentialities indicate continued rapid expansion.  Problem-orientedlanguages are particularly effective over the entire front.  Online computers and time-sharing also rate highby this measure.  Education and increased understanding are basic to all progress with the computer.  This complexbut powerful tool is the most important one available to governments and scientists to use in studyingthe problems being created by the population explosion, and in analyzing possible solutions. | Harder, E. L..Kbarriers, philosophy, developments, computer-aided design,problem-oriented languages, data communication, education, computer science, forecast, survey, introduction.C1.0 1.3 2.1 3.24 4.0 6.20 6.30
1770 | Rules of Ethics in Information Processing | The background and motivation for the adoptionby the ACM Council on November 11, 1966, of a set of Guidelines for Professional Conduct in InformationProcessing are described.  A brief his tory is given of ethical codes in other professions.  Somereasons for and against adoption of ethical rules are considered, and several sections of the ACM Guidelinesare analyzed.  The purpose is to inform about this important aspect of our profession, aswell as to stimulate thought and interest. | Parker, D. B..Kethics, professional conduct, code of ethics, ACMguidelines, professionalism, professional societies, unethical conduct.C1.3 2.2
1771 | CURRICULUM 68 -- Recommendations for AcademicPrograms in Computer Science -- A Report of the ACM Curriculum Committee on Computer science | This report contains recommendations on academicprograms in computer science which were developed by the ACM Curriculum Committee on Computer Science. A classification of the subject areas contained in computer science is presented and twenty-two coursesin these areas are described.  Prerequisites, catalog descriptions, detailed outlines, and annotatedbibliographies for these courses are included.  Specific recommendations which have evolved from theCommittee's 1965 Preliminary Recommendations are given for undergraduate programs.  Graduate programs in computerscience are discussed and some recommendations are presented for the development of master's degree programs. Ways of developing guidelines for doctoral programs are discussed, but no specific recommendationsare made. The importance of service courses, minors, and continuing education in computer science isemphasized.  Attention is given to the organization, staff requirements, computer resources, and other facilitiesneeded to implement computer science educational programs.
1772 | USASCSOCR Dual Case Keyboard Arrangement* (Proposed USA Standard)
1773 | General Purpose Alphanumeric Keyboard Arrangementfor Information Interchange* (Proposed USA Standard)
1774 | Program Overlay Techniques | The general features of program overlay systemsare described.  Three main types -- automatic, semiautomatic and nonautomatic -- are classified, and theprogramming techniques are explained as a function of machine hardware and other system features.  Theimplementation of semiautomatic overlay facility in a multiprogrammed system on the CDC 6600 is describedin detail, with special reference to real time applications. | Pankhurst, R. J..Kloaders, multiprogramming, overlay techniques,storage allocation and segmentation.C4.39
1775 | Adjustment of the Inverse of a Symmetric Matrixwhen Two Symmetric Elements are Changed (Algorithm 325 [F1]) | Zielke, G..Ksymmetric matrix, matrix inverse, matrixperturbation, matrix modification.C5.14
1776 | Maxflow (Algorithm 324 [H]) | Bayer, G..Knetwork,liner programming, maximum flow.C5.41
1777 | Generation of Permutations in Lexicographic Order (Algorithm 323 [G6]) | Ord-Smith, R. J..Kpermutations, lexicographic order, lexicographicgeneration, permutation generation.C5.39
1778 | F-Distribution (Algorithm 322 [S14]) | Dorrer, E..KFisher's  F-distribution, Student's t-distribution.C5.5
1779 | t-Test Probabilities (Algorithm [S14]) | Morris, J..KT-test, Student's t-statistic, distribution function.C5.5
1780 | Harmonic Analysis for SymmetricallyDistributed Data (Algorithm 320 [C6]) | Hunter, D. B..Kharmonic analysis, cosine series, sine series, functionapproximation, curve fitting, trigonometric series.C5.13
1781 | Translator Writing systems | A critical review of recent efforts to automatethe writing of translators of programming languages is presented.  The formal study of syntax and its applicationto translator writing are discussed in Section II.  Various approaches to automating the post syntactic(semantic) aspects of translator writing are discussed in Section III, and several related topics in Section IV. | Feldman, J.Gries, D..Kcompiler, compiler-compiler, translator, translatorwriting systems, metacompiler, syntax, semantics, syntax-directed, meta-assembler, macroprocessor,parser, syntactic analysis, generator.C4.1 4.10 4.12 4.22 5.23
1782 | A Numerical Integration Formula Useful in Fourier Analysis | A numerical integration formula is presented whichuses unequal sampling intervals.  The intervals are equally spaced on a log scale.  Such a formulationis useful in Fourier analysis to improve accuracy and ease of usage.  A complete set of formulasfor numerical Fourier analysis is given. | Meisel, W. S..Knumerical integration, Fourier analysis, integration.C5.16
1783 | In-and-Out Conversions | Byan in-and-out conversion we mean that a floating-pointnumber in one base is converted into a floating-point number in another base and then convertedback to a floating-point number in the original base.  For all combinations of rounding and truncationconversions the question is considered of how many significant digits are needed in the intermediatebase to allow such in-and-out conversions to return the original number (when possible), or at least significant digit. | Matula, D. W..Kfloating-point numbers, significance,base conversion, rounding, truncation.C3.15 5.11
1784 | Practical Error Coefficients for EstimatingQuadrature Errors for Analytic Functions | All published error coefficients for estimatingquadrature errors for analytic functions were computed on the assumption that the quadrature rulewas exact for polynomials up to a given degree.  Since these rules use rounded values for the abscissas andweights and since the true values of the integrals of some of the polynomials in question have an infinitebinary expression, the quadrature rule is not exact.  Hence these errors must be taken into considerationin computing practical error coefficients. | Rabinowitz, P..Knumerical integration, quadrature, truncationerror, theoretical error coefficients, practical error coefficients, integration analytical functions, roundoff error.C5.11 5.16
1785 | Scatter Storage Techniques | Scatter storage techniques as a method forimplementing the symbol tables of assemblers and compilers are reviewed and a number of ways of usingthem more effectively are presented.  Many of the most useful variants of the techniques are documented. | Morris, R..Kscatter storage, hash addressing, searching,file searching, file addressing, storage layout.C3.73 3.74
1786 | An Improved Hash Code for Scatter Storage | Introduced is a hash coding method based onfixed-point division rather than multiplication or logical operations.  This new method allows thehash table to have almost any length.  Also a new method of handling collisions is discussed.  Known asquadratic search, this method is faster than random search and free from the "clusters" that build up with a linear search. | Maurer, W. D..Khash code, hash table, scatter storage, searching .C3.74 4.11 4.12 4.9
1787 | Use of Transition Matrices in Compiling | An algorithms is described which constructsfrom a suitable BNF grammar an efficient left-right recognizer for sentences of the corresponding language. The type of recognizer, used in a number of compilers, operates with a pushdown stack and witha transition matrix.  Two examples illustrate how such recognizers may be used effectively for otherpurposes besides the usual syntax checking. | Gries, D..Ktransition matrices, compilation, translation,grammar, context-free language, formal language, parsing.C4.12 5.23
1788 | Toward a General Processor for Programming Languages | Many efforts have been made to develop a betterway of implementing a higher level programming language than by the construction of a whole new compiler,but so far none has proved generally satisfactory.  In this paper, it is contended that a programminglanguage is best described functionally as a body of macro instructions, and that the macro call constitutesa canonical form in terms of which a programming notation may be described.  A supporting discussion of thelogical and his torical role of the macro instruction is presented.  Also discussed are the conflict betweenmachine independence and object program efficiency, and the question of where the greatest difficultieslie in compiler construction. | Halpern, M. J..Kprogramming language translator, programming languageprocessor, general translator, general processor, macro instruction processor; meta processor, meta languagetranslator, meta language processor, compiler-compiler, writing system, translator writing system.C4.10 4.11 4.12 4.20
1789 | Logarithm of Gamma Function (Algorithm 291 [S14]) | Hoare, M. R.
1790 | Muller's Method for Finding roots of anArbitrary Function  (Algorithm 196 [C5]) | Whitley, V. W..Kequation roots, function zeros .C5.15
1791 | Triangular Factors of Modified Matrices (Algorithm 319 [F1]) | Green, D. R..Kmatrix decomposition, matrix factors,matrix modifier, matrix perturbation.C5.14
1792 | Exploratory Experimental Studies ComparingOnline and Off line Programming Performance | Two exploratory experiments were conducted atSystem Development Corporation to compare debugging performance of programmers working under conditionsof on-line and off line access to a computer.  These are the first known studies that measure programmers'performance under controlled conditions for standard tasks.  Statistically significant results of both experimentsindicated faster debugging under online conditions, but perhaps the most important practical findinginvolves the striking individual differences in programmer performance.  Methodological problems encounteredin designing and conducting these experiments are described; limitations of the findings are pointedout; hypotheses are presented to account for results; and suggestions are made for further research. | Sackman, H.Erikson, W. J.Grant, E. E..Konline vs. off line performance, programmer/computercommunication, programming experimental-empirical studies, programming cost effectiveness, programmingperformance, debugging effectiveness, time sharing vs. batch processing, factor analysis application,programmer trainee performance, basic programming knowledge test, experienced programmer study, analysisof variance, programmer individual differences.C2.40
1793 | Presentation of Alphameric Characters for InformationProcessing* (Proposed American National Standard)
1794 | A Fast Random Number Generator for IBM 360 | Seraphin, D. S..Kpseudorandom number, modulus, period, float,normalization, characteristic, chi-square test.C4.49 5.19 5.5
1795 | Optimal Code for Serial and Parallel Computation | Fateman, R. J..Kcode optimization, sequencing of operations,detection of common subexpressions.C4.12
1796 | Index by Subject to Algorithms, 1969
1797 | Solution of Linear programs in 0-1 (Algorithm 341 [H]) | Proll, L. G..Klinear programming, zero-one variables, partial enumeration.C5.41
1798 | Coulomb Wave Functions (Algorithm 300 [S22]) | Kolbig, K. S..KCoulomb wave functions, wave functions,special functions, function evaluation.C5.12
1799 | Elementary Functions by Continued Fractions (Algorithm 229 [B1]) | Bray, T. A..Kcontinued factions, Pade table.C5.19
1800 | PSIF (Algorithm 147 [S14]) | Parsons, R. G..Kgamma function, logarithmic derivative, factorial function, psi function.C5.12
1801 | Analysis of Variance for Balanced Experiments (Algorithm 367 [G2]) | Claringbold, P. J..Kanalysis of variance, analysis of covariance, regressionanalysis, experimental design, balanced experiment, missing data, interblock estimate, intra block estimate.C5.14 5.5
1802 | Regression Using Certain Direct Product Matrices (Algorithm 366 [G2]) | Claringbold, P. J..Kanalysis of variance, analysis of covariance,regression analysis, experimental design, matrix direct product, protection operator, orthogonal matrix.C5.14 5.5
1803 | Complex Root Finding (Algorithm 365 [C5]) | Bach, H..Kdownhill method, complex relaxation method, complexiteration, complex equation, transcendental complex equation, algebraic complex equation.C5.15
1804 | Coloring Polygonal Regions (Algorithm 364 [Z]) | Herriot, R. G..Kcoloring polygonal regions, coloring planar surfaces,drawing pictures, shading enclosed regions.C4.9
1805 | Productivity of Multiprogrammed Computers-Progressin Developing an Analytic Prediction Method | Multiprogramming as it is discussed here isa mode of computer operation in which two or moreprograms are concurrently in processor memory and proceeding,each using the same central processor unit (CPU) and input-output (I/O) channels.  These programsare actually proceeding intermittently and singly, according to eligibility (readiness to proceed) and priority. It is useful to be able to represent them as proceeding continuously and simultaneously, eachat an effective rate, which may be a fraction of that which it would enjoy in the absence of the otherprograms.  The effective progress rate of each program is sensitive to many detailed characteristicsof itself and its co-residents and simulation has been the best available method of predicting it.  Thispaper presents the results of progress in developing an alternative to simulation, a simulation-tested iterativecomputation of these rates under certain situations.  The algorithm is sensitive to most of thefactors that control the phenomenon, including nonquantitative or topological features of the programs' structures. | Lasser, D. J..Kproductivity, prediction, multiprogramming, simulation,equipment  evaluation, hardware, evaluation, monitor, operating system, system software, supervisors,performance, time sharing, time slicing .C2.43 2.44 4.32
1806 | On the Downhill Method | The downhill method is a numerical method forsolving complex equations f(z) = 0 on which the only restriction is that the function w = f(z) mustbe analytical.  An introduction to this method is given and a critical review of relating literature ispresented.  Although in theory the method always converges, it is shown that a fundamental dilemma existswhich may cause a breakdown in practical applications.  To avoid this difficulty and to improve the rate ofconvergence toward a root, some modifications of the original method are proposed and a program (FORTRAN)based on the modified method is given in Algorithm 365.  Some numerical examples are included. | Bach, H..Kdownhill method, complex relaxation method, complexiteration, complex equation, transcendental complex equation, algebraic complex equation.C5.15
1807 | Optimization of Expressions in Fortran | A method of optimizing the computation ofarithmetic and indexing expressions of a Fortran program is presented.  The method is based on a linearanalysis of the definition points of the variables and the branching and DO loop structure of the program. The objectives of the processing are (1) to eliminate redundant calculations when references aremade to common subexpression values, (2) to remove invariant calculations from DO loops, (3) to efficientlycompute subscripts containing DO iteration variables, and (4) to provide efficient index register usage.  Themethod presented requires at least a three-pass compiler, the second of which is scanned backward.  Ithas been used in the development of several FORTRAN compilers that have proved to produce excellent objectcode without significantly reducing the compilation speed. | Busam, V. A.England, D. E..KFORTRAN, optimization, expressions, compilers,compilation, subscripts, register allocation, DO loops, common subexpressions, invariant calculations.C4.12
1808 | Advanced Cryptographic Techniques for Computers | Cryptographic techniques which can be used tomaintain the confidentiality of information processed by computers are dealt with.  Special emphasis is paidto the unique characteristics of computer files that make many cryptographic methods of little use. Relative security, costs, and preferred methods are included in this paper. | Van Tassel, D..Kcryptographic, cryptanalysis, ciphers secrecy systems,security systems, confidential information processing.C1.3 2.12 2.19 3.73 3.81 4.41
1809 | Numerical Analysis in a Ph.D. Computer Science Program | Numerical Analysis is the study of methods andprocedures used to obtain "approximate solutions" to mathematical problems.  Much of the emphasis is on scientificcalculation.  The difficulties of education in such a broad area center around the question of backgroundand emphasis.  The Numerical Analysis program in the Computer Science Department should emphasize anawareness of the problems of computer implementation and experimental procedures.  Nevertheless, there is aneed for a solid background in applied mathematics. | Parter, S. V..KPh.D. program, numerical analysis, course separation, education.C1.52
1810 | Is Automatic "Folding" of Programs Efficient Enough To Displace Manual? | The operation of "folding" a program intothe available memory is discussed.  Measurements by Brown et al. and by Nelson on an automatic foldingmechanism of simple design, a demand paging unit built at the IBM Research Center by Belady, Nelson,O'Neil, and others, permitting its quality to be compared with that of manual folding, are discussed,and it is shown that given some care in use the unit performs satisfactorily under the conditions tested,even though it is operating across a memory-to-storage interface with a very large speed difference.  The disadvantagesof prefolding, which is required when the folding is manual, are examined, and a number ofthe important troubles which beset computing today are shown to arise from, or be aggravated by, thissource.  It is concluded that a folding mechanism will probably become a normal part of most computing systems. | Sayre, D..Kpaging, automatic paging, demand paging, folding,automatic folding, storage hierarchies, memory hierarchies, replacement algorithms, performance, measurement.C4.0 4.19 4.39 6.20 6.34
1811 | A Case Study in Programming for Parallel-Processors | An affirmative partial answer is provided tothe question of whether it is possible to program parallel-processor computing systems to efficiently decreaseexecution time for useful problems.  Parallel-processor systems are multiprocessor systems in which several ofthe processors can simultaneously execute separate tasks of a single job, thus cooperating to decreasethe solution time of a computational problem. The processors have independent instruction counters, meaningthat each processor executes its own task program relatively independently of the other processors.  Communicationbetween cooperating processors is by means of data in storage shared by all processors.  Aprogram for the determination of the distribution of current in an electrical network was written for aparallel-processor computing system, and execution of this program was simulated.  The data gathered fromsimulation runs demonstrate the efficient solution of this problem, typical of a large class of importantproblems.  It is shown that, with proper programming, solution time when N processors are applied approaches1/N times the solution time for a single processor, while improper programming can actually lead to an increaseof solution time with the number of processors.  Stability of the method of solution was also investigated. | Rosenfeld, J. L..Kparallel-processor, parallelism, parallel programming,multiprocessor, multiprogramming, tasking, storage interference, electrical network, simulation,relaxation, Jacobi, Gauss-Seidel, convergence.C3.24 4.9 5.14 5.17 6.21
1812 | More on Fortran Random Number Generators | Grosenbaugh, L. R..Krandom number generation, Monte Carlo, simulation.C5.5
1813 | Generation of Permutations in Pseudo-LexicographicOrder (Algorithm 308 [G6]) | Ord-Smith, R. J..Kpermutations, lexicographic order, lexicographicgeneration, permutation generation.C5.39
1814 | Direct Search (Algorithm 178 [E4]) | Smith, L. B..Kfunction minimization, search, direct search.C5.19
1815 | Direct Search (Algorithm 178 [E4]) | Tomlin, F. K.Smith, L. B..Kfunction minimization, search direct search.C5.19
1816 | Generalized Least Squares Fit By OrthogonalPolynomials (Algorithm 296 [E2]) | Watson, W. T..Kleast squares, curve fitting, orthogonal polynomials,three-term recurrence, polynomial regression, approximation, Forsythe's method.C5.13 5.5
1817 | Computation of Fourier Coefficients (Algorithm 255 [C6]) | Hall, G.Ray, V. A..Knumerical integration, Fourier coefficients, Filon's method.C5.16
1818 | Associated Legendre Functions of the First Kindfor Real or Imaginary Arguments (Algorithm 47 [S16]) | Cobb, S. M..KLegendre function, associated Legendrefunction, real or imaginary arguments.C5.12
1819 | Complex Error Function (Algorithm 363 [S15]) | Gautschi, W..Kerror function for complex argument, Voigt function,Laplace continued fraction, Gauss-Hermite quadrature, recursive computation.C5.12
1820 | Generation of Random Permutations (Algorithm 362 [G6]) | Robson, J. M..Kpermutation, random permutation, transposition.C5.5
1821 | Permanent Function of a Square Matrix I and II (Algorithm 361 [G6]) | Shriver, B.Eberlein, P. J.Dixon, R. D..Kmatrix, permanent, determinant.C5.30
1822 | Shortest-Path Forest with Topological Ordering (Algorithm [H]) | Dial, R. B..Kshortest path, tree, network, directed graph.C5.32 5.42
1823 | Factorial Analysis of Variance (Algorithm [G1]) | Howell, J. R..Kfactorial variance analysis, variance, statistical analysis.C5.5
1824 | APAREL-A Parse-Request Language | APAREL is described: this language is an extensionto an algorithmic language (PL/I) that provides the pattern-matching capabilities normally found onlyin special purpose languages such as SNOBOL4 and TMG.  This capability is provided through parse-requestsstated in a BNF-like format.  These parse-requests form their own programming language with special sequencingrules.  Upon successfully completing a parse-request, an associated piece of PL/I code is executed.  Thiscode has available for use, as normal PL/I strings the various pieces (at all levels) of the parse.  Italso has available as normal PL/I variables, theinformation concerning which of the various alternativeswere successful.  Convenient facilities for multiple input-output streams, the initiation of sequencesof parse-requests as a subroutine, and parse-time semantic checks are also included.  APAREL has proven convenient in building a powerful SYNTAX and FUNCTION macro system, an algebraic language preprocessor debuggingsystem, an on-line command parser, a translator for Dataless Programming, and as a general string manipulator. | Balzer, R. M.Farber, D. J..Ktext processing, string processing, symbol manipulation,PL/I, BNF, syntax, parser, translator, pattern matching.C4.12 4.13 4.20 4.22 4.29
1825 | A Practical Method for Constructing LR(k) Processors | A practical method for constructing LR(k) processorsis developed.  These processors are capable of recognizing and parsing an input during a singleno-backup scan in a number of steps equal to the length of the input plus the number of steps in itsderivation.  The technique presented here is based on the original method described by Knuth, but decreasesboth the effort required to construct the processor and the size of the processor produced.  This procedureinvolves partitioning the given grammar into a number of smaller parts.  If an LR(k) processor can beconstructed for each part (using Knuth's algorithm) and if certain conditions relating these individualprocessors are satisfied, then an LR(k) processor for the entire grammar can be constructed for them. Using this procedure, an LR(1) parser for ALGOL has been obtained. | Korenjak, A. J..KLR(k) grammar, syntactic analysis, parser, deterministiclanguage, syntax-directed compiler, languageprocessor, context-free language ALGOL.C4.12 5.2 5.23
1826 | A LISP Garbage-Collector for Virtual-Memory Computer Systems | In this paper a garbage-collection algorithmfor list-processing systems which operate within very large virtual memories is described.  The objectof the algorithm is more the compaction of active storage than the discovery of free storage.  Because freestorage is never really exhausted, the decision to garbage collect is not easily made; therefore,various criteria of this decision are discussed. | Fenichel, R. R.Yochelson, J. C..Kgarbage-collector, virtual memory, list-processing, storage-allocation.C4.19 4.49
1827 | Performance Monitoring in a Time-Sharing System | A software measurement facility which is part ofa general purpose time-sharing system is described.  The Date Collection Facility (DCF) has been implementedin the Michigan Terminal System (MTS) for the System/360 model 67.  It exists for the purpose of monitoringoperating system and user program behavior and performance.  The overall structure of MTS is outlinedin order to explain the implementation of the DCF.  Events in the system are identified and recordedfrom within the supervisor, and dumped to magnetic tape by an auxiliary program for off-line processing. Events in user programs which are unrelated to system actions are recorded with a supervisor call. The time of occurrence of each event is accurately recorded, and data items are further identified by job andtype.  The overhead associated with data collection and its interference with normal jobs is carefully analyzed,and both are shown to be minimal.  Several examples are given of information obtained with thefacility and of applications in which it has been useful.  Some general guidelines are offered forthe construction of future monitoring programs. | Pinkerton, T. B..Kperformance monitoring, performance measurement,program behavior, performance data, multiprogramming performance, software measurement, time-sharing performance,system evaluation, software monitor, software instrumentation.C4.31 4.32 4.39 4.42 4.43
1828 | Synchronization in a Parallel-Accessed Data Base | The following problem is considered:  Givena data base which can be manipulated simultaneously by more than one process, what are the rules for synchronizationwhich will maximize the amount of parallel activity allowed.  It is assumed that the data basecan be represented as a graph.  An example of such a data base is a hierarchy of directories for an on-linefile system.  Methods for synchronization of processes are examined; their validity isdiscussed and their performance compared. | Shoshani, A.Bernstein, A. J..Kparallel accessing, parallel search, file search,data base, synchronization, locking, deadlock.C3.73 3.74 4.32
1829 | An Interactive Graphical Display Monitor ina Batch-Processing Environment with Remote Entry | A graphic monitor program is described.  Itwas developed at Carnegie-Mellon University for the CDC G21 computer, which is a general purpose, batch-processingsystem with remote entry.  The existing G21 system and the graphics hardware are described. The graphic monitor is a resident auxiliary monitor which provides comprehensive managerial capabilityover the graphical system in response to commands from the human user.  It also will respond to commandsfrom a user program through a similar interface, where routine calls take the place of manual actions.  Thusthe human and program can interact on a symmetrical and equal basis through the medium of the graphic monitor. The choice made in designing the graphic monitor, given the constraints of the existing hardwareand computer system, are discussed.  The structure of the monitor program and the human and program interfacesare described.  There is also a transient swapping version with a small resident part,and provision for swapped used submonitors. | Bond, A. H.Rightnour, J..Kgraphic monitor, man/machine interaction, graphicinterface, graphic in batch environment, design of graphical system.C4.30 4.31 4.39 4.41
1830 | Retrieval Times for a Packed Direct Access Inverted File | Bayes, A. J..Kinformation retrieval, direct access memory, data base, inverted list.C3.70 4.41
1831 | A Comment on Optimal Tree Structures | Stanfel, L. E..Kinformation retrieval, file searching, tree structures, double chaining.C3.70 3.73 3.74
1832 | Minimax Logarithmic Error | Dunham, C. B..Klogarithmic error, transformed rational approximation, square root.C5.10
1833 | An Ambiguity in the Description of ALGOL 60 | Herriot, J. G..KIsing problem, zero-one sequences.C5.39
1834 | An Axiomatic Basis for Computer Programming | In this paper an attempt is made to explorethe logical foundations of computer programming by use of techniques which were first applied in thestudy of geometry and have later been extended to other branches of mathematics.  This involves the elucidationof sets of axioms and rules of inference which can be used in proofs of the properties of computerprograms.  Examples are given of such axioms and rules, and a formal proof of a simple theorem isdisplayed.  Finally, it is argued that important advantages, both theoretical and practical, mayfollow from a pursuance of these topics. | Hoare, C. A. R..Kaxiomatic method, theory of programming, proofs ofprograms, formal language definition, programming language design, machine-independent programming, program documentation.C4.0 4.21 4.22 5.20 5.21 5.23 5.24
1835 | The IITRAN Programming Language | The IITRAN language, developed to be usedby students, and its important important features are described. IITRAN is a procedure-oriented languagewith a one-level block structure and a variety of data types.  Several novel and powerful featuresare included.  A discussion of design principles to be followed in a student language is given. | Dewar, R. B. K.Hochsprung, R. R..Klanguages programming languages, student programmingsystems, language design, high school programs, college courses.C1.51 1.52 4.12 4.22
1836 | A New Method for Determining Linear PrecedenceFunctions for Precedence Grammars | The precedence relations of a precedence grammar canbe precisely described by a two-dimensional precedence matrix.  Often the information in the matrixcan be represented more concisely by a pair of vectors, called linear precedence functions.  A new algorithmis presented for obtaining the linear precedencefunctions when given the precedence matrix; this algorithmis shown to possess several computational advantages. | Bell, J. R..KBoolean matrices, syntax, precedence grammar context-freeparsing, transition matrix, precedence functions .C4.12
1837 | An Algol Convolution Procedure Based on theFast Fourier Transform (Algorithm 345 [C6]) | Singleton, R. C..Kfast Fourier transform, complex Fourier transform,multivariate Fourier transform, Fourier series, harmonic analysis, spectral analysis, orthogonal polynomials,orthogonal transformation, convolution, auto covariance, autocorrelation, cross-correlation,digital filtering, permutation.C3.15 3.83 5.12 5.14
1838 | Normal Curve Integral (Algorithm 304 [S15]) | Adams, A. G..Knormal curve integral, probability, special functions.C5.5 5.12
1839 | Singular Value Decomposition of a ComplexMatrix (Algorithm 358 [F1, 4,5]) | Businger, P. A.Goulub, G. H..Ksingular values, matrix decomposition,least squares solution, pseudoinverse.C5.14
1840 | An Efficient Prime Number Generator (Algorithm 357 [A1]) | Singleton, R. C..Kprime numbers, factoring, number theory.C3.15 5.30
1841 | A Prime Number Generator Using TheTreesort Principle (Algorithm 356 [A1]) | Singleton, R. C..Kprime numbers, number theory, sorting.C3.15 5.30 5.31
1842 | An Algorithm for Generating Ising Configurations (Algorithm 355 [Z]) | Simoes, J. M. S..KIsing problem, zero-one sequences.C5.39
1843 | The Choice of Base | A digital computer is considered, whose memorywords are composed on N r-state devices plus two sign bits (two state devices).  The choice of baseB for the internal representation of floating-point numbers on such a computer is discussed.  It isshown that in a certain sense B= r is best. | Brown, W. S.Richman, P. L..Kfloating-point, accuracy, base choice, number representations.C5.11 6.32
1844 | A Modular Computer Sharing System | An alternative approach to the design and organizationof a general purpose interactive multiterminal computing system is presented.  The system organization describedis a conceptually simple arrangement of a bank of interchangeable computers, each of whichis a memory/processor pair, that are assigned to process terminal jobs as they arrive.  One of the computersserves as the master or control computer and supervises the collection and distribution of messagesfrom and to the remote terminals.  In the simplest form there is a disk drive for each connectedterminal.  A crosspoint switching network allows any such disk drive to be connected to any computer. Thus, while each active terminal user "occupies" a dedicated disk drive, he may share the computer withmany other terminal users in a simple manner.  The ratio of users to computers is dependent on boththe size and power of the machines used and the computation requirements of the particular mix of users. This system organization is inherently a simpler and therefore more reliable approach to time-sharing computersand has the potential of a highly available system at relatively low cost.  Economic configurationsare possible for a range of systems sizes that span at least one order of magnitude.  Finally, problemprograms developed by remote terminal users can be run on a dedicated batch system if compatible computers are used. | Baskin, H. B.Horowitz, E. B.Tennison, R. D.Rittenhouse, L. E..Kmultiple terminal systems, terminal oriented systems,multiple processor systems, high availability, conversational systems, general purpose time-sharing systems,real-time response system, modular constructed systems, modular computer-sharing systems, graphics,file switch, intercomputer communications, control computer, problem computer, roll-in, roll-out.C6.21
1845 | Loader Standardization for Overlay Programs | The overlay capability is described for fourof the third generation computer systems: CDC-6000, GE-635, IBM-360, and UNIVAC-1108.  A critique of thefirst three systems is based on actual experience with a large overlaid trajectory simulation program;a short history and description of this program is presented.  A standardization of minimum capabilitiesfor loaders is recommended so that programs which must operate under more than one computer systemmay be easily converted and maintained.  A proposal that overlay software incorporates a memory occupationspecification concept instead of the conditional tree structure is delineated.  This concept providesmore efficient and cost-effective utilization of the memory as well as increased flexibility in program structure. | Lanzano, B. C..Kloader, overlay, partition, region, segmentation,linkage, linkage editor, standardization, memory utilization, memory occupation, tree structure,CDC-6000, GE-635, IBM-360, UNIVAC-1108.C4.10 4.12 4.19 4.40
1846 | On Simulating Networks of Parallel Processesin Which Simultaneous Events May Occur | Some of the problems of simulating discreteevent systems, particularly computer systems, on a conventional digital computer are dealt with.  Thesystems are assumed to be described as a network of interconnected sequential processes.  Briefly reviewedare the common techniques used to handle such simulations when simultaneous events do not occur, canbe ignored, or can be handled by simple priority rules.  Following this, the problem of dealing with simultaneousevents in separate processes is introduced.  An abstraction of this problem is developed which admitssolution for a majority of commonly encounteredproblems.  The technique will either find a method ofsimulating the parallel events or report that none can be found.  In some of the latter cases it is shownto be possible to find a solution by extending the information available to the solution technique, butin many cases the technique becomes computationally unfeasible when the additional information is provided. | Parnas, D. L..Ksimulation, parallel processes, simultaneous events,picture processing, computer system simulation.C3.19 3.24 4.24 5.9 6.9
1847 | An Algorithm for Finding a Fundamental Set of Cycles of a Graph | A fast method is presented for finding a fundamentalset of cycles for an undirected finite graph.  A spanning tree is grown and the vertices examinedin turn, unexamined vertices being stored in a pushdown list to await examination.  One stagein the process is to take the top element v of the pushdown list and examine it, i.e. inspect all thoseedges (v,z) of the graph for which z has not yet been examined.  If z is already in the tree, a fundamentalcycle is added; if not, the edge (v,z) is placed in the tree.  There is exactly one such stagefor each of the n vertices of the graph.  For large n, the store required in creases as n^2 and the time asn^g where g depends on the type of graph involved.  g is bounded below by 2 and above by 3, and it is shownthat both bounds are attained.  In terms of storage our algorithm is similar to that of Gotlieb andCorneil and superior to that of Welch; in terms of speed it is similar to that of Welch and superiorto that of Gotlieb and Corneil.  Testsshow our algorithm to be remarkably efficient (g=2) on random graphs. | Paton, K..Kfundamental cycle set, graph, algorithm, cycle, spanning tree.C5.32
1848 | The Damped Taylor's Series Method for Minimizinga Sum of Squares and for Solving Systems of Nonlinear Equations (Algorithm 315 [E4, C5]) | Silverman, G..Ksolution of equations, least squares approximation, Newton's method.C5.13 5.14 5.15
1849 | Function Minimization (Algorithm 251 [E4]) | Hamilton, P. A.Boothroyd, J..Kfunction minimization.C5.19
1850 | Generation of Permutations in Lexicographic Order (Algorithm 323 [G6]) | Leitch, I. M..Kpermutations, direct lexicographic order, reverselexicographic order, lexicographic generation.C5.39
1851 | Generator of Spanning Trees (Algorithms 354 [H]) | McIlroy, M. D..Kspanning trees, trees, graphs.C5.32
1852 | A Base for a Mobile Programming System | An algorithm for a macro processor which hasbeen used as the base of an implementation, by bootstrapping, of processors for programming languages isdescribed.  This algorithm can be easily implemented on contemporary computing machines.  Experience withprogramming languages whose implementation is basedon this algorithm indicates that such a language canbe transferred to a new machine in less than one man-week without using the old machine. | Orgass, R. J.Waite, W. M..Kbootstrapping, macro processing, machine independence,programming languages, implementation techniques.C4.12 4.22
1853 | Compact List Representation: Definition,Garbage Collection, and System Implementation | Compact lists are stored sequentially in memory,rather than chained with pointers.  Since this is not always convenient, the Swym system permitsa list to be chained, compact, or any combination of the two.  A description is given of that list representationand the operators implemented (most are similar to those of LISP 1.5).  The system garbage collectorattempts to make all lists compact; it relocates and rearranges all of list storage using temporary storage. This unique list-compacting garbage collection algorithm is presented in detail.  Several classes of themacros used to implement the system are described.  Finally, consideration is given to those design factorsessential to the success of a plex processing system implementation. | Hansen, W. J..Kdata structure, data representation, list structure,list representation, list, compact list, garbage collection, relocation, storage reclamation, macro,primitive list operations, plex processing, plex, pointer, list processing system, LISP, free storage.C3.49 4.20 4.22 4.49 4.9
1854 | On Multiprogramming, Machine Coding, and Computer Organization | The author feels that the interrupt featurewhich is available in most modern computers is a potent source of programming pitfalls and errors, andthat it therefore may heavily contribute to the unreliability of programs making use of it.  A programmingscheme is presented which avoids the concept of the interrupt and permits the specification of concurrent(or pseudoconcurrent) activities in a supposedly more perspicuous manner.  It is intended to serve asa basis for the construction of operating systems, which are prime examples of programs with concurrentactivities.  The scheme includes a set of basic instructions for the generation, termination, and synchronizationof parallel processes.  A set of routines representing these instructions and thereby simulating ahypothetical machine organization has been implemented and test on the IBM System/360.  Two programs using theseinstructions, written in PL360, are presented.  | Wirth, N..Kmultiprogramming, parallelism, interrupt, input-output,computer organization, file handling, PL360.C4.21 4.22 4.32 4.41 6.21
1855 | A Program for the Syntactic Analysis of English Sentences | A program is described which produces syntacticanalyses of English sentences with respect to a transformational grammar.  The main features of theanalyzer are that it uses only a limited dictionary of English words and that it pursues all analysis pathssimultaneously while processing the sentence from left to right.  The form of representation usedfor the dictionary and the grammar is indicated and an outline account is given of the analysis procedure. Techniques for keeping the size of the analysis record within reasonable limits and for avoiding the needfor dynamic application of certain transformational rules are described.   A number of examples of outputproduced by the program are given.  The output includes timing information. | Dewar, H.Bratley, P..Ksyntactic analysis, language processing, languageanalysis, parsing, analysis procedure, recognition procedure, English sentences, linguistics, psycholinguistics,transformational grammar, limited dictionary, predictive analysis.C3.42 3.36
1856 | The Teachable Language Comprehender: A Simulation Program and Theory of Language | The Teachable Language Comprehender (TLC) isa program designed to be capable of being taught to "comprehend" English text.  When text which the programhas not seen before is input to it, it comprehends that text by correctly relating each (explicit or implicit)assertion of the new text to a large memory.  This memory is a "semantic network" representing factualassertions about the world.  The program also creates copies of the parts of its memory which havebeen found to relate to the new text, adapting and combining these copies to represent the meaning of thenew text.  By this means, the meaning of all text the program successfully comprehends is encoded intothe same format as that of the memory.  In this form it can be added into the memory.  Both factualassertions for the memory and the capabilities for correctly relating text to the memory's prior contentare to be taught to the program as they are needed.  TLC presently contains a relatively small number ofexamples of such assertions and capabilities, but within the system, notations for expressing either of theseare provided.  Thus the program now corresponds to a general process for comprehending language, andit provides a methodology for adding the additional information this process requires to actually comprehendtext of any particular kind.  The memory structure and comprehension process of TLC allow new factual assertionsand capabilities for relating text to such stored assertions to generalize automatically.  Thatis, once such an assertion or capability is put into the system, it becomes available to help comprehenda great many other sentences in the future.  Thus the addition of a single factual assertion orlinguistic capability will often provide a large increment in TLC's effective knowledge of the world andin its overall ability to comprehend text.  The program's strategy is presented as a general theory of language comprehension. | Quillian, M. R..Knatural language processing, natural language comprehension,teachable computer program, psychological simulation, human memory simulation, computerlinguistics, linguistic performance theory.C3.36 3.42 3.62 3.65 3.74
1857 | Filon Quadrature (Algorithm [D1]) | Chase, S. M.Fosdick, L. D..Kquadrature, Filon quadrature, integration, Filonintegration, Fourier coefficients, Fourier series.C5.16
1858 | An Algorithm for Filon Quadrature | An algorithm for Filon quadrature is described. Considerable attention has been devoted to an analysis of the round-off and truncation errors. The algorithm includes an automatic error control feature. | Chase, S. M.Fosdick, L. D..Kquadrature, Filon quadrature, integration, Filonintegration, Fourier coefficients, Fourier series.C5.16
1859 | Error Bounds for Periodic Quintic Splines | Explicit error bounds for periodic quintic splineinterpolation are developed.  The first (third) derivative of the periodic spline is shown to be a sixth(fourth) order approximation at the mesh points to the first (third) derivative of the function being interpolated. | Hall, C. A..Kspline, interpolation, error bounds.C5.1 5.13
1860 | An Algol-Based Associative Language | A high level programming language for large,complex associative structures has been designed and implemented.  The underlying data structure hasbeen implemented using a hash-coding technique.  The discussion includes a comparison with other workand examples of applications of the language. | Feldman, J. A..KALGOL, associative, programming language, data structure.C4.22
1861 | The MAD Definition Facility | One of the first definition facilities forhigher level languages is described.  Users of the language can define new operators and/or data typesinto the MAD language, so that their use appears as if they were predefined.  Information is given onhow one writes definitions, as well as on much of the motivation behind the form in which definitions arewritten. Some conclusions are drawn about future definitional facilities. | Arden, B. W.Galler, B. A.Graham, R. M..KMAD, definitions, operators, macros, higher level language.C4.12 4.22
1862 | Computing Capabilities at Argentine and Chilean Universities | The author reports on a trip to universities inArgentina and Chile during November 1968, describing university conditions and computing activities.  As elsewhere,these universities are experiencing student discontent with the status quo and the solutions theyare attempting contrast: Argentina is excluding students from participating in university government;Chile is allowing such participation.  University computing service and academic activities are limited. The number of computers is small and so is the capacity, none larger than an IBM 360/40; with someexception, computing science academic programs are rare. This situation is by no means attributable tothose responsible for computing developments, who strive for excellence; rather the "system" is hard toover-come.  Universities, especially those with strong European traditions, adapt slowly to new academicresources and disciplines; superimposed are the severe technological and economic constraints of thedeveloping nation.  Consequently, in the absence of conscious government emphasis on strengthening computingcapabilities, future progress may be retarded. | Finerman, A..Kuniversity education, computing science academicprograms, university computing centers, surveys of computing centers, university computing capabilities, university-studentrelationship, Argentine universities, Chilean universities, South American universities, developing nations.C1.52 2.0 2.45
1863 | Minit Algorithm for Linear Programming (Algorithm 333 [H]) | Messham, D. K..Klinear programming, dual simplex method, primal problem, dual problem.C5.41
1864 | Generation of Hilbert Derived Test Matrix (Algorithm 274 [F1]) | Boothroyd, J..Ktest matrix, Hilbert matrix.C5.14
1865 | Algol 60 Reference Language Editor (Algorithm 268 [R2]) | Sauer, G..Ksymbol manipulation.C4.49
1866 | Characteristic Values and Associated Solutionsof Mathieu's Differential Equation (Algorithm 352 [S22]) | Clemm, D. S..KMathieu's differential equation, Mathieu function,characteristic value, periodic solution, radial solution.C5.12
1867 | On the Expected Lengths of Sequences Generatedin Sorting by Replacement Selecting | In the replacement-selecting technique of sorting,one is interested in the ratio L(j) of the expected length of the j-th sequence generated by thetechnique to the number of memory cells used.  Using complex-variable theory, it is shown that L(j)-> 2 and that, asymptotically, the average interval between sign changes of L(j)-2 is 2.6662. | Hooker, W. W..Kreplacement selecting, sorting, sequence lengths,asymptotic expected length, recursion relation, generating function, meromorphic function.C3.74 5.31
1868 | On Obtaining Correct Input:A New Approach | Most information put into machine readableform, whether from scientific or business origins, is still keypunched.  This paper is addressed towardthe difficulty of obtaining correctly keypunched and key verified data and an alternative method is suggestedin which the computer itself is used to rule out the possibility of errors in input.  This techniqueis explained and illustrated by reference to a working program which involves essentially two phases:in the first phase errors are detected by the machine, and subsequently, in the second phase, they are corrected by it. | Kennedy, M..Kcorrect data, correct input, data correction,keypunch, key verifier, verifier.C2.40 2.42 2.43 3.10 3.20 3.50 4.41
1869 | Block Structures, Indirect Addressing, and Garbage Collection | Programming languages have included explicitor implicit block structures to provide a naming convenience for the programmer.  However, when indirectaddressing is used, as in SNOBOL, naming constraints may be introduced.  Two modifications to SNOBOL are described,resulting in two desirable consequences: (1) naming constraints disappear even when there isindirect addressing within function definitions; and (2) there is a significant saving in the number ofcalls to the garbage collector, because some garbage is collected, at little expense, each time a functionreturns to its calling program.  These modifications have been implemented as an extension to a SNOBOL dialect. | Kain, R. Y..Kblock structures, indirect addressing,garbage collection, local names, SNOBOL.C4.22
1870 | Some Techniques for Using Pseudorandom Numbers in Computer Simulation | An algorithm is described by which uniform pseudorandomintegers may be used to construct binary "numbers" in which the probability that each bit in theword is a 1-bit and can assume any desired parameter value.  Techniques for making use of such "numbers"in simulation programming are described. | Donnelly, T..Krandom numbers,  simulation, Boolean algebra, bit manipulation.C5.19 5.39
1871 | Automatic Contour Map | Some methods for contour mapping by means ofa digital plotter are discussed, and a new method is presented that is simple enough to be implemented byprograms with a rather small number of instructions (about 120 FORTRAN IV instructions are required).  Comparisonswith some methods proposed by other authors are also performed,  A FORTRAN IV program implementingthe proposed method is available at the Istituto di Elettrotecnica ed Elettronica, Politencnico di Milano. | Cottafava, G.LeMoli, G..Kcontour map, level lines, digital plotting, function scanning.C3.10 3.13 3.14 3.16 3.20 3.24
1872 | Chebyshev Interpolation and QuadratureFormulas of Very High Degree (Errata) | Salzer, H. E.
1873 | Accelerating LP Algorithms | It is shown how a novel method for computing(related) inner products can accelerate the pricing phase of LP algorithms.  Other LP applications are indicated. | Fox, B. L..Klinear programming, revised simplexmethod, multiple pricing, inner product.C5.19 5.41
1874 | Generating Pseudorandom Numbers on a Two'sComplement Machine such as the IBM 360 | The familiar multiplicative congruential generatoris examined in the context of the type of two's complement arithmetic used in the IBM 360 series. Different sequences of residues are considered and relationships established among them.  It is shownthat a sequence of positive and negative residues may be produced more simply and economically than withthe conventional approach and yet have twice the period of the latter without loss of desirable statisticalproperties.  Another easily generated sequence involving absolute values is also shown to have twicethe period but with less attractive statistical properties.  The statistical properties of these sequencesare given and related to previously established criteria. | Hemmerle, W. J..Krandom number, uniform distribution, pseudo-randomnumber, random number generator, multiplicative congruential generator, power residue, two'scomplement arithmetic, IBM 360 arithmetic.C3.15 5.5 6.32
1875 | Polynomial and Spline Approximation by Quadratic Programming | The problem of approximation to a given function,or of fitting a given set of data, where the approximating function is required to have certainof its derivations of specified sign over the whole range of approximation, is studied.  Two approachesare presented, in each of which quadratic programming is used to provide both the constraints on the derivativesand the selection of the function which yields the best fit.  The first is a modified Bernstein polynomialscheme, and the second is a spline fit. | Amos, D. E.Slater, M. L..Kconstant sign derivatives, Bernstein polynomials,linear concavity constraints, quadratic programming splines.C5.13 5.41
1876 | Generation of Test Matrices Having CertainSign Patterns and Prescribed Positive Spectra | A class of orthogonal transformations is presentedwhose members transform a given positive diagonal matrix into a matrix having one of four special sign patterns. | Schneider, A. J..Ktest matrices, positive matrices, sign patterns,orthogonal transformations, positive eigenvalues.C5.1 5.14
1877 | Prevention of System Deadlocks | A well-known problem in the design of operatingsystems is the selection of a resource allocation policy that will prevent deadlock.  Deadlock is thesituation in which resources have been allocated to various tasks in such a way that none of the taskscan continue.  The various published solutions have been somewhat restrictive: either they do not handlethe problem in sufficient generality or they suggest policies which will on occasion refuse a requestwhich could have been safely granted.  Algorithms are presented which examine a request in the light ofthe current allocation of resources and determine whether or not the granting of the request will introducethe possibility of a deadlock.  Proofs given in the appendixes show that the conditions imposed bythe algorithms are both necessary and sufficient to prevent deadlock.  The algorithms have been successfully used in the THE system.	 | Habermann, A. N..Kmultiprogramming, time-sharing, scheduling, resource allocation.C3.72 4.32 6.20
1878 | Recovery of Reentrant List Structures in SLIP | One consequence of the reference-count-basedspace-recovery system employed by SLIP is that reentrant list structures are not recovered even whenexplicitly erased.  LISP-like garbage-collection schemes are free of this impediment.  They however,depend on being able to find and mark nodes that are reachable from program variables.  By tracing alldescendants from program variables may then be identified and collected.  The list-creating functionLIST of SLIP may be amended to mark those lists for which the programmer wishes to assume responsibility. Given this modification, a LISP-like garbage collector that recovers abandoned reentrant list structuresmay then be appended to the SLIP system. | Weizenbaum, J..Klist processing, SLIP, garbage-collection.C4.22 4.40
1879 | A Note on Storage Fragmentation and Program Segmentation | The main purpose of this paper is the presentationof some of the results of a series of simulation experiments investigating the phenomenon of storage fragmentation. Two different types of storage fragmentation are distinguished: (1) external fragmentation, namely theloss in storage utilization caused by the inability to make use of all available storage after it has beenfragmented into a large number of separate blocks; and (2) internal fragmentation, the loss of utilizationcaused by rounding up a request for storage, rather than allocating only the exact number of words required. The most striking result is the apparently general rule that rounding up requests for storage,to reduce the number of different sizes of blocks coexisting in storage, causes more loss of storageby increased internal fragmentation than is saved by decreased external fragmentation.  Described also area method of segment allocation and an accompanying technique for segment addressing which take advantageof the above result.  Evidence is presented of possible advantages of the method over conventional paging techniques. | Randell, B..Kstorage allocation, storage fragmentation,paging, segmentation, addressing.C6.2 6.20
1880 | Chebyshev Solution to an OverdeterminedLinear System (Algorithm 328 [F4]) | Golub, G. H..KChebyshev solutions, over-determined linearsystems, linear equations, exchange algorithm .C5.13 5.14 5.41
1881 | Transpose Vector Stored Array (Algorithm 302 [K2]) | MacLeod, I. D. G..Kmatrix transposition, array transposition, vector stored array.C5.39
1882 | Determination of the Square Root of a PositiveDefinite Matrix (Algorithm 298 [F1]) | Duke, B. J..Kmatrix, symmetric matrix, positive definite matrix, matrix square root.C5.14
1883 | Modified Romberg Quadrature(Algorithm [D1]) | Fair weather, G..Knumerical integration, Romberg quadrature,trapezoid values, rectangle values, error bound.C5.16
1884 | An Anomaly in Space-Time Characteristics ofCertain Programs Running in a Paging Machine | The running time of programs in a paging machinegenerally increases as the store in which programs are constrained to run decreases.  Experiments,however, have revealed cases in which the reverse is true: a decrease in the size of the store is accompaniedby a decrease in running time.  An informal discussion of the anomalous behavior is given, and forthe case of the FIFO replacement algorithm a formal treatment is presented. | Belady, L. A.Nelson, R. A.Shedler, G. S..Kpaging machines, demand paging, replacement algorithm.C4.30
1885 | A Computer System for Transformational Grammar | A comprehensive system for transformationalgrammar has been designed and implemented on the IBM 360/67 computer.  The system deals with the transformationalmodel of syntax, along the lines of Chomsky's Aspects of the Theory of Syntax. The majorinnovations include a full,formal description of the syntax of a transformational grammar, a directed randomphrase structure generator, a lexical insertion algorithm, an extended definition of analysis, anda simple problem-oriented programming language in which the algorithm for application of transformationscan be expressed.  In this paper we present the system as a whole, first discussing the general attitudes underlyingthe development of the system, then outlining the system and discussing its more importantspecial features.  References are given to papers which consider some particular aspect of the system in detail. | Friedman, J..Ktransformational grammar, natural language syntax,language processing, language analysis, sentence generation, lexical insertion, computational linguistics, syntax.C3.42
1886 | Generation of Optimal Code for Expressions via Factorization | Given a set of expressions which are to becompiled, methods are presented for increasing the efficiency of the object code produced by first factoringthe expressions, i.e. finding a set of subexpressions each of which occurs in two or more other expressionsor subexpressions.  Once all the factors have been ascertained, a sequencing procedure is applied whichorders the factors and expressions such that all information is computed in the correct sequence and factorsneed be retained in memory a minimal amount of time.  An assignment algorithm is then executed inorder to minimize the total number of temporary storage cells required to hold the results of evaluatingthe factors.  In order to make these techniques computationally feasible, heuristic procedures areapplied, and hence global optimal results are not necessarily generated.  The factorization algorithmsare also applicable to the problem of factoring Boolean switching expressions and of factoring polynomialsencountered in symbol manipulating systems. | Breuer, M. A..Kfactorization algorithms, code optimization, sequencingof operations, detection of common subexpressions, factorization of Boolean expressions.C4.12 6.1
1887 | A Recursive Relation for the Determinant of a Pentadiagonal Matrix | A recursive relation, relating leading principalminors, is developed for the determinant of a pentadiagonal matrix.  A numerical example is includedto indicate its use in calculating eigenvalues. | Sweet, R. A..Kpentadiagonal matrix, quindiagonal matrix, quindiagonalmatrix, band matrix, determinant, characteristic polynomial, eigenvalues.C5.14
1888 | Spline Function Methods for Nonlinear Boundary-Value Problems | The solution of the nonlinear differential equationY"=F(x,Y,Y') with two-point boundary conditions is approximated by a quintic or cubic spline functiony(x).  The method is well suited to nonuniform mesh size and dynamic mesh size allocation.  For uniformmesh size h, the error in the quintic spline y(x) is O(h^4), with typical error one-third that fromNumerov's method.  Requiring the differential equation to be satisfied at the mesh points resultsin a set of difference equations, which are block tridiagonal and so are easily solved by relaxation or other standard methods. | Blue, J. L..Kboundary value problems, differential equations,finite differences, functional approximation, iterative methods, nonlinear equations, spline functions.C5.13 5.15 5.17
1889 | Introducing Computing to Smaller Collegesand Universities -- A Progress Report | By technical means that are now routine, computerservice for smaller colleges and universities can be provided by remote terminals of a central facility. Access, however, is not enough-effective organizational and educational methodology for introducingcomputing at such institutions must also be developed.  The experience of two years with a statewidenetwork involving-41 institutions is discussed.  Lessons include the importance of a separate organizationrepresenting the small colleges, the necessity for on-campus training for the institutions, the needfor some special programming and documentation to support such users,and the development of curriculum by evolutionary means. | Parker Jr., L. T.Gallie, T. M.Brooks Jr., F. P.Ferrel, J. K..Kregional network, introducing computing, under-graduateeducation, instructional usage, academic applications, curriculum development, orientation project,regional center, consortium, remote computing.C1.50 1.52 1.59 2.49
1890 | Simulation of Traffic Flows in a Network | A computer simulation program which dealswith traffic flows in the network of a large area is described.  Each road is segmented into blocks ofseveral ten-meter lengths and is represented by a bidirectional list in computer memory.  The movementof cars, i.e. the transfer of cars from one block to the next, is expressed by a proper formula.  Thisformula is based on the supposition that the speed of cars in a block is determined only by the density ofcars in the block, and this speed-versus-density curve is empirically given the numerical values.  Thissimulation scheme has its excellent point in that it makes it possible to trace the dynamic behaviorof traffic flows in a variety of situations, some examples of which are given for an actual area of the city of Kyoto, Japan. | Sakai, T.Nagao, M..Ktraffic simulation, traffic flow, traffic networktraffic control, traffic density, intersection, signal setting, vehicle, road network, list structure, computer simulation.C3.57 3.23
1891 | Three-Dimensional Computer Display | A stereographic display terminal has beenproduced using the raster display (BRAD) recently developed at Brookhaven.  The system uses a rotating refreshmemory to feed standard television monitors.  To produce a stereographic display the computer calculatesthe projected video images of an object, viewed from two separate points.  The resulting videomaps are stored on separate refresh bands of the rotating memory.  The two output signals are connectedto separate color guns of a color television monitor, thus creating a superimposed image on the screen.  Opticalseparation is achieved by viewing the image through color filters.  The display is interactive andcan be viewed by a large group of people at the same time. | Ophir, D.Shepherd, B. J.Spinrad, R. J..Kcomputer graphics, three-dimensional display, sweptraster display, interactive stereographic terminal, video map, color separation.C2.0 4.49 6.35
1892 | Degree of Multiprogramming in Page-on-Demand Systems | A simple stochastic model is described whichoffers a base for understanding the relationship between the number of programs permitted to share memory(the degree of multiprogramming), drum traffic rates, and central processing unit utilization in page-on-demand,multiprogrammed, time-shared computer systems.  The model preserves, as a key feature, theproperty of page-demand statistics which implies a "burst" of page demands at the beginning of any jobor quantum execution.  The model, a Markov chain, is analyzed numerically and the results are presented graphicallyfor a wide range of key environment-descriptive parameters.  Implications of the results to time-sharedsystem design and programming are discussed, and a calculation of the optimal degree of multiprogrammingfor a wide range of parameters is presented graphically.  | Wallace, V. L.Mason, D. L..Kpage-on-demand, demand paging, time-sharing multiprogramming,Markovian computer models, scheduling strategies, operating systems, memory management.C2.44 4.32 4.39 6.20 6.21
1893 | Roots of Polynomials by a Root-Squaringand Resultant routine (Algorithm 340 [C2]) | Noltemeier, A..Kroot finders, roots of polynomial equations, polynomialzeros, root-squaring operations, Graeffe method, resultant procedure, subresultant procedure,testing of roots, acceptance criteria.C5.15
1894 | Normal Random Deviates (Algorithm 334 [G5]) | Knop, R..Knormal deviates, normal distribution, random number,random number generator, simulation, probability distribution, frequency distribution, random.C5.13 5.5
1895 | Gaussian Quadrature Formulas (Algorithm 331 [D1]) | Hill, I. D..Kquadrature, Gaussian quadrature, numerical integration,weight function, orthogonal polynomials.C5.16
1896 | Regular Coulomb Wave Functions (Algorithm 292 S22]) | Gautschi, W..KCoulomb wave functions, wave functions, regular Coulomb wave functions.C5.12
1897 | Coulomb Wave Functions (Algorithm 300 [S22]) | Kolbig, K. S..KCoulomb wave functions, wave functions.C5.12
1898 | Regular Coulomb Wave Functions (Algorithm 292 [S22]) | Kolbig, K. S..KCoulomb wave functions, wave functions, regular Coulomb wave functions.C5.12
1899 | Simplex Method Procedure Employing Lu Decomposition (Algorithm 350 [H]) | Bartels, R. H.Golub, G. H..Ksimplex method, linear programming, LU decomposition,round-off errors, computational stability.C5.41
1900 | Clarification of Fortran Standards-Initial Progress | In 1966 after four years of effort, FORTRANbecame the first programming language standardized in the United States.  Since that initial achievement,study and application of the standard specifications have revealed the need for maintenance of the standards. As the result of work initiated in 1967, an initial set of clarifying interpretations has been prepared. The nature of the maintenance, corrections to the standard specifications, and completed interpretations are reported.
1901 | Dynamic Space-Sharing in Computer Systems | A formalization of relationships between space-shadingprogram behavior, and processor efficiency in computer systems is presented.  Concepts of value andcost of space allocation per task are defined and then value and cost are combined to develop a singleparameter termed value per unit cost.  The intent is to illustrate a possible analytic approach to theinvestigation of the problems of space-sharing and to demonstrate the method on sample problems. | Belady, L. A.Kuehner, C. J..Kspace-sharing, storage allocation, memory allocation,storage management, memory management, program behavior, multiprogramming, computer system design, allocationstrategies, replacement strategies, demand-paging, time-sharing.C4.32 6.2 6.20
1902 | An Automatic Grading Scheme for Simple Programming Exercises | A discussion is given of alterations that weremade to a typical university operating system to record the results of programming exercises in threedifferent languages, including assembly language.  In this computer-controlled grading scheme provisionis made for testing with programmer-supplied data and for final runs with system-supplied data.  Exercisesrun under the scheme may be mixed with other programs, and no special recognition of exercises by the operators is necessary. | Hext, J. B.Winings, J. W..Kautomatic grading program, programming exercises.C1.5 2.43 4.39
1903 | Chebyshev Interpolation and Quadrature Formulas of Very High Degree | Salzer, H. E..KChebyshev polynomials, Chebyshev interpolation,Chebyshev quadrature, Chebyshev points, Chebyshev zeros, interpolation, quadrature, definite integrals.C5.13 5.16
1904 | Rough and Ready Error Estimates in GaussianIntegration of Analytic Functions | Rabinowitz, P..Knumerical integration, analytic functions, errorestimates, Gaussian integration, tabulated error coefficients, computable error coefficients, Cauchyintegral formula, Chebyshev polynomials.C5.11 5.16
1905 | The Simplex Method of Linear Programming Using LU Decomposition | Standard computer implementations of Dantzig'ssimplex method for linear programming are based upon forming the inverse of the basic matrix and updatingthe inverse after every step of the method.  These implementations have bad round-off error properties. This paper gives the theoretical background for an implementation which is based upon the LU decomposition,computed with row interchanges, of the basic matrix.  The implementation is slow, but has goodround-off error behavior.  The implementation appears as CACM Algorithm 350. | Bartels, R. H.Goulub, G. H..Ksimplex method, linear programming, LU decomposition,round-off errors, computational stability.C5.41
1906 | Automated Printed Circuit Routing with a Stepping Aperture | A computer program for routing interconnectionson a two-sided printed circuit board with a regular pattern of lines, pins (terminals), and vias(feed-through holes) is described.  In this program, each interconnection is given a planned routing-typically,down from the upper pin, through a via, and horizontally to the lower pin.  From the top, a virtualaperture (i.e. a long horizontal slit) is stepped down the board.  The planned routing is the basis forrerouting interconnections within the aperture to resolve conflicts for lines and vias below the apertureand to maximize the effective line usage.  If a conflict has not been resolved before the aperturearrives at the lower pin,interconnections are deleted to resolve the conflict.  Extensions of this techniqueto the control of crosstalk between routed interconnections and to the problem of obtaining100 percent interconnect are also discussed. | Lass, S.E..Krouting, printed circuit, interconnections, aperture,stepping aperture, computer program, circuit board, lines, vias, pins.C3.24 6.30
1907 | A Note on Reliable Full-Duplex Transmission over Half-Duplex Links | A simple procedure for achieving reliable full-duplextransmission over half-duplex links is proposed. The scheme is compared with another of thesame type, which has recently been described in the literature.  Finally, some comments are made onanother group of related transmission procedures which have been shown to be unreliable under some circumstances. | Bartlett, K. A.Scantlebury, R. A..Kdata transmission, error correction, full-duplex,half-duplex, transmission control, communications.C3.81
1908 | Time-Sharing and Batch-Processing:  An ExperimentalComparison of Their Values in a Problem - Solving Situation | An experimental comparison of problem-solvingusing time-sharing and batch-processing computer systems conducted at MIT is described in this paper. This study is the first known attempt to evaluate two such systems for what may well be the predominant userpopulation within the next decade-the professionals who, as nonprogrammers, are using the computer as anaid in decision-making and problem-solving rather than as a programming end in itself.  Statisticallyand logically significant results indicate equal cost for usage of the two computer systems; however,a much higher level of performance is attained by time-sharing users.  There are indications that significantlylower costs would have resulted if the time-sharing users had stopped work when they reacheda performance level equal to that of the batch users.  The users' speed of problem-solving and theirattitudes made time-sharing the more favorable system. | Gold, M. M..Ktime-sharing vs batch-processing, user performance,man/machine communications, cost effectiveness, on-line vs off-line performance, decision-making performance,user/programmer behavior, programming experimental empirical studies, problem-solving, research in man/machinecommunications, man/machine symbiosis.C2.11 2.40 3.36 3.51 3.80
1909 | Computation of Jn(x) by Numerical Integration | It is shown to be practical to compute Jn(x) bynumerical integration of its integral representation using the trapezoidal rule. The error in thisapproximation was studied empirically. | Stroud, A. H.Kohli, J. P..KBessel Function, numerical integration, trapezoidal rule.C5.11 5.12 5.16
1910 | An Algorithm for Solving a Special Classof Tridiagonal Systems of Linear Equations | An algorithm is presented for solving a systemof linear equation Bu=k where B is tridiagonal and of a special form.  It is shown that this algorithmis almost twice as fast as the Gaussian elimination method usually suggested for solving such systems. In addition, explicit formulas for the inverse and determinant of the matrix B are given. | Rose, D. J..Ktridiagonal, Gaussian elimination, central difference.C5.14 5.17
1911 | On Coordination Reduction and Sentence Analysis | A class of coordination phenomena in naturallanguages is considered within the frame work of transformational theory.  To account for these phenomenait is proposed that certain machinery be added to the syntactic component of a transformationalgrammar. This machinery includes certain rule schemata, the conditions under which they are to beapplied, and conditions determining the sequence of subtrees on which they are to be performed.  A solutionto the syntactic analysis problem for this class of grammars is outlined.  Precise specificationof both the generative procedure of this paper and its inverse is given in the form of LISP function definitions. | Petrick, S. R.Postal, P. M.Rosenbaum, P. S..Knatural languages, generative grammar, transformationaltheory, syntax, coordination, sentence coordination, sentence coordination, coordination reduction,syntactic analysis, grammar testing program, rule testing.C3.42
1912 | Simulation of Outpatient Appointment Systems | An experimental computer program is describedwhich simulates appointment systems employed by outpatient departments of hospitals.  Both major kindsof appointment systems-individual and block-can be simulated.  The purpose of the Simulator is to enablethe user to evaluate the effectiveness of alternative appointment systems in a given clinical environment. | Katz, J. H..Ksimulation, scheduling, appointment system, outpatientdepartment, medicine, health, managementscience, operations research.C3.34 3.59
1913 | Polygamma Functions with Arbitrary Precision (Algorithm 349 [S14]) | Schwachheim, G..Kpolygamma function, psi function, digamma function,trigamma function, tetragamma function, pentagamma function, special functions.C5.12
1914 | Matrix Scaling by Integer Programming (Algorithm 348 [F1]) | Klimpel, R. R..Kinteger programming, linear algebra, mathematicalprogramming, matrix condition, matrix scaling.C5.14 5.41
1915 | An Algorithm for Hidden Line Elimination | The algorithm presented causes the elimination ofhidden lines in the representation of a perspective view of concave and convex plane-faced objects on thepicture plane.  All the edges of the objects are considered sequentially, and all planes which hide everypoint of an edge are found.  The computing time increases roughly as the square of the number of edges. The algorithm takes advantage of a reduced number of concave points and automatically recognizes if onlyone object with no concave points is considered. In this last case, the result is obtained in a much simpler way. | Galimberti, R.Montanari, U..Khidden line elimination, back line recognition, three-dimensionalrepresentation, plane-faced objects, perspective view, machine rendering of solids, automaticdrawing, displaying techniques, computer graphics, man/machine interaction, man/machine communication, computer-aided design.C4.40 4.41 4.49
1916 | Analysis of Boolean Program Models for Time-Shared, Paged Environments | Directed graphs or their associated matrices arefrequently used to represent the logical structure of sequences of computer instructions.  Such techniquesare used and, in addition, data references are represented in a nondirected model. The complete structuralspecification of a program is represented by a combined model.  A transformation of the combinedmodel yields a new model in which additional timing information is also contained.  Analysis of these modelsprior to execution yields information valuable in determining segmentation of instructions and data fora time-shared environment, as well as for initial page loading; during execution, the analysis may beused for "look ahead" control of page turning. | Lowe, T. C..Ktime-sharing, paging, segmentation, executive,compiler, monitor, program model.C4.39 6.21
1917 | An Algol Procedure for the Fast Fourier Transformwith Arbitrary Factors (Algorithm 339 [C6]) | Singleton, R. C..Kfast Fourier transform, complex Fourier transform,multivariate Fourier transform, Fourier series, harmonic analysis, spectral analysis, orthogonal polynomials,orthogonal transformation, virtual core memory, permutation.C3.15 3.83 5.12 5.14
1918 | Distribution of Indistinguishable Objectsinto Distinguishable Slots (Algorithm 329 [G6]) | Gray, M.
1919 | An Efficient Algorithm for Sorting withMinimal Storage (Algorithm 347 [M1]) | Singleton, R. C..Ksorting, minimal storage sorting, digital computer sorting.C5.31
1920 | F-Test Probabilities (Algorithm 346 [S14]) | Morris, J..KF-test, Snedecor F-statistic, Fisher Test, distribution function.C5.5
1921 | An Algol Convolution Procedure Based on theFast Fourier Transform (Algorithm 345 [C6]) | Singleton, R. C..Kfast Fourier transform, complex Fourier transform,multivariate Fourier transform, Fourier series, harmonic analysis, spectral analysis, orthogonal polynomials,orthogonal transformation, convolution, auto covariance, autocorrelation, cross-correlation,digital filtering, permutation.C3.5 3.83 5.12 5.14
1922 | Proposed USA Standard (Data Communication ControlProcedures for the USA Standarad Code for Information Interchange)
1923 | Pseudofiles | An approach to system interfaces for highlevel languages using basic input/output support facilities is described.  It is shown that this techniquecan provide potentially inexpensive methods for programs to communicate with deeply embeddedfacilities such as command language processors. | Rosin, R. F..Koperating systems, interfaces input-output,high level languages, command language.C4.22 4.30 4.31 4.41
1924 | Organizing Matrices and Matrix Operations for Paged Memory Systems | Matrix representations and operations are examinedfor the purpose of minimizing the page faulting occurring in a paged memory system.  It is shown thatcarefully designed matrix algorithms can lead to enormous savings in the number of page faults occurringwhen only a small part of the total matrix can be in main memory at one time.  Examination of addition,multiplication, and inversion algorithms shows that a partitioned matrix representation (i.e. one submatrixor partition per page) in most cases induced fewer page faults than a row-by-row representation. The number of page-pulls required by these matrix manipulation algorithms is also studied as a functionof the number of pages of main memory available to the algorithm. | McKellar, A. C.Coffman Jr., E. G..Kmatrix algorithms, array processing, paging algorithms,paged memory systems, virtual memory systems, array storage allocation, storage allocation.C4.12 4.39 5.14
1925 | Concepts of Use in Contour Map Processing | Generalized techniques whose use can simplifythe solution of problems relating to contour maps.  One of these techniques makes use of the topologicalproperties of contour maps.  The topology is represented by a graphical structure in which adjacentcontour lines appear as connected nodes.  Another generalized technique consists of utilizing geometricalproperties to determine the characteristics of straight lines drawn on the contour map.  Both of thesetechniques have been applied to the problem of locating the ground track of an aircraft fromelevation readings obtained during a flight. | Morse, S. P..Kmap, contour map, contour lines, topological properties,geometrical properties, graph of contour map, navigation.C3.1
1926 | Description of FORMAT, a Text-Processing Program | FORMAT is a production program which facilitatesthe editing and printing of "finished" documents directly on the printer of a relatively small (64k) computersystem.  It features good performance, totally free-form input, very flexible formatting capabilitiesincluding up to eight columns per page, automatic capitalization, aids for index construction, and aminimum of nontext items.  It is written entirely in FORTRAN IV. | Berns, G. M..Ktext processing, indexing, printing, documentation,text editing, formatting, frequency dictionary, right justification, vocabulary.C3.74 3.75 3.9
1927 | Information Science in a Ph.D. Computer Science Program | This report contains recommendations on a sample coursecurriculum in the general area of information organization and information system design in a Ph.D.Computer Science Program.  The subject area is first briefly described, followed by a listing of some desirablegraduate-level courses.  Suitable bibliographies are appended. | Salton, G..Kcourse curriculum, graduate courses, universitycourses,computer science curriculum, information science, information organization, information retrieval,data retrieval, language analysis, information processing.C1.52 3.42 3.70
1928 | Exclusive Simulation of Activity in Digital Networks | A technique for simulating the detailed logicnetworks of large and active digital systems is described.  Essential objectives sought are improvedease and economy in model generation, economy in execution time and space, and a facility for handlingsimultaneous activities.  The main results obtained are a clear and useful separation of structural and behavioralmodel description, a reduction of manual tasks in converting Boolean logic into a structural model,the elimination of manual processes in achieving exclusive simulation of activity, an event-schedulingtechnique which does not deteriorate in economyas the event queue grows in length, and a simulationprocedure which deals effectively with any mixture of serial and simultaneous activities.  The passage oftime is simulated in a precise, quantitative fashion and systems to be simulated may be combinations of synchronousand asynchronous logic.  Certain aspects of the techniques described may be used for the simulationof network structures other than digital networks. | Ulrich, E. G..Ksimulation, logical simulation, digital simulation,large systems simulation, network structures, scheduling, queuing, simultaneous activities, parallel events.C4.22 4.29 6.9
1929 | Images from Computers and Microfilm Plotters | Digital computers are widely used for theprocessing of information and data of all kinds, including the pictorial information contained in photographsand other graphical representations.  Efficient conversion facilities for putting graphical informationinto the computer and retrieving it in graphical form are therefore much needed.  One of the most commonlyemployed devices for obtaining permanent graphical output from digital computers is the microfilm plotter. Regrettably, present models have no provision for producing images with a continuous gray scale or "half tones." In this note several programming techniques are described for obtaining half tone pictures from amicrofilm plotter under the control of a digital computer.  Illustrative examples of several methods are given. | Schroeder, M. R..Kcomputer images, half tone pictures, microfilm plotters; processing.C3.10 3.15 3.24 4.49
1930 | Extremely Portable Random Number Generator | Extremely portable subroutines are sometimesneeded for which moderate quality and efficiency suffice.  Typically, this occurs for library functions(like random number generation and in core sorting) which are not entirely universal or are not used in astandardized way.  The literature on random number generators does not seem to contain an algorithm thatmeets requirements of this sort.  An extremely portable 8-line FORTRAN program is provided which basedon an important paper by Coveyou and MacPherson (1967).Using their methods, Fourier analysis is appliedto the probability function for the consecutive n-tuples provided by our generator (with n less thanor equal to 4).  While the small modulus which must be used to maintain portability prevents the qualityof the generator from being high, the generator compares well with the bounds established in the above mentioned paper. | Kruskal, J. B..Krandom number generators, random numbers, randomnumber analysis, random generators, linear sequential generators, random number program, pseudo random numbers .C4.49 5.19 5.5
1931 | Interval Arithmetic Determinant Evaluationand Its Use in Testing for a Chebyshev System | Two recent papers, one by Hansen and one byHansen and R. R. Smith, have shown how Interval Arithmetic (I.A.) can be used effectively to bound errorsin matrix computations.  In the present paper a method proposed by Hasen and R. R. Smith is comparedwith straightforward use of I.A. in determinant evaluation.  Computational results show the accuracyand running times that can be expected when using I.A. for determinant evaluation.  An application usingI.A. determinants in a program to test a set of functions to see if they form a Chebyshev system is then presented. | Smith, L. B..Kinterval arithmetic, range arithmetic, error bounds,determinant evaluation, Chebyshev system, mathematical proof by computer.C5.11 5.13 5.14
1932 | The Logarithmic Error and Newton's Method for the Square Root | The problem of obtaining optimal starting valuesfor the calculation of the square root using Newton's method is considered.  It has been pointed outelsewhere that if relative error is used as the measure of goodness of fit, optimal results are notobtained when the initial approximation is a best fit.  It is shown here that if, instead, the so-calledlogarithmic error is used, then a best initial fit is optimal for both types of error.  Moreover, useof the logarithmic error appears to simplify the problem of determining the optimal initial approximation. | King, R. F.Phillips, D. L..Ksquare root, Newton's method, relative error, logarithmicerror, best fit, optimal approximation, maximal error, recurrence relation, integer root, error curve.C5.12 5.13
1933 | Coding the Lehmer Pseudo-random Number Generator | An algorithm and coding technique is presentedfor quick evaluation of the Lehmer pseudo-random number generator modulo 2**31 - 1, a prime Mersennenumber with produces 2**31 - 2 numbers, on a p-bit (greater than 31) computer.  The computation method isextendible to limited problems in modular arithmetic.  Prime factorization for 2**61 - 2 and a primitive rootfor 2**61 - 1, the next largest prime Mersenne number, are given for possible construction of a pseudo-randomnumber generator of increased cycle length. | Payne, W. H.Rabung, J. R.Bogyo, T. P..Kpseudo-random number, random number, modular arithmetic,uniform probability density, uniform frequency function, simulation, prime factorization, primitive roots
1934 | On Arithmetic Expressions and Trees | A description is given of how a tree representing theevaluation of an arithmetic expression can be drawn in such a way that the number of accumulatorsneeded for the computation can be represented in a straightforward manner.  This representation reducesthe choice of the best order of computation to a specific problem under the theory of graphs. An algorithm to solve this problem is presented. | Redziejowski, R. R..Karithmetic expression, compiler design, graph theory,programming, storage minimization, topological ordering,tree.C4.12 5.32
1935 | Randomized Binary Search Technique | A mathematical model is developed for the meanand variance of the number of trials to recover a given document in a randomly received list of files. The search method described is binary in nature and offers new potential for information retrieval systems. | Arora, S. R.Dent, W. T..Kbinary pattern, file examination, graph theory, informationretrieval, mathematical model, partitioning, probabilistic method, random sequencing, search techniques, tree structures.C3.74 5.32
1936 | Variable Length Tree Structures Having Minimum Average Search Time | Sussenguth suggests in a paper (1963) that afile should be organized as a doubly-chained tree structure if it is necessary both to search and to updatefrequently.  Such a structure provides a compromise between the fast search/slow update characteristics ofbinary searching and the slow search/fast update characteristics of serial searching.  His method, however,contains the limiting restriction that all terminal nodes lie on the same level of the tree.  This paperconsiders the effect of relaxing this restriction.  First, trees which have the property that a priori thefilial set of each node is well defined are studied.  It is proved that coding the nodes within each filialset with respect to the number of terminal nodes reachable from each is necessary and sufficient to guaranteeminimum average search time.  Then the more general case (that is, where the entire structure ofthe tree is changeable) is treated.  A procedure is developed for constructing a tree with a minimumaverage search time.  A simple closed expression for this minimum average search time is obtained asa function of the number of terminal nodes.  The storage capacity required to implement the doubly-chainedtree structure on a digital computer is also determined.  Finally, the total cost of the structure,using Sussenguth's cost criterion, is computed.  It is shown that significant improvements in boththe average search time and the total cost can be obtained by relaxing Sussenguth's restriction that allterminal nodes lie on the same level of the tree. | Patt, Y. N..Kinformation retrieval, file searching, tree structures, double chaining.C3.70 3.73 3.74
1937 | CODAS: A Data Display System | CODAS, a Customer Oriented Data System, isa user-oriented data retrieval and display system.  The command language of the system provides the userwith an easy means for specifying data retrieval and display requests.  Data is displayed as tables andgraphs produced in a format ready for publication.  In this paper the statements of the request languageand the general system design are described. | Day, R. H.Mansfield, M. K.Ellis, M. E..Kdata display, information retrieval, graphic display,command languages, report program generation, management data processing.C3.50 3.51 3.59 3.70 3.75 3.79 4.20 4.29
1938 | Some Criteria for Time-Sharing System Performance | Time-sharing systems, as defined in this article,are those multiaccess systems which permit a terminal user to utilize essentially the full resourcesof the system while sharing its time with other terminal users.  It is each terminal user's abilityto utilize the full resources of the system that makes quantitative evaluation of time-sharing systemsparticularly difficult.  Six criteria are described which have been successfully used to perform first-levelquantitative time-sharing system performance evaluation. | Stimler, S..Ktime-sharing performance criteria, time-sharingsystem operation, time-sharing performance analysis.C2.40 4.30 4.32 6.20
1939 | Directed Random Generation of Sentences | The problem of producing sentences of a transformationalgrammar by using a random generator to create phrase structure trees for input to the lexicalinsertion and transformational phases is discussed.  A purely random generator will produce base treeswhich will be blocked by the transformations, and which are frequently too long to be of practical interest. A solution is offered in the form of a computer program which allows the user to constrain and directthe generation by the simple but powerful device of restricted subtrees.  The program is a directedrandom generator which accepts as input a subtree with restrictions and produces around it a tree whichsatisfies the restrictions and is ready for the next phase of the grammar.  The underlying linguisticmodel is that at Noam Chomsky, as presented in Aspects of the Theory of Syntax.  The program is writtenin FORTRAN IV for the IBM 360/67 and is partof a unified computer system for transformational grammar. It is currently being used with several partial grammars of English. | Friedman, J..Ktransformational grammar, natural language syntax, languageprocessing, sentence generation, computational linguistics, syntax.C3.42
1940 | Calculation of a Polynomial and its DerivativeValues by Horner Scheme (Algorithm 337 [C1]) | Smith, O. K..Kfunction, evaluation, polynomial evaluation,ALGOL procedure, Horner's scheme.C4.22 5.12
1941 | F-Distribution (Algorithm 322 [S14]) | Field, J. B. F..KFisher's F-distribution, Students's t-distribution.C5.5
1942 | Finding a Solution of N Functional Equationsin N Unknowns (Algorithm 314 [C5]) | Vandergraft, J.Mesztenyi, C..Kfunctional equations, interpolation, nonlinear equations, secant method.C5.13 5.15
1943 | Complete Elliptic Integrals (Algorithm 165 [S21]) | Farkas, I..Kspecial functions, complete elliptic integralof the first kind, complete elliptic integral of the second kind.C5.12
1944 | Student's t-Distribution (Algorithm 344 [S14]) | Levine, D. A..KStudent's t-Distribution, t-test, small-samplestatistics, distribution function.C5.12 5.5
1945 | The Role of Programming in a Ph.D. Computer Science Program | In this general paper the role of programmingin advanced graduate training is discussed.  Subject matter related to programming as well as programmingper se is considered.  The  importance and application of formalism are considered and also theneed for good empirical experimentation.  A brief outline for a sequence of courses is included, and subjectheadings that have been obtained from an extensive bibliography are given.  A bibliography of programming references is included. | Arden, B. W..Kgraduate-level programming, graduate programs, coursecontent, course sequence, graduate curriculum, programming research topics, programming bibliography.C1.3 1.52 4.0
1946 | Computing Polynomial Resultants: Bezout's Determinantvs. Collins' Reduced P.R.S. Algorithm | Algorithms for computing the resultant of twopolynomials in several variables, a key repetitive step of computation in solving systems of polynomialequations by elimination, are studied.  Determining the best algorithm for computer implementation dependsupon the extent to which extraneous factors are introduced, the extent of propagation of errors caused bytruncation of real coefficients, memory requirements, and computing speed.  Preliminary considerations narrowthe choice of the best algorithm to Bezout's determinant and Collins' reduced polynomial remainder sequence(p.r.s.) algorithm.  Detailed tests performed on sample problems conclusively show that Bezout's determinantis superior in all respects except for univariate polynomials, in which case Collins' reducedp.r.s. algorithm is somewhat faster.  In particular Bezout's determinant proves to be strikingly superior innumerical accuracy, displaying excellent stability with regard to round-off errors. Results of tests are reported in detail. | Ku, S. Y.Adler, R. J..Kresultant algorithm, g.c.d. algorithm, polynomialresultant, elimination, Bezout's determinant, Sylvester's determinant, reduced p.r.s. algorithm, Euclideanalgorithm, multivariate polynomial equations.C4.40 5.10 5.15 5.41
1947 | Object code Optimization | Methods of analyzing the control flow and dataflow of programs during compilation are applied to transforming the program to improve object time efficiency. Dominance relationships, indicating which statements are necessarily executed before others, areused to do global common expression elimination and loop identification.  Implementation of these and otheroptimizations in OS/360 FORTRAN H are described. | Lowry, E. S.Medlock, C. W..Kcompilers, data flow analysis, dominance, efficiency,FORTRAN,  graph theory, loop structure, machine instructions, object code, optimization, redundancyelimination, register assignment, System/360.C4.12 5.24 5.32
1948 | Computers in Group Theory: a Survey | Computers are being applied to an increasinglydiverse range of problems in group theory.  The most important areas of application at present arecoset enumeration, subgroup lattices, automorphism groups of finite groups, character tables, and commutatorcalculus.  Group theory programs range from simple combinatorial or numerical programs to largesymbol manipulation systems.  In this survey the more important algorithms in use are described and contrasted,and results which have been obtained using existing programs are indicated.  An extensive bibliography is included. | Cannon, J. J..Kgroup theory, coset enumeration, subgroup lattices,automorphism groups, character tables, commutator calculus, topology, crystallography, permutation groups,Abelian groups, discrete mathematics, non-numerical programming, symbol manipulation, survey.C1.3 3.15 5.39
1949 | Finiteness Assumptions and Intellectual Isolation of Computer Scientists | Wagner, R. A..KAlgol vs. Fortran, finiteness assumptions, intellectual isolation,integer variable range, memory finiteness, finite word size.C2.2 4.22 5.23
1950 | Efficient Handling of Binary Data | Raduchel, W. J..Kbinary variables, dummy variables, bit strings, cross-tabulations.C4.9
1951 | Estimates of Distributions of Random Variablesfor Certain Computer Communications Traffic Models | A study of multiaccess computer communications hascharacterized the distributions underlying an elementary model of the user-computer interactive process.  The model used iselementary in the sense that many of the random variables thatgenerally are of interest in computer communications studies can bedecomposed into the elements of this model.  Data were examinedfrom four operational multiaccess systems, and the model is shown tobe robust; that is each of the variables of the model has thesame distribution independent of which of the four systems is being examined. It is shown that the gamma distribution can be used todescribe the discrete variables.  Approximations to the gamma distributionby the exponential distribution are discussed for the systems studied. | Fuchs, E.Jackson, P. E..Kcomputer communications, time-sharing,operating systems, optimization models.C3.80 3.81 6.20
1952 | Index by Subject to Algorithms, 1970
1953 | Exponential Integral Ei(x) (Algorithms 385 $S13)) | Redish, K. A..KANSI Fortran standard.C4.0 4.22
1954 | Eigenvalues and Eigenvectors of a RealSymmetric Matrix (Algorithm 384 $F2)) | Stewart, G. W.	.Kreal symmetric matrix, eigenvalues, eigenvectors, QR algorithm.C5.14
1955 | Characteristic Values and Associated Solutions ofMathieu's Differential Equation (Algorithm 352 $S22)) | Sale, A. H. J..KMathieu's differential equation, Mathieu function, characteristicvalue, periodic solution, radial solution.C5.12
1956 | Optimum Merging from Mass Storage | An algorithm is displayed which yields the merge orders such that the totalread time, defined to be the sum of seek time plus data-transfertime, is minimized for a sort using mass storage. The analysis isparameterized in terms of the ratio of seek time to the time it takesto fill available core with records, and the file size in unitsof core lengths; and thus it can be applied to any conventionalCPU/mass storage combination.  An explicit formula for total readtime is derived, in terms of the parameters, which correlates verywell with the total read time calculated using the optimum mergeorders yielded by the algorithm.  The formula involves the roots of a simple transcendental equation.  A short table of these rootsis included.  Numerical results are graphically displayed for a widerange of the parameters.  It is found that the normalized readtime for optimum merging on a given hardware configuration is proportionalto the file length times the logarithm of the file length. | Black, N. A..Ksorting, merging, optimum merging, mass storage,sort timing, drum-merging, access time.C3.37 4.49 5.31
1957 | The List Set Generator: A Construct for Evaluating Set Expressions | The list set generator is defined and algorithmsfor its use are given.  The list set generator isa construct which may be added to a list processing system or anysystem that handles sets.  It efficiently generates the set whichresults from any expression involving sets and set operators.  Theefficiency derives from evaluating the expression as a whole andin parallel, rather than evaluating subexpressions andthen using those sets to arrive at the final result. | Shapiro, S. C..Kset manipulating, list processing, setgeneration, sets, lists, file processing.C3.73 3.74 4.22
1958 | Improving Round-off in Runge-Kutta Computations with Gill's Method | A Runge-Kutta-Gill scheme in common use is based on an incompleteadaptation for floating point operations of Gill's method.  Animproved version reduces round-off error significantly.  In this notethe heart of the scheme is presented in Fortran language.  It isthen shown how an improved version of the method can be obtained withthe addition of two Fortran statements.  The two version is asignificant improvement.  A numerical example comparing the two is included. | Thompson, R. J..KRunge-Kutta methods, ordinary differentialequations, round-off error, error analysis.C5.11 5.17
1959 | An Interrupt Based Organization for Management Information Systems | A programming structure, language constructs, and a supervisory system organization are proposedfor the design and coding of large shared data base systems.  Thebases for this organization are a generalized interrupt structureand the newly introduced concept of "file tagging," which is theprocess of associating program structures and interrupt generatingconditions with items in the data base.  An algorithm for resolvingconflicts which arise in scheduling the interrupt processing routinesis presented.  DPL, a programming language and supervisorysystem in which these concepts are implemented, is used to illustratedthe new organization which is proposed for management information systems. | Morgan, H. L..Kmanagement information systems, integrated data processing,supervisors, interrupts monitoring systems, supervisorysystems, interrupt scheduling, parallel processing.C3.51 4.22 4.32
1960 | Process Management and Resource Sharing in the Multiaccess System ESOPE | The main design principles of the multiaccess system ESOPE are described.Emphasis is placed on basic ideas underlying the design ratherthan on implementation details.  The main features of the systeminclude the ability given to any user to schedule his own parallelprocesses using system primitive operations, the file-memory relationship,and the allocation-scheduling policy, which dynamicallytakes into account recent information about user behavior. | Betourne, C.Boulenger, J.Ferrie, J.Kaiser, C.Krakowiak, S.Mossiere, J..Ktime-sharing, multiprogramming, process scheduling, resource allocation.C4.32
1961 | An Efficient Search Algorithm to Find the Elementary Circuits of a Graph | A theoretically most efficient search algorithm is presentedwhich uses an exhaustive search to find all of the elementarycircuits of a graph.  The algorithm can be easily modified to find allof the elementary circuits with a particular attribute such aslength.  A rigorous proof of the algorithm is given as well as an exampleof its application.  Empirical bounds are presented relatingthe speed of the algorithm to the number of vertices and the numberof arcs.  The speed is also related to the number of circuitsin the graph to give a relation between speed and complexity.Extensions to undirected and s-graphs are discussed. | Tiernan, J. C..Kalgorithm, graph theory, circuit searchalgorithm, path search algorithm, searching.C3.74 5.32
1962 | GROOVE-A Program to Compose, Store, and Edit Functions of Time | A program which makes possible creating, storing, reproducing,and editing functions of time is described.  The functions are typicalof those generated by human beings.  Multiple functions (up to 14)are produced for long periods of time (up to several hours) atsufficiently high sampling rates to describe fast human reactions(up to 200 samples per second).  The functions can be used for avariety of purposes such as the control of machine tools or soundsynthesizers or anything a person normally controls.  The programoperates on a small computer (DDP-224).  Functions are stored on adisk file.  Functions may be created by real-time human inputs tothe computer which can interact with already stored functions andcomputed functions.  Real-time feedback from the process beingcontrolled is an important link in the system.  The environment foreffective man-machine interaction has been carefully nurtured. | Mathews, M. V.Moore, F. R..Kcomputer music, music, real-time control, digital control, timefunctions, interactive software, hybrid systems, conductor program.C3.44 3.8 7.3
1963 | Condition Numbers of PEI Matrices | Rokne, J..Kmatrices, condition numbers, Pei matrices, eigenvectors, eigenvalues.C5.14
1964 | Comment on the Working Set Model for Program Behavior | Bernstein, A..Kdemand paging, working set, paging rate, multiprogramming.C4.30 4.32
1965 | Correction to "Logical" Arithmetic on Computerswith Two's Complement Binary Arithmetic | Ehrman, J. R..Kbinary arithmetic, unsigned operand arithmetic, maximumsignificance arithmetic, full-precision arithmetic.C3.15 5.11
1966 | A Generalized Method for Generating Argument/Function Values | Wilson, W. J..Kmapping function, decision hierarchy, table look-up.C4.9 5.39
1967 | An Improved Algorithm to Produce Complex Primes (Algorithm 401 $A1)) | Bratley, P..Knumber theory, prime numbers, complex numbers.C5.39
1968 | Eigenvalues and Eigenvectors of a RealGeneral Matrix (Algorithm 343 $F1)) | Knight, W.Mersereau, W..Keigenvalues, eigenvectors, latent roots, Householder'smethod, QR algorithm, inverse iteration.C5.14
1969 | Increasing the Efficiency of Quicksort (Algorithm 402 $M1)) | Van Emden, M. H..Ksorting, quicksort .C5.31 3.73 5.6 4.49
1970 | Unrecorded Magnetic Tape for Information Interchange (9 Track-200 and800 CPI, NRZI and 1600 CPI, PE)* (Proposed American National Standard)
1971 | Recorded Magnetic Tape for Information Interchange (1600CPI, Phase Encoded)* (Proposed American National Standard)
1972 | A  Nonrecursive List Compacting Algorithm  | A simple nonrecursive list structure compacting scheme or garbage collector suitable for both compact and LISP-like list structures is presented.The algorithm avoids the need for recursion by using the partial structure as it is built up to keep track of those lists that have been copied. | Cheney, C. J..Klist compacting, garbage collection, compact list, LISP.C4.19 4.49
1973 | The Linear Quotient Hash Code | A new method of hash coding is presented andis shown to possess desirable attributes.  Specifically, the algorithmis simple, efficient, and exhaustive, while needing littletime per probe and using few probes per lookup.  Performancedata and implementation hints are also given. | Bell, J. R.Kaman, C. H..Khashing, hash code, scatter storage, calculatedaddress, search, table, lookup, symbol table, keys.C3.74 4.9
1974 | NEATER2: A PL/I Source Statement Reformatter | NEATER2 accepts a PL/I source program and operates on it to producea reformatted version.  When in the LOGICAL mode, NEATER2 indicatesthe logical structure of the source program in the indentationpattern of its output.  Logic errors discovered through NEATER2logical analysis are discovered much more economically than is possiblethrough compilation and trial runs.  A number of options areavailable to give the user full control over the output format andto maximize the utility of NEATER2 as an aid during the earlystages of development of a PL/I source deck.  One option, USAGE, causesNEATER2 to insert into each logical unit of coding a statementwhich will case the number of times each one is executed to be recordedduring execution.  This feature is expected to provide amajor aid in optimization of PL/I programs. | Conrow, K.Smith, R. G..Klogical analysis of PL/I source, reformatting of PL/Isource, documentation aid, execution time usage data.C1.52 4.12 4.19 4.42
1975 | A Multiple-Precision Division Algorithm | A generalized division algorithm for use with positive integral operands is presented.  Depending upon the algebraic relationship of the firsttwo ciphers of the divisor, one or at most two adjustments to the original divisor and dividend must be performed before the division operation can be initiated. The uniqueness of this method will cause each trial cipher in the quotient to be either equal to or one greater than its final replacement. | Mifsud, C. J..Kmultiple-precision, division, adjustment, generalize.C3.15 4.0 5.1
1976 | Multi-attribute Retrieval with Combined Indexes | In this paper a file organization scheme designed toreplace the use of the popular secondary index filing scheme(or inverted files on secondary key fields) is described.Through the use of redundancy and storing keys (or access numbers of the records) that satisfy different combinationsof secondary index values in "buckets," it is possible to retrieveall keys satisfying any input query derived from a subset offields by a single access to an index file, although each bucket maybe used for many combinations of values and a combination ofbuckets may be required for a given query.  The method which, in itsdegenerate case, becomes the conventional secondary index filingscheme works similarly but has the following advantages: (1) the eliminationof multiple accesses in many cases; (2) the eliminationof false drops; (3) the elimination of computer time to perform intersectionof key sets each qualified for one secondary index fieldonly; and (4) the avoidance of long strings of keys when an indexfield appearing in a query has very few possible values.  Redundancy, in some cases, is the same as the secondary indexing method. In the general case, trade-off between the number of accesses for query and redundancy exists. | Lum, V. Y..Kfile organization, secondary index files, inverted files, informationretrieval, data management, access method, secondary keys, storage with buckets, rapid retrieval, balanced filing scheme, eliminationof false drops, combining indexes, query, multi-attribute retrieval.C3.73 3.74 3.79
1977 | An Interactive Display for Approximation by Linear Programming | An interactive programwith a graphical display has been developed for the approximation ofdata by means of a linear combination of functions (includingsplines) selected by the user.  The coefficients of the approximationare determined by linear programming so as to minimize the errorin either the L1 or L-infinity norm.  Auxiliary conditions such asmonotonicity or convexity of the approximation can also be imposed. Thisinteractive system is described and several examples of its use are given. | LaFata, P.Rosen, J. B..Kapproximation, data fitting, functional approximation, linearprogramming, interactive graphical display, spline functions.C5.13 5.41
1978 | The Use of Interactive Graphics To Solve Numerical Problems | With the advent of on-line (time-sharing) computer systemsand graphic terminals, we have available a new dimensionin numerical problem solving capabilities.  Rather than simply usethe new power to achieve fast turnaround, we can develop interactiveroutines which are easy to use and also take advantage of theinsight and visual capabilities of the human problem solver.  Severalon-line systems for general purpose mathematical problem solvinghave already been implemented as well as some special purposesystems for solving problems in a particular area such as ordinarydifferential equations.  The advantage of restricting the problemarea is that the interface with a user can be greatly simplified.In this paper we discuss some of the advantages accrued by suchsystems and design considerations for interactive routines.  Furthermore,an implementation of an on-line least squares data-fittingprogram, PEG, is presented with results obtained from empiricaldata.  In conclusion, area for future work in this field are discussed. | Smith, L. B..Kinteractive graphics, computer graphics, graphics, least squares,data-fitting, interactive computing, on-line mathematics.C1.3 3.1 5.13 5.5
1979 | Numerical Inversion of Laplace Transforms (Algorithm 368 $D5)) | Stehfest, H..KLaplace transform inversion, integral transformations, integral equations.C5.15 5.18
1980 | An Efficient Algorithm for Sorting withMinimal Storage (Algorithm 347 $M1)) | Peto, R..Ksorting, ranking, minimal storage sorting, digital computer sorting.C5.31
1981 | Normal Curve Integral (Algorithm 304 $S15)) | Holmgren, B..Knormal curve integral, probability, special functions.C5.12 5.5
1982 | Modified Havie Integration (Algorithm 400 $D1)) | Wallick, G. C..Knumerical integration, Havie integration, Romberg quadrature,modified Romberg-quadrature, trapezoid values, rectangle values.C5.16
1983 | Spanning Tree $H) (Algorithm 399) | Seppanen, J. J..Kgraph, tree, spanning tree.C5.32
1984 | Tableless Date Conversion $Z) (Algorithm 398) | Stone, R. A..Kdate, calendar.C5.9
1985 | An Integer Programming Problem $H) (Algorithm 397) | Chang, S. K.Gill, A..Kinteger programming, change making problem.C5.41
1986 | Student's t-Quantiles $S14) (Algorithm 396) | Hill, G. W..KStudent's t-statistic, quantile, asymptotic approximation.C5.12 5.5
1987 | Student's t-Distribution $S14) (Algorithm 395) | Hill, G. W..KStudent's t-statistic, distribution function,approximation, asymptotic expansion.C5.12 5.5
1988 | A Formalism for Translator Interactions | A formalism is presented for describing the actionsof processors for programming languages-compilers,interpreters, assemblers-and their interactions in complex systemssuch as compiler-compilers or extendible languages.The formalism here might be used to define and answer such aquestion as "Can one do bootstrapping using a meta-compiler whose metaphase is interpretive?"  In addition an algorithmis presented for deciding whether or not a given system canbe produced from a given set of component processors. | Earley, J..Ktranslator, compiler, interpreter, bootstrapping,language processor, compiler-compiler.C4.1 5.29
1989 | Transition Network Grammars for Natural Language Analysis | The use of augmented transition network grammars for the analysisof natural language sentences is described.  Structure-buildingactions associated with the arcs of the grammar network allow for the reordering,restructuring, and copying of constituents necessary to producedeep-structure representations of the type normally obtained from atransformational analysis, and conditions on the arcs allow for apowerful selectivity which can rule out meaningless analyses and takeadvantage of semantic information to guide the parsing.  Theadvantage of this model for natural language analysis are discussedin detail and illustrated by examples.  An implementation of anexperimental parsing system for transition network grammars is briefly described. | Woods, W. A..Kcomputational linguistics, grammars, grammar models, linguistics,natural language analysis, parsing, semantic interpretation,transition network grammars, transformational grammars.C3.42 4.12
1990 | Numerical Constants (Algorithm) | Dunham, C. B..Knumerical algorithm, numerical constants.C5.10
1991 | On the Number of Automorphisms of a Singly Generated Automaton | Bavel, Z..Kautomata, finite automata, singly generated automata, automorphisms,generators, length of state, minimal-length generators, orbit.C5.22
1992 | Comment on Bell's Quadratic Quotient Method for Hash Code Searching | Lamport, L..Khashing, hash code, scatter storage, calculated address,clustering, search, symbol table, keys, table look-up.C3.74 4.9
1993 | Regular Coulomb Wave Functions (Algorithm 292 $S22)) |  Cody, W. J.Paciorek, K. A.                                                         .KCoulomb wave functions, wave functions, regular Coulomb wave functions.C5.12
1994 | Decision Table Translation $H) (Algorithm 394) | Dial, R. B..KDecision table, decision table translation.C4.19
1995 | Special Series Summation with Arbitrary Precision $C6) (Algorithm 393) | Abdali, S. K..Kfunction evaluation, series summation, approximation.C5.12 5.13
1996 | Systems of Hyperbolic PDE $D3) (Algorithm 392) | Smith, R. R.McCall, D..Khyperbolic p.d.e., characteristic, extrapolation,second order p.d.e., quasilinear p. d. e..C5.17
1997 | Increasing the Efficiency of Quicksort | A method is presented for the analysis of various generalizations ofquicksort.  The average asymptotic number of comparisons needed is shown to be an log^2(n).  A formula is derived expressing a in terms ofthe probability distribution of the "bound" of a partition.  This formula assumes a particularly simple form for a generalization alreadyconsidered by Hoare, namely, choice of the bound as medianof a random sample. The main contribution of this paper is anothergeneralization of quicksort, which uses a bounding interval insteadof a single element as bound.  This generalization turns out tobe easy to implement in a computer program.  A numerical approximationshows that a = 1.140 for this version of quicksort compared with1.386 for the original.  This implies a decrease in number of comparisons of 18 percent; actual tests showed about 15 percent saving in computing time. | van Emden, M. H..Ksorting, quicksort, information content, entropy, distribution of median.C3.73 4.49 5.31 5.6
1998 | Complex Matrix Inversion Versus Real | A comparison of complex matrix with real matrix inversionis made.  It is shown that the complex inversion can be up to twice as fast as the real inversion.  Further, the rounding errorbound for complex inversion is about one-eighth that of real,for Gaussian elimination.  Using extended inner productaccumulation the bound is half of the real system. | Ehrlich, L. W..Kcomplex matrix inversion, matrix inversion, inversion, rounding errors,rounding error bound, error bounds, complex rounding error bounds.C5.14 5.11 5.10
1999 | Optimal Starting Approximations for GeneratingSquare Root for Slow or No Divide | On machine with slow or no division, it is preferable touse an iterative scheme for the square root different fromthe classical Heron scheme.  The problem of optimal initial approximants is considered, and some optimal polynomial initial approximations are tabulated. | Wilson, M. W..Ksquare root, Newton-Raphson iteration, optimal approximants.C5.13
2000 | A Variation of the Goodman-Lance Method forthe Solution of Two-Point Boundary Value Problems | A recently published method for the interpolativesolution of nonlinear equations is improved,and applied to give a significant variation of the Goodman-Lancemethod for the solution of two-point boundary value problems. The resulting method applies in particular to the numerical solutionof optimal control problems in the Euler-Lagrange formulation.Quantitative estimates are presented which indicate that the variationis nearly twice as fast on some problems in the latter context. | Kimble, G. W..KGoodman-Lance, boundary-value problems,Newton's method, nonlinear equations,optimal control, optimization, ordinary differential equations,secant method, interpolative solution, orthogonal matrices.C3.21 5.15 5.17
2001 | Integrating Square Roots | Differential equation of the (y')^2 = f(y) are difficult to integrate numerically because of the singularity at points where f(y) vanishes.  A simple trick removes the singularity. | Moler, C. B.Solomon, L. P..Kquadrature, differential equations.C5.16 5.17
2002 | AMESPLOT-A Higher Level Data Plotting Software System | AMESPLOT is an extensible software system designed to make the display of data as simple, painless, and neat as possible.  The system described is hardware-independent and has been implemented on a variety of installations,of different manufacturers, having diverse configurations.  The elements common to all types of data plots are outlined and the way in which these elements may be combined into a system based on simple modules is demonstrated.These modules are specified independently and are independent of the axissystems or other attributes of the plot.  This enables plots of anycomplexity to be constructed by adding or replacing modules.  Thebasic syntax of AMESPLOT is outlined, and a brief description is givenof its current utility software, consisting of "macros" to produceself-scaled plots, formal tablets of text-interspersed with subplots,map coastlines, and 3-D plots.  The system was formulated in a way such that the user could supply the minimum of information,and it should be fully integrable with user's program writtenin most conventional higher languages.  The functions of positioning,locating, and scaling (in the layout of multiple subplots) ofaxes, labels, and all other elements of the plot are handled automaticallyby the software system unless the user specifies otherwise.  The structuring of plots from multiple, independent, self-contained subplots is described.Transformation, projection, scaling, rotation, or shifting of entire plots or subplots by the action of one or more simple modules is possible.  The user may interact freely with AMESPLOT at three levels, enabling him to construct his own data markers, alphabetic characters, and transformations, andto produce a variety of artistic and other effects. | Hirschsoln, I..Kcomputer graphics, data potting, data displaysyntax, hardware independent software,display device independent software, plot elements, self-scaled plots,user interaction, tablet organization, map display, projection.C4.13 4.29 4.49 4.9
2003 | An Interactive Software System for Computers-AidedDesign:  An Application to Circuit Project | The characteristics of an interactive software system, intended to constitute an interface between designer and computer during various steps ofthe design process, are presented.  The main emphasis is given to thedescription of the features of the two high level user orientedlanguages, operating at different levels, on which the interactionis based.  The first one is IMOL, an interactive monitor language,which is designed to perform the overall and control functionsof the software system; its design criteria provide the user withcommands which are both simple and efficient in order to perform allthe functions needed in computer-aided circuit design.  The second one is COIF, a circuit oriented graphic language, which is designedto describe, generate, and manipulate graphic problem specifications; it is an  extension of Fortran with graphic-type variables,so that the designer who is familiar with Fortran need not learn a new language.  The application to computer-aided circuit designis in particular examined; on the other hand, the adopted designcriteria provide sufficient generality to extend the use of the two languages to different computer-assisted applications. | Bracchi, G.Somalvico, M..Kinteraction, graphics, computer graphics, computer-aided design, circuitdesign, software system, software organization, language,monitor language, graphic language, extended Fortran.C3.24 3.25 4.13 4.22 4.3
2004 | A Procedure for Generation of Three-dimensionalHalf-toned Computer Graphics Presentations | A description is given of an algorithm for producing computer generated half-tone presentations of three-dimensional polygonal surface structures.  This algorithm achieves a significant increase in speed of computation over the Warnock algorithm developed at the University of Utah and implementedalso on the Coordinated Science Laboratory CDC 1604 computersystem at the University of Illinois.  The history leading to the algorithmdevelopment and then the algorithm itself are described.Results are presented and are compared with computer runs achievedby the Warnock approach.  An extension of the procedure to variable positionillumination sources is also given. | Bouknight, W. J..Khalf-tone computer graphics, line-scan image processing,hidden surface, polygonal surface structure presentations.C4.9
2005 | Proposed Revision of American National Standard X3.21-1967,"Rectangular Holes in Twelve-Row Punched Cards"*
2006 | Proposed American National Standard | Kerpelman, C..KState identifiers, State abbreviation, States of the United States, data elements, data codes, numeric codes, geopolitical subdivisions, geographic codes.C3.35 3.57
2007 | Algorithms Policy/Revised August 1970
2008 | Gaussian Quadrature Formulas (Algorithm 331 $D1)) | Wise Jr., W. R..Kquadrature, Gaussian quadrature, numerical integration, weight function,orthogonal polynomials, Newton's method, successive deflation.C5.16
2009 | Simpson's Rule for Multiple Integration (Algorithm 233 $D1)) | Proll, L. G..Knumerical integration, multiple integration, Simpson's rule.C5.16
2010 | Unitary Symmetric Polynomials $Z) (Algorithm 391) | McKay, J..Ksymmetric polynomials, unitary symmetric polynomials.C5.11 5.30 5.5
2011 | Sequency Ordered Walsh Functions $S22) (Algorithm 390) | Hubner, H..KWalsh functions, sequency ordered Walsh functions.C5.12 5.13
2012 | Binary Ordered Walsh Functions $S22) (Algorithm 389) | Hubner, H..KWalsh functions, binary ordered Walsh functions.C5.12 5.13
2013 | Rademacher Function $S22) (Algorithm 388) | Hubner, H..KRademacher function.C5.12 5.13
2014 | Function Minimization and Linear Search $E4) (Algorithm 387) | Fielding, K..Kfunction minimization, relative minimum, quasi-Newton method.C5.15
2015 | A Technique for Generating Almost OptimalFloyd-Evans Productions for Precedence Grammars | A technique is developed for generating almost optimal Floyd-Evans productions given a precedence grammar. A graph formulation is used for the problem of merging productions.  The productions generated correspond to the minimum cost inverse-arborescence of that graph.  The validity of the technique isdemonstrated for weak precedence grammars defined here, but the productionsmechanically generated for any precedence grammar can often be modified in such a way that correct, almost optimal parsers are obtained. | Ichbiah, J. D.Morse, S. P..Ktranslator writing systems, syntactic analysis, Floyd-Evansproductions, precedence grammars, translator optimization,merger algorithm, minimum cost inverse-arborescence, graph theory.C4.12 5.23 5.32
2016 | The Instrumentation of Multics | An array of measuring tools devised to aid in the implementation of a prototypecomputer utility is discussed.  These tools include special hardwareclocks and data channels, general purpose programmed probingand recording tools, and specialized measurement facilities.  Someparticular measurements of interest in a system which combines demand paging with multiprogramming are described in detail.  Where appropriate, insight into effectiveness (or lack there of) of individual tools is provided. | Gintell, J. W.Saltzer, J. H..Kinstrumentation, performance measurement,multiprogramming systems, measuring tools, system analysis, Multics,metering, event tracing, demand paging, script drivenmeasurement.C2.44 4.32 4.39 4.42
2017 | Sorting in a Paging Environment | This sorting study was part of an extensive measurement projectundertaken on the M44/44X, an experimental paging system which wasconceived and implemented at IBM Research in order to explore thevirtual machine concept.  The study was concerned with the implementation of sorting procedures in the context of the dynamic pagingenvironment characteristic of virtual memory machines.  Descriptions of the experimental sort programs and analysis of the performancemeasurement results obtained for them are presented. The insight gained from the experimental effort is used to arrive at a set ofbroad guidelines for writing sort programs for a paging environment. | Brawn, B. S.Gustavson, G.Mankin, E. S..Ksorting, merging, virtual machines, paging systems, dynamicstorage allocation, measurement of systems program behavior,performance evaluation, memory management.C4.32 4.49 4.9 5.31
2018 | Full Table Quadratic Searching for Scatter Storage | The quadratic residue search method for hash tables avoids muchof the clustering experienced with a linear search method.  The simplequadratic search only accesses half the table.  It has been shownthat when the length of the table is a prime of the form 4n+3, where n is an integer, the whole table may be accessed by two quadraticsearches plus a separate access for the original entry point. A search method is presented which is computationally simple, has all the advantages of the quadratic search, and yet accesses all the table in one sweep. | Day, A. C..Kquadratic residue, search method, hash tables, scatter storage,dictionary look-up, quadratic search, searching, hashing,hash code, clustering, collisions.C3.7 3.73 3.74
2019 | Normalization Techniques for Hand printed Numerals | Family of pattern standardizationtechniques based on geometrical projection is applied to a file ofdigitized hand printed numerals obtained from sales clerks. Theprinciple involves transforming a quadrilateral specified in termsof the convex hull of each pattern into a square. The amount ofoverlap within each class of characters versus the amount between classesis used to evaluate the degree of normalization achieved with respect to other published methods including size and shear normalization through moments. | Nagy, G.Tuong, N..Kpattern recognition, character recognition, normalization,projective transformation, central projection, handprinted characters, handwriting, linear transformation,size normalization, mapping, pattern preprocessor.C3.63 5.14
2020 | The Allocation of Computer Resources-Is Pricing the Answer? | The widespread use of complex third generation computing systems has led to a much broader concern about the means by which the resources of these systemsare allocated among the user community.  One means that is suggestedmore and more frequently is a pricing procedure.  In thispaper the manner in which one would like to allocate computing resourcesis considered, and then the extent to which a pricing mechanism fits this mold is discussed.  Inasmuch as pricing must serve as a rationing mechanism at times, consideration is given to the means by which prices can be adjusted flexibly in order to make a dynamic allocation of resources.  Consideration is also given to the means by which users can be insulated from the harmful effects of frequent price fluctuations.  Although the subject of pricing hasbeen given a lot of attention recently, a number of misconceptionspersist about its purpose and its operation.  An attempt is made to clarify some of these misunderstandings and to highlight the advantages and disadvantages and to highlight the advantages and disadvantages of pricing. Twoillustrative pricing systems are also discussed in order to demonstrate the applicability of pricing in quite different environments. | Nielsen, N. R..Kallocation mechanisms, charging, computer pricing,costing, flexible pricing, pricing, priority charges,resource allocation, user motivation.C1.3 2.4
2021 | A Comment on Axiomatic Approaches to Programming | Hunt, B.R..Kaxiomatic method, proofs of programs,homomorphic structure in programming.C4.0 4.21 4.22 5.20 5.21 5.23 5.24
2022 | Note on an Anomaly in Paging | Pomeranz,J. E..Kpaging machines, demand paging, replacement algorithm.C4.30
2023 | A Note on Data Base Deadlocks | Baecker, H. D..Kdata base, synchronization, locking, deadlock, reference count.C3.73
2024 | Comments on a Paper by Lowe | Sattley, K.Millstein, R..Kautomatic segmentation, program connectivity.C5.24 5.32
2025 | Student's t-Distribution; Jacobi Polynomials;Modified Romberg Quadrature;Factorial Analysis of Variance; (Algorithms 332,344,351,359)  | Sale, A. H. J..KFortran standards.C4.0 4.22
2026 | Exponential Integral (Algorithm 385 $S13)) | Ng, E. W.
2027 | Ricatti-Bessel Functions of First and Second Kind (Algorithm 22 $S17)) | Bray, T..KRicatti-Bessel functions, Bessel functionsof fractional order, spherical Bessel functions.C5.12
2028 | Greatest Common Divisor of n Integersand Multipliers $A1) (Algorithm 386) | Bradley, G. H..Kgreatest common divisor, Euclidean algorithm,number theory, diophantine equations.C3.15 5.10
2029 | Exponential Integral $S13) (Algorithm 385) | Paciorek, K. A..Kexponential integral, special functions, rational Chebyshev approximation.C5.12
2030 | Context-Sensitive Parsing | This paper presents a canonical form for context-sensitivederivations and a parsing algorithm which findseach context-sensitive analysis once and only once.  The amount of memoryrequired by the algorithm is essentially no more than the required to store a single complete derivation.  In addition, a modifiedversion of the basic algorithm is presented which blocks infinite analyses for grammars which contain loops.  The algorithm isalso compared with several previous parsers for context-sensitivegrammars and general rewriting systems, and the difference betweenthe two types of analyses is discussed.  The algorithm appears tobe complementary to an algorithm by S. Kuno in several respects, including the space-time trade-off and the degree of context dependence involved. | Woods, W. A..Kcontext-sensitive grammars, context-sensitive parsing, formal grammars,formal language theory, parsing, parsing algorithms, recognition algorithms.C3.42 5.22 5.23
2031 | Algorithm and Bound for the Greatest Common Divisor of n Integers | A new version of the Euclideanalgorithm for finding the greatest common divisor of n integers a(i)and multipliers x(i) such that gcd = x(1)a(1) + ... + x(n)a(n)is presented.  The number of arithmetic operations and the numberof storage locations are linear in n.  A theorem of Lame that gives a bound for the number of iterations of the Euclidean algorithm for two integers is extended to the case of n integers.  An algorithm to construct a minimal set of multipliers is presented.  A Fortran program for the algorithm appears as Comm. ACM Algorithm 386. | Bradley, G. H..Kgreatest common divisor, Euclidean algorithm,number theory, diophantine equations.C3.15 5.10
2032 | File Structures Using Hashing Functions | A general method of file structuring is proposed which uses a hashingfunction to define tree structure.  Two types of such trees are examined, and their relation to trees studied in the past is explained.Results for the probability distributions of path lengths are derived and illustrated. | Coffman Jr., E. G.Eve, J..KData structures, tree structures, file structures, scattertables, hashing functions, information retrieval.C3.70 3.74
2033 | Space/Time Trade-offs in Hash Coding with Allowable Errors | In this paper trade-offs among certain computational factorsa given set of messages.  Two new hash-coding methods are examinedand compared with a particular conventional hash-coding method.The computational factors considered are the size of the hash area(space), the time required to identify a message as a nonmember of the given set (reject time), and an allowable error frequency.  The new methods are intended to reduce the amount of space required to contain the hash-coded information from that associated with conventional methods.  The reduction in space is accomplished by exploiting the possibility that a small fraction of errors of commission may be tolerable in some applications, in particular, applications in which a large amount of data is involved and a core residenthash area is consequently not feasible using conventional methods.  In such applications, it is envisaged that overall performancecould be improved by using a smaller core resident hash area inconjunction with the new methods and, when necessary, by using somesecondary and perhaps time-consuming test to "catch" the smallfraction of errors associated with new methods.  An example is discussedwhich illustrates possible areas of application for the newmethods.  Analysis of the paradigm problem demonstrates that allowinga small number of test messages to be falsely identified asmembers of the given set will permit a much smaller hasharea to be used without increasing reject time. | Bloom, B. H..Khash coding, hash addressing, scatter storage, searching, storagelayout, retrieval trade-offs, retrieval efficiency, storage efficiency.C3.73 3.74 3.79
2034 | The Mobile Programming System: STAGE2 | STAGE2 is the second level of a bootstrap sequence whichis easily implemented on any computer.  It is a flexible,provided by STAGE2 are summarized, and the implementation techniqueswhich have made it possible to have STAGE2 running on a newmachine with less than one man-week of effort are discussed.  The approachhas been successful on over 15 machines of widely varyingcharacteristics. | Waite, W. M..Kbootstrapping, macro processing, machine independence,programming languages, implementation techniques.C4.12 4.22
2035 | Conversational Access to a 2048-Word Machine | LAP6 is an on-line system running on a 2048-word LINC which provides full facilities for text editing, automatic filing and file maintenance, and program preparation and assembly.  It focuses on the preparation and editing of continuously displayed 23,040-character text strings (manuscripts) whichcan be positioned anywhere by the user and edited by simply addingand deleting lines as though working directly on an elastic scroll.Other features are available through a uniform command set which itself can be augmented by the user.  The machine, although small,aids program design by providing display scope and premarkedrandomly addressable LINC tapes as standard items, in an environmentsimilar to that of a sophisticated terminal.  The tapes are logically similar to a disk.  Priority was given to the design of efficienttape algorithms to minimize the limitations of the small memory.  Techniques developed for handling scroll editing, filing, and the layered system structure are outlined.  LAP6 is used by about 2000 people in 11 countries.  Its design was strongly influenced by performance criteria established in interviews held with LINC users themselves during the specification period. | Wilkes, M. A..Kconversational computer access,display editing, display oriented system, filing algorithms, LAP6,layering, LINC, man-machine communication, on-line editing, on-line efficiency,on-line environment, scroll editing, small machine system, tape filing, tape oriented system, text editing.C3.73 4.10 4.11 4.19 4.22 4.30 4.40 4.41
2036 | An Interactive Command Generating Facility | A facility to permit conversationally controlled tasksto be executed in a noninteractive environment is proposed.A means by which programs can generate interactive time-sharing commandsand receive the corresponding output response is presented.  The commands will be invoked as if they had been typed at a console keyboard.  It is argued that this facility will help overcome some of the current limitations in man-computer communication. A set of functions to accomplish the above which could be embedded into any string processing language is suggested, and necessary information pertinent to implementation of the facility on existing time-sharing systems is given. | Grant, C. A..Ktime-sharing, command languages, pseudo-teletype, interaction,conditional job control, operating systems.C3.80 3.81 4.29 4.39
2037 | Permutations of a Set with Repetitions (Algorithm 383 $G6)) | Chase, P. J..Kpermutations and combinations, permutations.C5.39
2038 | Combinations of M Out of N Objects (Algorithm 382 $G6)) | Chase, P. J..Kpermutations and combinations, permutations.C5.39
2039 | Permanent Function of a Square Matrix I and II (Algorithm 361 $G6)) | Shriver, B.Eberlein, P. J.Dixon, R. D..Kmatrix, permanent, determinant.C5.30
2040 | Modified Romberg Quadrature (Algorithm 351 $D1)) | Wallick, G. C..Knumerical integration, Romberg quadrature, modified Romberg quadrature, trapezoid values, rectangle values.C5.16
2041 | Shellsort (Algorithm 201 $M1)) | Chandler, J. P.Harrison, W. C..Ksorting, minimal storage sorting, digital computer sorting.C5.31
2042 | Treesort 3 (Algorithm 245 $M1)) | The certification of an algorithm can takethe form of a proof that the algorithm is correct.  As an illustrativebut practical example, Algorithm 245, TREESORT 3 for sortingan array, is proved correct. | London, R. L..Kproof of algorithms, debugging, certification,metatheory, sorting, in-place sorting.C4.42 4.49 5.24 5.31
2043 | Eigenvalues and Eigenvectors of a RealSymmetric Matrix $F2) (Algorithm 384) | Stewart, G. W..Kreal symmetric matrix, eigenvalues, eigenvectors, QR algorithm.C5.14
2044 | Permutations of a Set with Repetitions (Algorithm 383 $G6)) | Chase, P. J..Kpermutations and combinations, permutations.C5.39
2045 | Combinations of M Out of N Objects (Algorithm 382 $G6)) | Chase, P. J..Kpermutations and combinations, permutations.C5.39
2046 | A Relational Model of Data for Large Shared Data Banks | Future users of large data banks must be protected from having to know how the data is organized in the machine (the internal representation).  A promptingservice which supplies such information is not a satisfactorysolution.  Activities of users at terminals and most applicationprograms should remain unaffected when the internal representationof data is changed and even when some aspects of the external representation are changed.  Change in data representation will often be needed as a result of changes in query, update, and report traffic and natural growth in the types of stored information.  Existing noninferential, formatted data systems provide users with tree-structured files or slightly more general network models of the data.  In Section 1, inadequacies of these models are discussed.A model based on n-ary relations, a normal form for data base relations,and the concept of a universal form for data base relations,and the concept of a universal data sublanguage are introduced.  InSection 2, certain operations on relations (other than logicalinference) are discussed and applied to the problemsof redundancy and consistency in the user's model. | Codd, E. F..Kdata bank, data base, data structure, data organization,hierarchies of data, networks of data, relations, derivability, redundancy, consistency, composition, join, retrievallanguage, predicate calculus, security, data integrity.C3.70 3.73 3.75 4.20 4.22 4.29
2047 | Incorporating Origin Shifts into the QRAlgorithm for Symmetric Tridiagonal Matrices | The QR iteration for the eigenvalues of a symmetric tridiagonal matrix can be accelerated by incorporating a sequence of origin shifts.  The origin shiftmay be either subtracted directly from the diagonal elements ofthe matrix or incorporated by means of an implicit algorithm.  Bothmethods have drawbacks: the direct method can unnecessarily degrade small eigenvalues, while the implicit method can effectively loose the shift and thereby retard the convergence.  This paper presents a new method which has neither drawback. | Stewart, G. W..Keigenvalues, eigenvectors, QR method, originshifts, symmetric tridiagonal matrix.C5.14
2048 | Comparison of Several Adaptive Newton-Cotes Quadrature Routinesin Evaluating Definite Integrals with Peaked Integrands | This report compares the performance of five different adaptive quadrature schemes, based on Newton-Cotes (2N + 1) point rules (N = 1, 2, 3, 4, 5), inapproximating the set of definite integrals INTEGRAL$1/(x^2 + p^2)) dx with relative accuracy e. | Hillstrom, K. E..Kadaptive Newton-Cotes quadrature, quadrature scheme comparison,definite integral evaluation, adaptive numerical in tegration, Newton-Cotes integration, peaked integrand integration, quadrature efficientlyplot, New-Cotes rules applications, Newton-Cotes rules modifications.C5.10 5.16
2049 | Accurate Floating-Point Summation | This paper describes an alternate method for summing a setof floating-point numbers.  Comparison of the error bound forthis method with that of the standard summation method shows that itis considerably less sensitive to propagation of round-off error. | Linz, P..Ksummation, floating-point addition,round-off error, round-off propagation.C5.11
2050 | Automatic Parsing for Content Analysis | Although automatic syntactic and semantic analysis is not yet possible forall of an unrestricted natural language text, some applications, of which content analysis is one, do not have such a stringent coverage requirement.Preliminary studies show that the Harvard Syntactic Analyzer canproduce correct and unambiguous identification of the subject andobject of certain verbs for approximately half of the relevant occurrences. This provides a degree of coverage for content analysis variables which compares favorably to manual methods, in variables which compares favorably to manual methods, in which only a sample of the total available text is normally processed. | Damerau, F. J..KContent analysis, parsing, syntactic analysis, natural language processing,information retrieval, language analysis, text processing.C3.42 3.71
2051 | A PL/I Program to Assist the Comparative Linguist | A practical PL/I program is described whichcan assist comparative linguists to determinethe regular sound correspondences between genetically related languages.The investigator must arrange data for input by aligning pairsof suspected cognates.  The program tabulates the correspondences,and uses list processing techniques to sort and count them.Each pair of words is then assigned a relative value that is a functionof the total frequency in the data of each correspondence foundin that pair of words.  The output is a list of all correspondencetypes with their frequency of occurrence in the data, and aseparate listing of each correspondence with all word-pairs showingthat correspondence (unless their relative value is below an arbitrarily chosen cutoff point).  The article explains the usefulness,as well as the limitations, of the programs, and illustrates itsuse with a small portion of hypothetical data. | Frantz, D. G..Kcomparative linguistics, naturallanguage processing, comparative method, historical linguistics, diachroniclinguistics, genetic relationship, sound change, soundcorrespondence, regular correspondence, list processing.C3.42
2052 | Scheduling to Reduce Conflict in Meetings | Conflicts in scheduling can be treated as defining an undirected linear graph independently of the relation of the activities in conflict to additional constraints of time and space.  Each connected component of such a graph,which can be found by an algorithm described by Gotlieb and Corneil, corresponds to a set of events that must be scheduled at different times. | Grimes, J. E..Kallocation, conflict matrix, connected component, scheduling, spanningtree, undirected linear graph.C1.90 3.51 3.59 5.32
2053 | On the Conversion of Decision Tables to Computer Programs | The use of execution time diagnostics in pinpointing ambiguities in decisiontables is discussed.  It is pointed out that any attempt at resolvingambiguities at compile time will, in general, be impossible.  Itis shown that, as a consequence, tree methods of converting decisiontables to programs are inadequate in regard to ambiguity detection.Two algorithms for programming decision tables whose meritsare simplicity of implementation and detection of ambiguities atexecution time are presented. The first algorithm is for limited entrydecision tables and clarifies the importance of proper codingof the information in the decision table.  The second algorithm programsa mixed entry decision table directly without going throughthe intermediate step of conversion to a limited entry form, therebyresulting in storage economy.  A comparison of the algorithms and others proposed in the literature is made.  Some features of a decision tableto Fortran IV translator for the IBM 7044 developed by the authors are given. | Muthukrishnan, C. R.Rajaraman, V..Kdecision tables, diagnostic aids, system analysis, business applications.C3.50 3.59 4.19 4.29 4.49
2054 | On the Feasibility of Voice Input toan On-line Computer Processing System | An on-line digital computer processing system is considered in which an ordinary telephone is the complete terminal device, input to the computer being provided as a sequence of spoken words, and output to the user being audio responses from the machine.  The feasibility of implementing such a system with a FORTRAN-like algebraic compiler as the object processor is considered.  Details of a specific word recognition program are given.  This technique depends on three simplifying restrictions, namely, a "small"vocabulary set, "known" speakers, and a "moment of silence"between each input word.  Experimental results are presented givingerror rates for different experimental conditions as well as the machine resources required to accommodate several users at a time. The results show that at this time it is both economically and logically feasible to handle at least 40 users at a time with an IBM 360/65 computer. | Elder, H. A..Kspeech recognition, word recognition, pattern-matching, patternrecognition, time-sharing, remote access, voice input, speech input,telephone input/output, acoustic signal, spoken-word input, talking to computers, man-machine interaction.C3.63 3.81 4.32 4.41 6.35
2055 | Subroutine to Perform In-Situ Transpositionof a Rectangular Matrix (Algorithm 380) | Lachenmaier, R..Krectangular matrix, transpose.C5.14
2056 | Gomory (Algorithm 263A $H)) | Proll, L. G..Klinear programming, integer variables, dual method.C5.41
2057 | Random Vectors Uniform in Solid Angle (Algorithm 381 $G5)) | Knop, R. E..Krandom number, random vector, random number generator, probabilitydistribution, frequency distribution, simulation, Monte Carlo.C5.5
2058 | In-Situ Transposition of a Rectangular Matrix (Algorithm 380 $F1)) | Laflin, S.Brebner, M. A..Krectangular matrix, transpose.C5.14
2059 | A Language for Treating Graphs | A language for the representation of graph is described, and the formulation of graph operations such as node and/or link deletion or insertion, union, intersection, comparison, and traversal of graphs is given.  Graphsare represented by linked lists.  The language is syntactically definedas an extension to ALGOL 60, and it is translated into ALGOLby means of a syntax-driven compiler.  Application areas for this language areoperation research, network problems, control theory, traffic problems, etc. | Crespi-Reghizzi, S.Morpurgo, R..Kgraphs, oriented, nonoriented, multiple,colored graph, language extended ALGOL,operator-precedence, syntax-driven compiler,operation research, network, traffic.C3.2 3.5 4.2 5.3
2060 | GEDANKEN-A Simple Typeless Language Based on thePrinciple of Completeness and the Reference Concept | GEDANKEN is an experimental programming language with the following characteristics.  (1) Any value which is permitted in some context of the language is permissible in any other meaningful context.  In particular,functions and labels are permissible  results of functions and valuesof variables.  (2) Assignment and indirect addressing are formalizedby introducing values, called reference, which in turn possessother values.  The assignment operation always affects the relationbetween some reference and its value,  (3) All compound datastructures are treated as functions.  (4) Type declarations arenot permitted.  The functional approach to data structures and theuse of references insure that any process which accepts some datastructure will accept any logically equivalent structure, regardlessof its internal representation.  More generally, any data structuremay be implicit; i.e. it may be specified by giving an arbitraryalgorithm for computing or accessing its components.  The existence of label variables permits the construction of coroutines,quasi-parallel processes, and other unorthodox control mechanisms.A variety of programming examples illustrates the generality of the language.Limitations and possible extensions are discussed briefly. | Reynolds, J. C..Kprogramming language, data structure, reference, assignment, coroutine,quasi-parallel process, typeless language, applicative language,lambda calculus, list processing, nondeterministic algorithm.C4.20 4.22 5.23 5.24
2061 | An Algorithm for the Construction Of Bounded-Context Parsers | An algorithm is described which accepts an arbitrary context-freegrammar and constructs a bounded-context parser forit whenever such a parser exists.  In the first part of the paperthe definition of a context-free grammar and the working of abounded-context parser are recalled.  The notion of reduction class fora context-free grammar is then introduced and its connection withthe structure of a bounded-context parser is indicated.  Next,pushdown automata which generate the different reduction classesof a context-free grammar are defined.  Finally, the algorithm is described;it essentially carries out an exhaustive study of all possibleruns of the pushdown automata generating the reduction classes.In the second part, the utility of the algorithm is discussed in the light of the experience gained from its use in compiler design.The algorithm is claimed to be particularly useful in thesimultaneous design of a language and a compiler for it. | Loeckx, J..Kbounded-context parsing, bounded-context syntactic analysis, parser construction, syntactical analyzer construction, generators, compiler compilers, compiler writing systems, translator writing systems metacompilers,context-free grammars, formal languages, pushdown automata.C4.12 5.22 5.23
2062 | The Application of Sequential Samplingto Simulation: An Example Inventory Model | Four different sequential sampling procedures are appliedto the analysis of data generated by a computer simulationexperiment with a multi-item inventory model.  For each procedurethe cost of computer time required to achieve given levels ofstatistical precision is calculated.  Also the cost of computer timeusing comparable fixed sample size methods is calculated.  Thecomputer costs of fixed sample size procedures versussequential sampling procedures are compared. | Sasser, W. E.Burdick, D. S.Graham, D. A.Naylor, T. H..Ksimulation, inventory models, sequentialsampling, models, experimental design.C3.31 3.50 3.54 5.5
2063 | Translation Equations (Errata) | Vere, S.
2064 | Operations on Generalized Arrays with the Genie Compiler | Operations on vectors, matrices, and higher dimensional storage arrays are standard features of most compilers today.  The elements of such structures areusually restricted to be scalars.  For many sophisticated applicationsthis restriction can impose cumbersome data representations.An efficient system has been devised and implemented which allowsthe elements of multidimensional arrays to themselves be multidimensionalarrays.  This system was developed from a storage structurein which the location, length, and content of each array is describedby a codeword which can be interpreted by the system.  Code words may describe arrays containing more codewords, thus providingall needed descriptive information for hyperstructures of any form. | Sitton, G. A..Kmultidimensional arrays, matrix operations,storage control, subscripting, compilers.C4.12 4.29
2065 | A Programming System for the On-line Analysis of Biomedical Images | A preliminary description of the software for a computer-displaysystem is given with special emphasis on the  man-machine interaction. This system is intended for a wide variety of biomedical applications.As an example, the methods are applied to the karyotyping of chromosomes.  The system is separated into four programming tasks: picture transformations, file maintenance, picture structuring, and display management.  Picture structuringis considered as the vehicle for man-machine communication.A prototype data format for pictures, called a picture-form, is developed.Structure operators are defined which manipulate picture-forms to produce new pictures-forms.  Many of the ideas are taken from the symbolic mathematical laboratory at MIT conceived by Marvin Minsky. | Hodes, L..Kimage processing, biomedical image processing, on-line image processing,semiautomatic image processing, data structure, structure operators,picture processing, biomedical picture processing, on-line pictureprocessing, semiautomatic picture processing, semiautomatickaryotyping, karyotyping, list processing picture processing.C3.12 3.34 3.63 4.39 6.29
2066 | An Algol Construction for Procedures as Parameters of Procedures | Knight, K. R..KAlgol, procedures, parameters, side effects.C4.22
2067 | Comment on Lawler's Multilevel Boolean Minimization | DeVries, R. C..Kmultilevel logic design, generalized prime implicants,minimal forms, minimization, incompletelyspecified functions.C6.1
2068 | Comment on Multiprogramming Under a Page on Demand Strategy | Smith, J. L..Kmultiprogramming, paging, modeling.C4.32
2069 | Comments on a Paper by Wallace and Mason | Heess Jr., W. F..Kpage-on-demand, demand paging, time-sharing multiprogramming,Markovian computer models, scheduling strategies,operating systems, memory management.C2.44 4.32 4.39 6.20 6.21
2070 | A Formal System for Information Retrieval from Files | Hsiao, D.Harary, F.
2071 | Filon Quadrature (Algorithm 353 $D1)) | Fosdick, L. D.Einarsson, Bo.Kquadrature, Filon quadrature, integration, Filonintegration, Fourier coefficients, Fourier series.C5.16
2072 | Modified Romberg Quadrature (Algorithm 351 $D1)) | Cook, N. D..Knumerical integration, Romberg quadrature,trapezoid values, rectangle values, error bound.C5.16
2073 | Solution of Linear Programs in 0-1 Variablesby Implicit Enumeration (Algorithm 341 $H)) | Guignard, M. M..Klinear programming, zero-one variables, partial enumeration.C5.41
2074 | Sqank (Algorithm 379 $D1)) | Lyness, J. N..Knumerical integration, integration rule, adaptive integration,automatic integration, Simpson's rule, numerical quadrature, quadrature, quadrature rule, adaptive quadrature, automatic quadrature, round-off error control.C5.16
2075 | Discretized Newton-Like Method for Solving a Systemof Simultaneous Nonlinear Equations (Algorithm 378 $C5)) | Pankiewicz, W..KNewton's method, nonlinear equations, interpolating polynomials.C5.15 5.13
2076 | Cubic Splines on Uniform Meshes | A very simple procedure is presented for constructing cubic splines,periodic or nonperiodic, on uniform meshes.  Arcs of two cubics sufficeto construct a basis of cardinal splines.  An algorithm is given which requires only minimal storage and computation and permits easy trade-off of one against the other. | Nilson, E. N..Ksimple spline representation, cardinal splines, uniform mesh splines.C5.13
2077 | The Cyclical Majority Problem | The problem of the cyclical majority is presented and some new, simulatedresults for 3, 4, 5, ..., 40 issues ad 3, 5, 7, ..., 37 judges are reported. | Pomeranz, J. E.Weil Jr., R. L..KArrow's paradox, cyclical majority, simulation,voter's paradox, voting paradox.C3.31 3.35
2078 | Representations for Space Planning | Problems involving the arrangement of objects in two- or three-space where the objective function primarily consistsof derivatives of the distance between objects or their arrangementare called space planning problems.  The representationalrequirements for this problem area are defined and compared with currentcomputer graphic languages.  Four alternative data structuresthat allow automated space planning are described and compared. | Eastman, C. M..Kautomated design, data structures, computer graphics, computer-aideddesign, engineering design, architectural design, robots.C3.20 3.22, 3.26, 3.41, 3.63
2079 | On Multiprogramming, Machine Coding, and Computer Organization | Wirth, N.
2080 | The Nucleus of a Multiprogramming System | This paper describes the philosophy and structure of a multiprogramming system that can be extended with a hierarchy of operating systems to suit diverse requirements of program scheduling and resource allocation.  The systemnucleus simulates an environment in which program execution and input/outputare handled uniformly as parallel, cooperating processes.  A fundamental set of primitives allows the dynamic creation and controlof a hierarchy of processes as well as the communication among them. | Hansen, P. B..Kmultiprogramming, operating systems, parallel processes, process concept,process communication, message buffering, processhierarchy, process creation, process removal.C4.30 4.31 4.32 4.41
2081 | Some Complete Calculi for Matrices | A matrix calculus is introduced with the intention of developing data structuressuitable for a high level algorithmic language for mathematical programming.  The paper investigates how the special structure of matrices can be describedand utilized for efficient computing by saving memory space andsuperfluous operations.  Sequences of Matrices (and sequences of sequencesof matrices) are considered, and matrix operators areextended to sequence operators and cumulative operators.  Algorithmsare given which use symbol manipulation of matrix expressions soas to find the forms best suited for computation.  These forms arecalled normal forms.  Several completeness results are obtainedin the sense that for each expression an equivalent expressionin normal form can be found within a specified calculus. | Bayer, R.Witzgall, C..Kcomplete calculus, data structures, linearprogramming, matrix, matrix concatenation,matrix sequences, programming languages,sequence operations, symbol manipulation.C4.12 4.22 5.14 5.41
2082 | Syntax-Directed Documentation For PL 360 | The language PL 360, together with its phrase structure grammar, is used as a concrete basis for illustrating an idea called syntax-directed documentation. This idea is (1) to use the phrase structure of a program to define the structure of a formal documentation for that program; (2) to use the syntactic types and identifiers in the resulting structure to trigger the automaticformation of questions to the programmer, whose answers willbecome part of that documentation; and (3) to provide automatic storageand retrieval facilities so that other programmers who wantto understand or modify the program can access the resulting documentation,which is cross-indexed in various ways by syntactic typesand objects.  A small PL 360 program, already foundin the literature, is worked out as an example. | Mills, H. D..Kdocumentation, syntax analysis, PL 360, enforced documentation,indexed documentation, automatic interrogation,phase structured grammar, syntax-directed documentation, syntax processing.C3.59 3.79 4.19 4.43
2083 | Creation and Control of Internal Data BasesUnder a Fortran Programming Environment | A method is described for the definition of a user's COMMON structureand the automatic generation of the necessary COMMON, DIMENSION, EQUIVALENCE,and type declarations for each of the user's routines.  The definitionfor the COMMON is contained in an easy to modify form, thusallowing the control of general communications of data between routines.The described system has been implemented on the IBM 7094,CDC 6000 series, and the IBM 360.  The method has proved to be invaluablefor the definition and control of COMMON in many large-scale programs. | DeSalvio, A. J.Purdy, J. G.Rau, J..Kdata base, Fortran, common, common equivalencing,subroutine communication, data communication.C3.73 4.12 4.43
2084 | A Note on the Complement of Inherently Ambiguous Context-Free Languages | Maurer, H. A..Kambiguity, inherent ambiguity, complement, context-free language,Chomsky-language, phrase structure language, production system,type 2 language, bounded language.C5.22 5.24
2085 | Comment on a Paging Anomaly | Dempster, J. R. H..Kpaging machines, demand paging, replacement algorithm.C4.30
2086 | Another Method of Converting from Hexadecimal to Decimal | Kailas, M. V..Kbinary-decimal conversion, computer arithmetic categories
2087 | A Number System for the Permutations | Pager, D..Kpermutation, ordering, number, number system, p-number, combinatorial.C4.49 5.39
2088 | Netflow (ALgorithm 336 $H)) | Bray, T. A.Witzgall, C..Kcapacitated network, linear programming, minimum-costflow, network flow, out-of-kilter.C5.32 5.41
2089 | Prime Number (Algorithm 310 $A1)) | Rapp, D. G.Scott, L. D..Kprime numbers, generator.C5.0
2090 | Symbolic Expansion of Algebraic Expressions (Algorithm 377 $R2)) | Levine, M. J..Kalgebra, symbolic algebra, symbolicmultiplication, algebraic distribution,algebraic multiplication, distribution algorithm,multiplication algorithm, product algorithm, polynomial distribution, polynomial expansion.C3.10 3.17 3.20 4.13 4.90
2091 | PDEL-A Language for Partial Differential Equations | Conventional computer methods available to solvecontinuous system problems characterized by partialdifferential equations are very time-consuming and cumbersome.  Aconvenient, easy to learn and to use, high level problem orientedlanguage to solve and study partial differential equation problemshas been designed; a practical translator for the language has alsobeen designed, and a working version of it has been constructedfor a significant portion of the language.  This Partial DifferentialEquation Language, PDEL, is outlined, and the highlightsof the translator are briefly summarized. | Cardenas, A. F.Karplus, W. J..Kproblem oriented or digital simulation language,partial differential equations, translator,PL/1, preprocessor PL/1, finite difference algorithms.C3.1 3.2 4.22 5.17
2092 | A Deductive Question-Answer for Natural Language Inference | The question-answering aspects of the Protosynthex III prototype language processing system are described and exemplified indetail.  The system is written in LISP 1.5 and operates on the Q-32time-sharing system.  The system's data structures and their semanticorganization, the deductive question-answering formalism ofrelational properties and complex-relation-forming operators, andthe question-answering procedures which employ these features intheir operation are all described and illustrated.  Examples of thesystem's performance and of the limitations of its question-answering capability are presented and discussed.  It is shown that theuse of semantic information in deductive question answering greatly facilitates the process, and that a top-down procedure which worksfrom question to answer enables effective use to be made of thisinformation.  It is concluded that the development of ProtosynthexIII into a practically useful system to work with large databases is possible but will require changes in both the datastructures and the algorithms used for question answering. | Schwarcz, R. M.Burger, J. F.Simmons, R. F..Kquestion answering, natural language, Protosynthex III, LISP,semantics, artificial intelligence, computationallinguistics, language processing, fact retrieval.C3.42 3.61
2093 | A Comparison of Error Improvement Estimatesfor Adaptive Trapezoid Integration | Various simple choices of error improvement estimates for the trapezoidrule are studied to demonstrate a comparison procedure which isrelatively independent of the profusion of adaptive search and stoppingstrategies.  Comparisons are based on x^r, `; the inclusionof the noninteger powers makes this more realistic than the usual polynomialbased comparison.  Behavior near the singularity was foundto be the dominant factor, and a new estimate, based on a constantcurvature assumption and parametric differences, was consideredslightly better than the other choices considered. | Schweikert, D. G..Kadaptive integration, error improvement estimate,trapezoid rule, nonpolynomial error criteria.C5.16
2094 | On an Algorithm for Nonlinear Minimax Approximation | Certain nonlinear minimax approximation problems are characterized by properties which permit the application of special algorithms,mainly based on the exchange algorithms of Remes (1934, 1935), fortheir solution.  In this paper the application to problems of thistype of a general nonlinear algorithm due to Osborne and Watson(1969) is considered.  Examples are given to illustrate that thisalgorithm can give satisfactory results and, in particular, cansuccessfully solve problems which lead to difficultieswith the more conventional specialist method. | Watson, G. A..Kminimax approximation, nonlinear approximation, linear programming.C5.13 5.41
2095 | Measurements of Segment Size | Distributions of segment sizes measured under routine operating conditions on a computer system which utilizes variable sized segments(the Burroughs B5500) are discussed.  The most striking featureof the measurements is the large number of small segments-about 60percent of the segments in use contain less than 40 words.  Althoughthe results are certainly not installation independent, and although they are particularly influenced by features of the B5500 ALGOL system, they should be relevant to the design of new computer systems,especially with respect to the organization of paging schemes. | Batson, A.Ju, S.Wood, D. C..Kstorage allocation, segmentation, segment sizes, page sizes,paging, resource allocation, memory allocation, core utilization.C4.32 6.2 6.34 6.9
2096 | Experiments with the M & N Tree-Searching Program | The M & N procedure is an improvement to the mini-maxbacking-up procedure widely used in computer program for game-playingand other purposes.  It is based on the principle that it isdesirable to have many options when making decisions in the face ofuncertainty.  The mini-max procedure assigns to a MAX (MIN) nodethe value of the highest (lowest) valued successor to that node. The M & N procedure assigns to a MAX (MIN) node some function ofthe M (N) highest (lowest) valued successors.  An M & N procedure waswritten in LISP to play the game of kalah, and it was demonstrated that the M & N procedure is significantly superior to the mini-maxprocedure.  The statistical significance of important conclusions is given. Since information on statistical significance has often been lacking in papers on computer experiments in the artificial intelligence field, these experiments can perhaps serve as a model for future work. | Slagle, J. R.Dixon, J. K..Kartificial intelligence, heuristic program, tree searching,LISP, kalah, game playing, decision theory, mini-max backing-up procedure, backing-up procedures.C3.60 3.64 3.66
2097 | A Program to Teach Programming | The TEACH system was developed at MIT to ease the cost and improve the results of elementary instruction in programming.  To the student, TEACH offers loosely guided experience with a  conversational language which was designed withteaching in mind.  Faculty involvement is minimal.  A term of experiencewith TEACH is discussed.  Pedagogically, the system appears to be successful; straightforward reimplementation will make it economically successful as well. Similar programs of profound tutorial skill will appear only as the results ofextended research.  The outlines of his research are beginning to become clear. | Fenichel, R. R.Weizenbaum, J.Yochelson, J. C..Kelementary programming, computer-assisted learning, UNCL, TEACH.C1.52
2098 | t-Test Probabilities (Algorithm 321);Student's t-Distribution (Algorithm 344) | Hill, G. W.Loughhead, M..Kt-test, Student's t-statistic, distribution function, approximation.C5.12 5.5
2099 | Eigenvalues and Eigen vectors of aReal General Matrix (Algorithm 343 $F)) | Knoble, H. D..Knorm, characteristic equation, degenerate eigen-system,diagonalizable matrix, defective matrix  .C5.14
2100 | Ortho (Algorithm 127 $F5)) | Barrodale, I..Korthogonalization, approximation.C5.13 5.17 5.5
2101 | Least Squares Fit By f(x) = Acos(Bx+C) (Algorithm 376 $E2)) | Spath, H..Knonlinear least squares fit.C5.15
2102 | Fitting Data To One Exponential (Algorithm 375 $E2)) | Spath, H..Knonlinear least squares fit.C5.15
2103 | Restricted Partition Generator (Algorithm 374 $A1)) | White, J. S..Kpartitions, restricted partitions, sums of integers, restricted sums.C5.39
2104 | Number of Doubly Restricted Partitions (Algorithm 373 $A1)) | White, J. S..Kpartitions, restricted partitions, sums of integers, restricted sums.C5.39
2105 | An Interactive Computer System Using Graphical Flowchart Input | An interactive computer system operational on a graphical computer terminal is described.  This system was designed to demonstrate a method of programming by computer interpretation of a flowchart.  The user draws a description of asampled-data system and specifies description is transmitted to a largescale computer.  The design is simulated, and a graphic representation of the processed signal is returned to the scope.  A successful design may require numerous modifications of the original design.  A graphical interactive system provides an environment to perform this iterative process efficiently and effectively. | Robins, M. F.Beyer, J. D..Ksimulation program, graphical input-output sampled data systems.C3.20 3.24
2106 | Computer Education in a Graduate School of Management | Several years of experience have led to the belief that the creativedesign and evaluation of management information systems requiresa thorough understanding of the related computer technology.  Conceptssuch as paging and priority interrupt systems can best be explained at the machine language level.  Any machine used for expositionshould fulfill several criteria.  It should: (1) raise as fewspurious issues as possible; (2) allow, without undue effort, thesolution of interesting problems; (3) be capable of exposing alloutstanding issues of significance, capable of exposing all outstandingissues of significance, within the chosen machine; (4) beseful for pursuing issues in great depth when appropriate; (5) notbe committed to the equipment provided by any manufacturer; (6) be able to provide the student with diagnostic aids to a great depth;(7) allow the student ready access to the machine; (8) be capableof extension to expose new issues as they come along.  We haveconstructed a simulated machine and its associated software whichmeets these criteria.  This system, called the PRISM system,is documented by a primer and a reference manual. | Ness, D. N.Green, R. S.Martin, W. A.Moulton, G. A..Keducation, simulation, machine language,management information systems, interpreters.C1.52 3.51 4.13 4.21
2107 | The Quadratic Quotient Method: A HashCode Eliminating Secondary Clustering | Secondary clustering as a cause of hash code inefficiency is discussed, and a new hashing method based on its elimination is presented.  Comparisons with previous methods are made both analytically and empirically. | Bell, J. R..Khashing, hash code, scatter storage, calculated address, clustering,search, symbol table, collisions, keys, table look-up .C3.74 4.9
2108 | A Variation on Sorting by Address Calculation | The principles of address calculation and merging are combined to yield anefficient sorting technique. Detailed flowcharts of the most important programsteps are included. The characteristics of the proposed sort are discussed. | Jones, B..Ksorting, address calculation, merging, order, sequence creation.C4.49 5.31
2109 | The Use of Quadratic Residue Research | A quadratic residue search method has previously been suggestedto avoid the clustering usually encountered when hash address collisionsoccur and linear search methods are used.  The search size, becauseof the property of quadratic residues, is limited to one half ofthe storage table.  It is shown that for some classes of prime numbersthe complement of the set of quadratic residues can easily be determined and hence the entire table of size p, where p is that prime number, can be searched. | Radke, C. E..Kquadratic residue, search method, hash addressing, addressclustering, scatter storage, file searching, fileaddressing, hash coding, quadratic search,random search, storage layout, searching.C3.7 3.73 3.74
2110 | An Efficient Context-free Parsing Algorithm | A parsing algorithm which seems to be the most efficient general context-free algorithm known is described.  It is similar to both Knuth's LR(k) algorithm and the familiar top-down algorithm.  It has a time bound proportional to n^3 (where n is the length of the string being parsed) in general; it has a n^2 bound for unambiguous grammars; and it runs in linear time on a large class of grammars, which seems to include most practical context-freeprogramming language grammars.  In an empirical comparison it appearsto be superior to the top-down and bottom-up algorithms studied by Griffiths and Petrick. | Earley, J..Ksyntax analysis, parsing, context-free grammar,compilers, computational complexity.C4.12 5.22 5.23
2111 | Spelling Correction in Systems Programs | Several specialized techniques are shown for efficientlyincorporating spelling correction algorithms into compilers and operating systems.  These include the use of syntaxand semantics information, the organization of restricted keywordand symbol tables, and the consideration of a limited class of spellingerrors.  Sample 360 coding for performing spelling correctionis presented.  By using systems which perform spelling correction,the number of debugging runs per program has been decreased,saving both programmer and machine time. | Morgan, H. L..Kspelling correction, error correction, debugging, compilers,operating systems, diagnostics, error detection, misspelling, lexical analysis systems programming.C4.42 4.12 3.0 3.79
2112 | Translation Equations | Input limited transduction expressions, or translation equations,are used to describe the syntax and left-context sensitive semantics for context-free languages.  A formal procedure is given for deriving froma set of translation equations the specifications for a pushdown translator.The translator consists of Mealy form finite-state automata interactingby means of a pushdown stack.  Within the framework described string recognition and parsing may be treated as special cases of the translation problem. | Vere, S..Kautomata, Turing machines, regular expression, transductionexpression, context-free languages, translation, recognizers,parsing, meta-compilers, pushdown transducer, syntaxdirected compilers, finite state automata.C4.10 4.12 4.20 5.22
2113 | The Multistore Parser for Hierarchical Syntactic Structures | A syntactic parser is described for hierarchical concatenation patternsthat are presented to the analyzer in the form of linear strings.  Particularemphasis is given to the system of "significant addresses" by meansof which processing times for large-scale matching procedurescan be substantially reduced.  The description makes frequent useof examples taken from the fully operational implementation of theparser in an experimental English sentence analyzer.  By structuringan area of the computer's central core storage in such a waythat the individual locations of bytes and bits come to represent thedata involved in the matching procedure, the shifting of informationis reduced to a minimum, and the searching of lists is eliminatedaltogether.  The matches are traced by means of binary masksand the state of single bits determines the operational flow of theprocedure.  The method could be implemented with any interpretivegrammar, provided it can be expressed by the functional classificationof the items composing the input hierarchical structures. | von Glasersfeld, E..Kparsing, syntactic analysis, natural-language analysis, linguistic dataprocessing, computational linguistics, correlational grammar, structurerecognition, pattern recognition, matching procedures, tree-structure interpretation, machine translation, automatic abstracting.C3.42 3.49 3.63 3.70 3.71
2114 | A Formal System for Information Retrieval from Files | A generalized file structure is providedby which the concepts of keyword, index, record, file, directory,file structure, directory decoding, and record retrieval are definedand from which some of the frequently used file structures suchas inverted files, index-sequential files, and multilist files arederived.  Two algorithms which retrieve records from the generalized file structure are presented. | Hsiao, D..Kattribute-value pair, index, keyword, record, record address,K-pointer, K-list, file, directory, generalized filestructure, inverted file, index-sequential-file, multilist file,description, file search, directory search, serial processing oflists, prime keyword, parallel processing of lists .C3.70 3.73 3.74
2115 | Fortran Tausworthe Pseudorandom Number Generator | Payne, W. H..Krandom numbers, pseudorandom numbers, shift register sequences.C5.5
2116 |  Interchange Rolls of Perforated Tape for InformationInterchange* (Proposed American National Standard)
2117 | Representation for Calendar Date for Machine-to-Machine Data Interchange*(Proposed American National Standard)
2118 | An Efficient Algorithm for Sorting withMinimal Storage (Algorithm 347 $M1)) | Griffin, R.Redish, K. A..Ksorting,minimal storage sorting, digital computer sorting.C5.31
2119 | Derivatives (Algorithm 282 $S22)) | Gautschi, W.Klein, B. J..Krecursive computation, successive derivatives, error control.C5.11 5.12
2120 | An Algorithm to Produce Complex Primes, Csieve (Algorithm 372 $A1)) | Dunham, K. B..Kprimes, complex numbers.C5.39
2121 | Partitions in Natural Order (Algorithm 371 $A1)) | McKay, J. K. S..Kpartitions,number theory.C5.39
2122 | General Random Number Generator (Algorithm 370 $G5)) | Butler, E. L..Krandom number generator, probability density function,transformation, cumulative density function.C5.13 5.5
2123 | Generator of Random Numbers Satisfying thePoisson Distribution (Algorithm 369 $G5)) | Schaffer, H. E..KPoisson distribution, random number generator.C5.5
2124 | Numerical Inversion of Laplace Transforms (Algorithm 368 $D5)) | Stehfest, H..KLaplace transform inversion, integral transformations, integral equations.C5.15 5.18
2125 | A Note on Minimal Length Polygonal Approximation to a Digitized Contour | A method for extracting a smooth polygonalcontour from a digitized image is illustrated.The ordered sequence of contour points and the connection graph ofthe image are first obtained by a modified Ledley algorithm in oneimage scan.  A minimal perimeter polygon subjected to specified constraintsis then chosen as the approximating contour.  The determination of the minimal polygon can be reduced to a nonlinear programmingproblem, solved by an algorithm which takes into accountthe weak bonds between variables.  Some examples are presented,and the corresponding computing times are listed. | Montanari, U..Kdigitized image, connection tree, minimal polygon,optimal approximation, nonlinear programming.C3.63 5.13 5.17
2126 | Experience with an Extensible Language | An operational extensible language system is described.The system and its base language are appraised with respect to efficiency, flexibility, and utilityfor different categories of users. | Irons, E. T..Kprogramming languages, extensible, compiler, bootstrapping, ambiguity.C4.12 4.22
2127 | Natural Language Question-Answering Systems: 1969 | Recent experiments in programming naturallanguage question-answering systems are reviewedto summarize the methods that have been developed for syntactic, semantic,and logical analysis of English strings.  It is concludedthat at least minimally effective techniques have been devised foranswering questions from natural language subsets in small scaleexperimental systems and that a useful paradigm has evolved to guideresearch efforts in the field.  Current approaches to semanticanalysis and logical inference are seen to be effective beginningsbut of questionable generality with respect either to subtle aspects of meaning or to applications over large subsets of English. Generalizing from current small-scale experiments to language-processing systems based on dictionaries with thousands of entries-withcorrespondingly large grammars and semantic systems-may entaila new order of complexity and require the invention and developmentof entirely different approaches to semantic analysis and questions answering. | Simmons, R. F..Kquestion-answering, natural language, artificial intelligence,languageprocessing, fact retrieval, semantics .C3.6 3.64 3.7 3.74
2128 | A Processor Allocation Method for Time-Sharing | A scheduling algorithm is proposed which is intended to minimize changes of tasks on processors and thereby reduce over-head.  The algorithm also hasapplication to more general resource allocation problems.  It is implemented by means of a method for efficiently handling dynamically changing segmented lists. | Mullery, A. P.Driscoll, G. C..Ktime sharing, resource allocation, scheduling algorithms,monitors, dynamic allocation, processorallocation, multiprogramming, multiprocessing, timeslicing, scheduling, conversational systems, interactive systems .C3.80 4.30 4.31 4.32 6.33
2129 | Recursive Computation of Certain Derivatives-AStudy of Error Propagation | A brief study is made of the propagation of errorsin linear first-order difference equations.  Therecursive computation of successive derivatives of (e^x)/xand (cos x)/x is considered as an illustration. | Gautschi, W..Krecursive computation, successive derivatives, error propagation.C5.11 5.12
2130 | Automatic Segmentation of Cyclic Program StructuresBased on Connectivity and Processor Timing | Time-shared, multiprogrammed, and overlayed batch systems frequentlyrequire segmentation of computer programs into discrete portions.  These program portions are transferred between executable andperipheral storage whenever necessary; segmentation of programs in a manner that  reduces the frequency of such transfers is thesubject of this paper.  Segmentation techniques proposed by C. V.Ramamoorthy are subject to limitations that arise when the preferredsegment size is not compatible with the physical restrictionsimposed by the available computing equipment.  A generalization ofRamamoorthy's suggestions is made in order to allow their application when circumstances are other than ideal. | Lowe, T. C..Kautomatic segmentation, cyclic program structures, loops, paging, multiprogramming, loaders, assemblers, compilers, time-sharing, program connectivity.C4.19 5.24 5.32
2131 | Rapid Computation of Weights of InterpolatoryQuadrature Rules [D1] (Algorithm 417) | Gustafson, S..Kdivided differences.C5.16
2132 | Rapid Computation of Coefficients of InterpolationFormulas [E1] (Algorithm 416) | Gustafson, S..Kdivided differences, Newton's interpolation formula.C5.13
2133 | Algorithm for the Assignment Problem(Rectangular Matrices) [H] (Algorithm 415) | Bourgeois, F.Lassalle, J. C..Koperations research, optimization theory,assignment problem, rectangular matrices.C5.39 5.40
2134 | An Extension of the Munkres Algorithm forthe Assignment Problem to Rectangular Matrices | The assignment problem, together with Munkresproposed algorithm for its solution in square matrices, is presented first.  Then the authors developan extension of this algorithm which permits a solution for rectangular matrices.  Timing resultsobtained by using an adapted version of Silver's Algol procedure are discussed, and a relation betweensolution time and problem size is given. | Bourgeois, F.Lassalle, J..Koperations research, optimization theory, assignmentproblem, rectangular matrices, algorithm.C5.39 5.40
2135 | Rapid Computation of General InterpolationFormulas and Mechanical Quadrature Rules | Let f have n continuous on a closed interval[a,b] and let L be a linear functional.  The attempt is made to approximate L (f) with L (Q) where Q is a polynomial,approximating f.  Algorithms are developed for rapid computation of L (Q) for a wide class ofselections of Q which includes the Lagrangian and Hermitian rules as special cases. | Gustafson, S..Klinear functionals, divided differences, Newton's interpolation formula.C5.13 5.16
2136 | A Note on "A Modification of Nordsieck'sMethod Using an 'Off-Step' Point" | Blumberg, J. W.Foulk, C. R..Kordinary differential equations, multi-step methods,predictor, corrector, round-off error, Nordsieck's method, Gragg-Stetter modification.C5.11 5.16 5.17
2137 | New LISP Techniques for a Paging Environment | The system described herein employs the blockconcept, and that of global and local variables, in addition to the methods applied in most LISP systems. Also, a new means of list representation is used: "local sequential" for lists created during compilation,and "block level sequential" for those created dynamically.  A new garbage collection algorithmhas been introduced to make lists as compact as possible; partial garbage collection is performed aftereach block exit instead of total garbage collection when storage is exhausted.  The algorithm does not usethe customary flagging procedure.  This combination of features has eliminated the need for a free list,and effectively minimizes the number of pages used at any moment. | Rochfeld, A..KLISP, list processing, paging, virtual memory,garbage collection, core fragmentation, compact list structures, block, segment.C4.12 4.22 4.32
2138 | BLISS: A Language for Systems Programming | A language, BLISS, is described.  This languageis designed so as to be especially suitable for use in writing production software systems for aspecific machine (the PDP-10): compilers, operating systems, etc.  Prime design goals of the design are theability to produce highly efficient object code, to allow access to all relevant hardware features ofthe host machine, and to provide a rational means by which to cope with the evolutionary nature of systemsprograms.  A major feature which contributes to the realization of these goals is a mechanism permittingthe definition of the representation of all data structures in terms of the access algorithm for elements of the structure. | Wulf, W. A.Russell, D. B..Kprogramming languages, implementation language,systems programming, data structures.C4.12 4.21 4.22
2139 | Implementation of the Substring Test by Hashing | A technique is described for implementing thetest which determines if one string is a substring of another.  When there is low probability that the testwill be satisfied, it is shown how the operation can be speeded up considerably if it is preceded bya test on appropriately chosen hash codes of the strings. | Harrison, M. C..Ksubstring, hashing, subset, signature, informationcompression, information retrieval, searching.C3.74 5.30 5.6
2140 | Retrieval-Update Speed Tradeoffs Using Combined Indices | In a paper in the November 1970 Communicationsof the ACM, V. Y. Lum introduced a technique of file indexing named combined indices.  This techniquepermitted decreased retrieval time at the cost of increased storage space.  This paper examines combinedindices under conditions of file usage with different fractions of retrieval and update.  Tradeoffcurves are developed to show minimal cost of file usage by grouping various partially combined indices. | Mullin, J. K..Kfile organization, combined index files, invertedfiles, information retrieval, query, multi-attribute retrieval, file update.C3.73 3.74 3.79
2141 | Algorithmic Selection of the BestMethod for Compressing Map Data Strings | The best of a dozen different methods forcompressing map data is illustrated.  The choices are generated by encoding data strings-sequence of likecodes-by three methods and in four directions.  Relationships are developed between compression alternativesto avoid comparing all of them.  The technique has been used to compress data from forest resource maps,but is widely applicable to map and photographic data reduction. | Amidon, E. L.Akin, G. S..Kdata compression, map storage, information retrieval,input/output, run coding, data reduction.C3.71 3.74
2142 | Reconstruction of Pictures from Their Projections | There are situations in the natural sciencesand medicine (e.g. in electron microscopy and X-ray photography) in which it is desirable to estimate thegray levels of a digital picture at the individual points from the sums of the gray levels along straightlines (projections) at a few angles.  Usually, in such situations, the picture is far from determinedand the problem is to find the "most representative" picture.  Three algorithms are described (all usingMonte Carlo methods) which were designed to solve this problem.  The algorithms are applicable in a largeand varied number of fields.  The most important uses may be the reconstruction of possibly asymmetric particlesfrom electron micrographs and three-dimensional X-ray analysis. | Gordon,R.Herman, G. T..Kapproximation, biomedical image processing, efficientencoding, image processing, linear programming, mathematical programming, Monte Carlo techniques, optimization,picture compression, picture description, picture processing, stereology, X-ray analysis.C3.12 3.13 3.15 3.17 3.63 5.41 5.6
2143 | Chebyshev Approximation of Continuous Functionsby a Chebyshev System of Functions [E2] (Algorithm 414) | Bolub, G. H.Smith, L. B..Kapproximation, Chebyshev approximation, Remex algorithm.C5.13
2144 | On Accurate Floating-Point Summation | The accumulation of floating-point sums isconsidered on a computer which performs t-digit base B floating-point addition with exponents in the range-m to M.  An algorithm is given for accurately summing N t-digit floating-point numbers.  Each ofthese N numbers is split into q parts, forming qN t-digit floating-point numbers.  Each of these is thenadded to the appropriate one of n auxiliary t-digit accumulators.  Finally, the accumulators are added togetherto yield the computed sum.  In all, qN+n-1 t-digit floating-point additions are performed.  Underusual conditions, the relative error in the computed sum is at most [(t+1)/v]B^(1-t) for some v.  Further,with an additional q+n-1 t-digit additions, the computed sum can be corrected to full t-digit accuracy. For example, for the IBM/360 (B=16, t=14, M=63, m=64), typical values for q and n are q=2 and n=32. In this case, (*) becomes N <= 32,768, and we have [(t+1)/v]B^(1-t) = 4x16^-13. | Malcolm, M. A..Kfloating-point summation, error analysis.C5.11 5.19
2145 | Automation of Etching-Pattern Layout | HELP (Heuristic Etching-Pattern Layout Program)is an application program developed to computerize the tedious and error-prone although vitally importantwiring design of printed circuit boards.  HELP helps automate a design stage one step closer to productionthan logical design.  It can be used to design wiring patterns of two-layer circuit boards on whichICs in dual-in-line packages as well as discrete components such as transistors and resistors have beenplaced.  HELP employs two methods of wiring.  One is the heuristic method, which simulates humanapproaches to wiring design, and the other is the theoretically interesting but time-consuming method ofmaze-running, based on the Lee's algorithm.  HELP performs more than 90 percent of required wiring bythe heuristic path with respect to a performance function for each point-to-point, and point-to-lineconnection.  It can bring the number of successful wiring connections very close to 100 percent. | Aramaki, I.Kawabata, T.Kazuhiko, A..Kheuristic etching-pattern layout, wiring design ofprinted circuit board, maze-running, Lee's algorithm.C3.24 3.66 4.9 6.9
2146 | Optimizing the Polyphase Sort | Various dispersion algorithms for the polyphasesorting procedure are examined.The optimum algorithm based on minimizing the total number of unitstrings read is displayed.  The logic of this algorithm is rather complicated; hence, several othernew dispersion algorithms with more straightforward logic are presented.  Of the simple dispersion algorithmsdiscussed, the  Horizontal is best.  It does approximately one-fourth to one and one-half percentless reading and writing than most algorithms in use today.  An additional two and one-fourth to threepercent improvement can be achieved by utilizing the Modified Optimum Algorithm.  This algorithm is relativelystraightforward, but it requires a fairly close estimate of the total number of unit strings before the dispersion begins. | Shell, D. L..Ksorting, polyphase sorting, dispersion algorithms,optimum dispersion algorithm, repetition operator.C5.31
2147 | Using Computers in Higher Education:Past Recommendations, Status, and Needs | Data from a survey conducted with NationalScience foundation support, which was published in December 1970, is reviewed, and it is pointed outthat, with regard to computers in higher education, national goals stated in the Rosser and Pierce Reportshave not been attained.  Quality was lacking in hardware or courses in nearly half of the associateand bachelor's degree programs in data processing, computer science, etc., offered in 1966-67.  A pleais made for continuing studies on status and goals for computing in higher education, improvement of degreeprograms, and a national testing laboratory for educational technology. | Hamblen, J. W..Khigher education, computers, degree programs, nationalgoals, testing laboratory, educational technology.C1.50 1.52 1.53 2.45 3.51
2148 | The Composition of Semantics in Algol 68 | The main features of Algol 68 are explainedfrom a semantic point of view.  It is shown how the language permits the composition of values and actions,i.e. ultimately programs, from a minimum set of primitives with a few fundamental recursive rulesof composition.  The associated syntax is briefly reviewed.  An attempt has been made to obtain a structuredand simple introduction to both Algol 68 and its orthogonal design. | Branquart, P.Lewi, J.Sintzoff, M.Wodon, P. L..Kprogramming primitives, programming languages,Algol, semantics, recursive composition, design of programming languages, data structures.C1.3 4.2 4.22 5.23 5.24
2149 | ENTCAF and ENTCRE: Evaluation of NormalizedTaylor Coefficients of an Analytic Function [C5] (Algorithm 413) | Lyness, J. N..KTaylor coefficients, Taylor series, Cauchy integral,numerical integration, numerical differentiation, interpolation, complex variable, complex arithmetic, fast Fourier transform.C5.12 5.13 5.16
2150 | Concurrent Control with "Readers" and "Writers" | The problem of the mutual exclusion of severalindependent processes from simultaneous access to a "critical section" is discussed for the case wherethere are two distinct classes of processes known as "readers" and "writers."  The "readers" may sharethe section with each other, but the "writers" must have exclusive access.  Two solutions are presented:one of the case where we wish minimum delay for the readers; the other for the case where we wishwriting to take place as early as possible. | Courois, P. J.Heymans, F.Parnas, D. L..Kmutual exclusion, critical section, shared access to resources.C4.30 4.32
2151 | User Program Measurement in a Time-Shared Environment | A general discussion of the measurement ofsoftware systems is followed by a description of a hardware and software scheme for measuring user programsin a time-shared environment.  The TX-2 computer at MIT Lincoln Laboratory was used for the implementationof such a system and the characteristics of this implementation are reported.  A scenario showingthe system in use is presented.  Finally, it is shown how other time-sharing systems may provide similar measuring facilities. | Nemeth, A. G.Rovner, P. D..Koperating systems, multiprogramming systems, time-sharingsystems, software measurement, user program measurement, measurement technology, TX-2 computer,virtual computers, performance improvement.C4.30 4.32 4.42 4.43
2152 | Display Procedures | Although the use of structured display filesis widespread in interactive computer graphics, these structures present a number of problems whichtend to restrict their generality and usefulness.  This paper discusses some of these problems, and suggests analternative approach to display system design which avoids the use of structured display files. This technique employs display procedures to generate information for display.  By including transformationswithin calls to these procedures it is possible both to simplify the specification of picturesand to speed up their generation.  Display procedures permit picture elements to be defined conditionallyand also facilitate the processing of inputs from pointing devices.  The paper is illustrated by examplesfrom aversion of the EULER language in which display procedures were implemented. | Newman, W. M..Kcomputer graphics, programming languages, display files.C4.20 4.41
2153 | Experiments with an Automated Instructional System for Numerical Methods | A computer system was developed at PurdueUniversity to teach portions of an undergraduate course in numerical methods.  Each instructional unitor lesson is divided into three modes of instruction which allow the student to press from a computer-controlledpresentation to a student-controlled investigation. The system is designed as a classroom-independent courseof study, and has been used for two semesters by students in lieu of conventional classroom instruction. Initial measures of effectiveness, student acceptance, and operational cost are the result of testingthe system independent of instructor intervention.  The system is operational on a CDC 6500 with teletype terminals.  | Oldehoeft, A. E.Conte, S. D..Kcomputer-assisted instruction, numericalmethods, CAI, instructional systems.C1.52 3.62 5.10
2154 | Clarification of Fortran Standards-Second Report | In 1966, after four years of effort, Fortranbecame the first programming language standardized in the United States.  Since that initial achievementstudy and application of the standard specifications have revealed the need for maintenance of the standards. As the result of work initiated in 1967, an initial set of clarifying interpretations was prepared andthis clarification was published in Communications of the ACM in May 1969.  That work has continued andhas resulted in the preparation of this second set of clarifying interpretations.  The nature of the maintenanceand the new set of corrections to and interpretations of the standard specifications are reported. | ANSI Subcommittee X3J3.KAmerican National Standard, Fortran, Basic Fortran,programming language, standardization, language standard specification, language standard maintenance,language standard clarification, language standard interpretation, standardization committee.C1.2 2.0 2.19 2.2 2.3 4.0 4.12 4.19 4.20 4.22 4.29 4.43 5.23 5.9 6.9
2155 | Toward an Understanding of Data Structures | This paper presents a notation and formalismfor describing the semantics of data structures.  This is based on directed graphs with named edges andtransformations on these graphs.  In addition, an implementation facility is described which couldbe part of a programming language, which allows a programmer who has expressed the semantics of an algorithmin terms of the graphs to then specify the implementation of some of his data structures in order to gain efficiency. | Earley, J..Kdata structures, graph, implementation,semantic formalism, programming language.C4.22 4.9 5.24
2156 | Comment on Cheney's List-Compaction Algorithm | Fenichel, R. R..KLISP, garbage collector, virtual memory,list processing, storage allocation .C4.19 4.49
2157 | Average Binary Search Length for Dense Ordered Lists | Flores, I.Madpis, G..Ksearching, binary searching, record retrieval.C3.74
2158 | A Stopping Criterion for the Newton-Raphson Methodin Implicit Multistep Integration Algorithms for Nonlinear Systems of Ordinary Differential Equations | Liniger, W..Kordinary differential equations, linear multistepformulas, Newton-Raphson method, stopping criterion.C5.11 5.15 5.17
2159 | A Note on Best One-Sided Approximations | Phillips, D. L..Kbest approximation, one-sided approximation,logarithmic, error, relative error.C5.11 5.13
2160 | Canonical Structure in Attribute Based File Organization | A new file structure for attribute based retrievalis proposed in this paper.  It allows queries involving arbitrary Boolean functions of the attribute-valuepairs to be processed without taking intersections of lists.  The structure is highly dependent on theway in which the file is to be used and is uniquely determined by the specification of the allowed queries. Thus, for example, the structure for retrieval on the basis of ranges of values of a given attribute wouldbe very different from one where only retrieval on the basis of a single value is permitted.  The fileorganization being proposed is based on the atoms of a Boolean algebra generated by the queries.  The desirableproperties claimed for this structure are proved, and file maintenance questions are discussed. | Wong, E.Chiang, T. C..Kaddress calculation, atoms of Boolean algebra,attributes, Boolean functions, Boolean queries, file organization, information retrieval, invertedfile, key words, multilist, queries, searches .C3.70 3.73 3.74
2161 | An Algorithm for the Blocks and Cutnodes of a Graph (Corrigendum) | Paton, K.
2162 | An Efficient Bit Table Technique for DynamicStorage Allocation of 2^n-word Blocks | An efficient bit table technique for dynamic storageallocation of 2^n-word blocks, which requires a minimized amount of memory for bookkeeping purposes,is described. The technique has been tested in an implementation of the list processing language L^6. A number of ideas incorporated in the processor are also described. | Isoda, S.Goto, E..Kbit table, dynamic storage allocation, buddysystem, L^6, list processing, free storage.C3.89 4.12 4.9
2163 | Education Related to the Use of Computers in Organizations | The ACM Curriculum Committee on Computer Educationfor Management has been carrying out a study on "Curriculum Development in Management InformationSystems Education in Colleges and Universities" under a grant from the National Science Foundation. This position paper provides a framework for the study.  Preliminary conclusions are presented on theneed for education in administrative information systems, and appropriate college curricula and coursesare suggested.  Also, the role of professional societies and organizations using computers is discussed,and the plans of the Committee are outlined.  The initial approach of the Committee has been to describethe education necessary for the effective use of computers in organizations, to classify thepositions for which education is required, and to survey educational programs now available. | Teichroew, D..Keducation, information analysis, systems design, business data processing.C1.52 3.51
2164 | Symbolic Integration: The Stormy Decade | Three approaches to symbolic integration in the1960's are described.  The first, from artificial intelligence, led to Slagle's SAINT and to a largedegree to Moses' SIN.  The second, from algebraic manipulation, led to Manove's implementation and toHorowitz' and Tobey's reexamination of the Hermite algorithm for integrating rational functions.  The third,from mathematics, led to Richardson's proof of the unsolvability of the problem for a class of functionsand for Risch's decision procedure for the elementary functions.Generalizations of Risch's algorithmto a class of special functions and programs for solving differential equations and for findingthe definite integral are also described. | Moses, J..Kintegration, symbolic integration, definite integrals, rational functions.C3.1 3.2 3.6 4.9 5.2 5.9
2165 | General Relativity and the Application of Algebraic Manipulative Systems | The paper describes some applications of symbolicalgebra systems to problems of general relativity including the derivation of the field equations, thePetrov classification of a metric, and the solution of the field equations in the presence of matter ina simple case.  Attention is drawn to the strictly algebraic difficulties encountered in this work. | Barton, D.Fitch, J. P..Ksymbolic mathematics,nonnumerical mathematics, generalrelativity, algebraic manipulation, equation manipulation.C1.3 3.11 5.10
2166 | Automated Algebraic Manipulation in Celestial Mechanics | In this paper we consider some of the applicationsof automated algebraic manipulation which have been made in celestial mechanics.  Particular attentionis paid to the use of Poisson series, and a typical problem in perturbation theory is described. The requirements of processors for use in celestial mechanics are considered and compared with those for generalmanipulation packages.  Some future directions for research using these systems are briefly outlined. To illustrate the relative simplicity of the algorithm required in celestial mechanics, a typicalintegration problem is considered in an appendix.  | Jefferys, W. H..Kseries manipulation, automated algebra, celestial mechanics.C5.10 5.13 5.17
2167 | Algebraic Simplification: A Guide for the Perplexed | Algebraic simplification is examined first fromthe point of view of a user who needs to comprehend a large expression, and second from the point of viewof a designer who wants to construct a useful and efficient system.  First we describe various techniquesakin to substitution.  These techniques can be used to decrease thesize of an expression and make itmore intelligible to a user.  Then we delineate the spectrum of approaches to the design of automatic simplificationcapabilities in an algebraic manipulation system.  Systems are divided into five types.  Each typeprovides different facilities for the manipulation and simplification of expressions. Finally we discusssome of the theoretical results related to algebraic simplification.  We describe several positive resultsabout the existence of powerful simplification algorithms and the number-theoretic conjectures on whichthey rely.  Results about the nonexistence of algorithms for certain classes of expressions are included. | Moses, J..Kalgebraic manipulation, algebraic simplification,canonical simplification.C3.1 3.2 3.6 4.9 5.2 5.9
2168 | List Tracing in Systems Allowing Multiple Cell-Types | List-processing systems have each allowed theuse of only a single size and configuration of list cell.  In this paper a system is described whichallows the use of arbitrarily many different sizes and configurations of list cells, possibly not specified until run time. | Fenichel, R. R..Klist-processing, storage allocation, LISP, SLIP, based storage, pointers.C4.49
2169 | The Altran System for Rational Function Manipulation-A Survey | Altran is a complete system for symbolic computationwith rational functions in several variables with integer coefficients.  It has been designed andimplemented to handle large problems with ease and efficiency.  Considerable effort has been spent to ensurea minimum amount of machine dependence in the implementation, thus permitting the system to be installedquickly and easily on a variety of computing machines.  In this paper a brief description of the language,run time data structures, and implementation is given. | Hall Jr., A. D..Ksymbolic algebra, rational function manipulation,polynomial manipulation, interpreters, translators.C4.13 4.29
2170 | Applications of Symbol Manipulation in Theoretical Physics | This paper surveys the applications of symboliccomputation techniques to problems in theoretical physics.  Particular emphasis is placed on applicationsin quantum electrodynamics where the most activity has occurred. | Hearn, A. C..Ksymbol manipulation, algebraic simplification,computational physics, quantum electrodynamics.C3.17 4.22
2171 | Solution of Simultaneous Nonlinear Equations | Raduchel, W. J..Knonlinear equations.C5.15
2172 | Graph Plotter [J6] (Algorithm 412) | Cermak, J..Kplot, graph, line printer plot.C4.41
2173 | Three Procedures for the Stable Marriage Problem [H] (Algorithm 411) | McVitie, D. G.Wilson, L. B..Kassignment problems, assignment procedures, combinatorics,discrete mathematics, operations research, stable marriage problem, university entrance.C5.30
2174 | The Stable Marriage Problem | The original work of Gale and Shapley on an assignmentmethod using the stable marriage criterion has been extended to find all the stable marriage assignments. The algorithm derived for finding all the stable marriage assignments is proved to satisfyall the conditions of the problem.  Algorithm 411 applies to this paper. | McVitie, D. G.Wilson,L. B..Kassignment problems, assignment procedures, combinatorics,discrete mathematics, operational research, stable marriage problem, university entrance.C5.30
2175 | Subexpression Ordering in the Execution of Arithmetic Expressions | An arithmetic expression can often be brokendown into its component subexpressions.  Depending on the hardware environment in which the expression isto be executed, these subexpressions can be evaluated in serials, in parallel, or in a combination of thesemodes.  This paper shows that expression execution time can be minimized only if consideration is given tothe ordering of the subexpressions.  In particular, subexpressions should be executed in order of decreasingmemory and processor time requirements.  This observation is valid for configurations ranging froma uniprocessor with an unbuffered main memory to multiprocessor with a "cache" buffer memory.  If thenumber of subexpressions which can be executed in parallel exceeds the number of available processors,then execution of some of these subexpressions must be postponed.  A procedure is given which combines thisrequirement with the earlier ordering considerations to provide an optimal execution sequence. | Ramamoorthy, C. V.Gonzalez, M. J..Kparallel processing, cache, arithmetic expressions,subexpression ordering, computational trees, compilers.C4.12 4.32
2176 | Buffer Allocation in Merge-Sorting | A fixed buffer allocation for merge-sortingis presented here which minimizes the number of input-output operations for a given order of merge. When sorting on movable arm disks, the number of seeks is equal to the number of input-output operations,and the seek time usually controls the sort time.  First some standard terminology is introduced. Then the input buffer allocation method is described, followed by an analysis of the improvement to be expectedover more conventional allocation.  This analysis makes use of a particular distribution function.  Ananalysis of a completely different distribution is given which yields similar results.  This suggeststhat the results do not depend on a particular distribution function.  An optimum output buffer sizeis also determined.  It is concluded that this buffering allocation can significantly reduce the timeof merge sorting on movable arm disks when the input data are not random, and that this output bufferallocation should be used whether the data is random or not. | Ferguson, D. E..Kfile, item, string, merge sort, seek time, gamma distribution function.C4.41 5.31
2177 | An Algorithm for the Blocks and Cutnodes of a Graph | An efficient method is presented for findingblocks and cutnodes of an arbitrary undirected graph.  The graph may be represented either (i) as anordered list of edges or (ii) as a packed adjacency matrix.  If w denotes the word length of the machineemployed, the storage (in machine words) required for a graph with n nodes and m edges increases essentiallyas 2(m+n) in case (i), or (n^2)/win case (ii).  A spanning tree with labeled edges is grown,two edges finally bearing different labels if and only if they belong to different blocks.  For both representationsthe time required to analyze a graph on n nodes increases as n^G where G depends on the typeof graph, 1 <= G <= 2, and both bounds are attained.  Values of G are derived for each of several suitablefamilies of test graphs, generated by an extension of the web grammar approach.  The algorithm is comparedin detail with that proposed by Read for which 1 <= G <= 3. | Paton, K..Kalgorithm, block, block-cutpoint-tree, cutnode, fundamentalcycle set, graph, lobe, lobe decomposition graph, separable, spanning tree, web grammar.C5.32
2178 | A Language Extension for Graph Processing and Its Formal Semantics | A simple programming language "extension,"Graspe, for processing directed graphs is defined.  Graspe consists of a type of directed graph data structureand a set of primitive operations for manipulating these structures.  Graspe may be most easily implementedby embedding it in a host language.  Emphasis is placed both on Graspe itself and on its method ofdefinition.  Commonly, the definition of a language involves definition of the syntactic elements and explanationof the meaning to be assigned them (the semantics).  The definition of Graspe here is solely interms of its semantics; that is, the data structures and operations are defined precisely but without assignmentof a particular syntactic representation.  Only when the language is implemented is assignmentof an explicit syntax necessary.  An example of an implementation of Graspe embedded in Lisp is given asan illustration.  The advantages and disadvantages of the definition of a language in terms of its semantics are discussed. | Pratt, T. W.Friedman, D. P..Kgraph processing, programming language, formal semantics,directed graph, Lisp, network, data structure, flowchart, syntax, language definition.C4.20 4.22 5.23 5.24 5.32
2179 | Simple LR(k) Grammars | A class of context-free grammars, called the"Simple LR(k)" or SLR(k) grammars is defined.  This class has been shown to include weak precedenceand simple precedence grammars as proper subsets.  How to construct parsers for the SLR(k) grammars isalso shown.  These parser-construction techniques are extendible to cover all of the LR(k) grammars ofKnuth; they have been implemented and by direct comparison proved to be superior to precedence techniques,not only in the range of grammars covered, but also in the speed of parser construction andin the size and speed of the resulting parsers. | DeRemer, F. L..Kcontext-free grammar, LR(k) grammar, precedencegrammar, syntactic analysis, parsing algorithm, parser, finite-state machine, deterministic pushdown automaton.C4.12 5.22 5.23
2180 | A Programmer Training Project | A project is described whose purpose is to trainselected black residents of the Albany-Schenectady area in computer programming and arrange for jobs forthem in the computer field. Both the organization and curriculum of the course are discussed. | Bernstein, A. J..Kprogrammer training, job opportunities, Fortran.C1.59
2181 | The State of Computer Oriented Curricula in Business Schools 1970 | The ACM Committee on Computer Education for Management,supported by a National Science Foundation Grant, is established to appraise the state of the artand to develop a series of recommendations for improving computer education for management.  To providethe Committee with material for its study of curricular needs, five regional meetings in the UnitedStates were held in 1970, at each of which a broad cross section of invited academicians and practitionersconsidered the state of curricula in business schools.  Three topics were covered: curricula forthe general manager; computer-related material in required and functional courses; and curricula for studentsconcentrating on computer-based information systems.  An analysis of the minutes of the meetingsrevealed a common set of experiences which raised similar pedagogic and economic issues.  This presentationgives a summary of the discussions; a condensationof the pedagogic and substantive concerns raised; andconsideration of the resource allocation issues involved.  Preliminary to the Committee's recommendationsfor improving computer education for management, this report has been prepared to provide the participantsand the administrators of their institutions with background information for the ongoing task of coursedevelopment.  Chairman of the ten-man Committee is Daniel Teichroew (The University of Michigan). | McKenney, J. L.Tonge, F. M..Kuniversity programs, management education, curriculumdesign, business administration curricula, graduate business school resource planning.C1.52 3.5
2182 | Interrupt Driven Programming | Zelkowitz, M..Kinterrupts, supervisors, monitors, debugging, parallelprocessing, associative memories, microprogramming.C3.51 4.32 4.42
2183 | Binary Summation | Walker, R. J..Ksummation, binary summation, floating-point addition, round-off errors.C5.11
2184 | On the Meaning of Names in Programming Systems | It is assumed that there is a similarity offunction between the data names of a programming language and the file names of an operating system. The two functions are discussed in terms of the same basic concepts in order to identify the extentto which they overlap. It is suggested that there is some similarity between the idea of a file directoryand a storable object of type context.  Manipulations with contexts are then discussed at length.  It is notedthat there is a simple extension of Church's Lambda notation that deals nicely with these ideas ofcontext manipulation.  Whereas a function can be regarded as the abstraction based upon the first two terms ofthe expression Lambda(name list)(expression)(value list), it is found that a context can be viewed as an abstractionbased upon the first two terms in the equivalent expression Mu(name list)(value list)(expression). | Fraser, A. G..Kfile, operating system, programming language, functions,names, context, file directory, file dictionary, lambda calculus, theory of programming.C3.73 4.22 4.39 5.23 5.24
2185 | A Note on Compiling Fixed Point Binary Multiplications | An algorithm is developed for compiling, asa sequence of shifts, additions,and subtractions, many fixed point binary multiplications involving aconstant.  The most significant characteristics of the algorithm are the simplicity of the test whichdetermines if the algorithm should be applied and the degree to which it "suggests" efficient object code. | Glaswin, H. T..Kcompiling multiplications, fixed point arithmetic.C4.12
2186 | Numerical Properties of the Ritz-Trefftz Algorithm for Optimal Control | In this paper the Ritz-Trefftz algorithm is appliedto the computer solution of the state regulator problem.  The algorithm represents a modification ofthe Ritz direct method and is designed to improve the speed of solution and the storage requirements tothe point where real-time implementation becomes feasible.  The modification is shown to be more stablecomputationally than the traditional Ritz approach.  The first concern of the paper is to describe thealgorithm and establish its properties as a valid and useful numerical technique.  In particular such usefulproperties as definiteness and reasonableness of condition are established for the method.  The secondpart of the paper is devoted to a comparison of the new techniques with the standard procedure ofnumerically integrating a matrix Riccati equation to determine a feedback matrix.  The new technique isshown to be significantly faster for comparable accuracy. | Bosarge Jr., W. E.Johnson, O. G..Ksplines, regulator problem, control theory, numerical analysis.C5.1
2187 | Computer Science: A Conceptual Framework for Curriculum Planning | Two views of computer science are considered:a global view which attempts to capture broad characteristics of the field and its relationships toother fields, and a local view which focuses on the inner structure of the field.  This structure is presentedin terms of the kinds of knowledge, problems, and activities that exist within the discipline, aswell as the relations between them.  An approach to curriculum planning in computer science is presentedwhich is guided by the structure of the field, by the fact that change is an important feature of thesituation, and by the expectation that computerscience will continue to increase its working contacts with other disciplines. | Amarel, S..Kcomputer science, curriculum planning, education.C1.0 1.52
2188 | An Approach to the Optimum Design of Computer Graphics Systems | Display system designers are faced with thedifficult task of selecting major subsystems in an intelligent way.  Each subsystem is chosen from largenumbers of alternatives; the selection is based on considerations such as system response time, systemcost, and the distribution of data storage and processing between the graphics processor and its supportingdata processing system.  The work reported here develops an objective, quantitative design procedureand helps give a better understanding of now to  configure display systems.  This is accomplished bymeans of a mathematical model of a computer driven graphics system.  The parameters of the model are functionsof the capabilities of the graphics hardware and of the computational requirements of the graphics application. The model can be analyzed using numerical queueing analysis or simulation to obtain an averageresponse time prediction.  By combining the model with an optimization, the best graphics system configuration,subject to a cost constraint, is found for several applications.  The optimum configurationsare in turn used to find general display system design guidelines. | Foley, J. D..Kdesign guidelines, graphic display systems, mathematicalmodel, optimum system design, queueing model.C3.8 6.22 6.35
2189 | Generation of Rosary Permutations Expressed in Hamiltonian Circuits | Systematic generation of a specific classof permutations fundamental to scheduling problems is described.  In a nonoriented complete graph withn vertices, Hamitonian circuits equivalent to .5(n - 1)! specific permutations of n elements, termed rosarypermutations, can be defined.  Each of them corresponds to two circular permutations which mirror-imageeach other, and is generated successively by a number system covering 3*4*...*(n-1) sets of edges. Every set of edges {E[k]}, 1 <= E[k] <= k, 3 <= k <= (n-1) is determined recursively by constructinga Hamiltonian circuit with k vertices from a Hamiltonian circuit with k-1 vertices, starting withthe Hamiltonian circuit of 3 vertices.  The basic operation consists of transposition of a pair of adjacentvertices where the position of the pair in the permutation is determined by {E[k]}.  Two algorithmstreating the same example for five vertices are presented.  It is very easy to derive all possible n!permutations  from the .5(n - 1 )! rosary permutations be cycling the permutations and by taking them in thereverse order-procedures which can be performed fairly efficiently by computer.  | Harada, K..Kpermutation, graph theory, scheduling, combinatorial algebra.C5.32 5.39
2190 | Function Minimization | House, F. R.
2191 | ALGORITHM 410 Partial Sorting [M1] | Chambers, J. M..Ksorting, partial sorting order statistics.C5.11 5.13
2192 | Another Recursion Induction Principle | An inductive method for proving things aboutrecursively defined functions is described.  It is shown to be useful for proving partial functions equivalentand thus applicable in proofs about interpreters for programming languages. | Morris Jr., J. H..Krecursion, induction, correctness, proofs, compiler correctness.C4.13 4.2 5.24
2193 | On Implementation of Label Variables | Variables of label mode are conventionallyimplemented with a technique which fails to trap certain programming errors.  Fine-grained calendar clockshave recently become available; these allow implementation of label variables via a new techniquewhich traps all programming errors of this variety. | Fenichel, R. R..Klabels, compiler, interpreter, go to, transfer.C4.22
2194 | How To Keep the Addresses Short | An algorithm is presented for minimizing thesum of the lengths of the blocks of coding produced by an assembler or compiler when (1) the length ofeach computer instruction is assumed to be either "long" or "short" ("long," if the memory location addressedis more than a predetermined distance from the current location; "short," otherwise), and (2)there are blocks of instructions whose beginnings (origins) are separated by prespecified amounts. For example,some computers permit either 8-bit addressing (interpreted relative to the location counter) or full16-bit addressing of all of memory.  When assembling or compiling two or more blocks of instructions whichhave many mutual references in such a computer, there is no simple iterative procedure for keepingas many of the addresses short as possible.  This paper demonstrates that a wide class of problems ofthis type can be formulated as covering problems solvable by means of elementary arithmetic operationson the column vectors of a ternary matrix. | Richards, D. L..Kaddressing, assembler, covering problem, integerprogramming, variable-length addressing.C4.11 4.12 4.21 5.41
2195 | On the Optimal Detection of Curves in Noisy Pictures | A technique for recognizing systems of linesis presented.  In this technique the heuristic of the problem is not embedded in the recognition algorithmbut is expressed in a figure of merit.   A multistage decision process is then able to recognizein the input picture the optimal system of lines according to the given figure of merit.  Due to theglobal approach, greater flexibility and adequacy in the particular problem is achieved.  The relationbetween the structure of the figure of merit and the complexity of the optimization process is then discussed. The method described is suitable for parallel processing because the operations relative to eachstate can be computed in parallel, and the numberof stages is equal to the length N of the curves (orto log2 N if the approximate method is used). | Montanari, U..Kpicture processing, picture recognition, picturedescription, curve detection, line detection, edge detection,optimal detection, heuristic methods,global recognition, parallel processing, dynamic programming, interaction graph, secondary optimization problem.C3.63 3.66 5.42
2196 | A Man-Machine Approach Toward Solving the Traveling Salesman Problem | The traveling salesman problem belongs to animportant class of scheduling and routing problems.  It is also a subproblem in solving others, such asthe warehouse distribution problem.  It has been attacked by many mathematical methods with but meagersuccess.  Only for special forms of the problem or for problems with a moderate number of points canit be solved exactly, even if very large amounts of computer time are used.  Heuristic procedures havebeen proposed and tested with only slightly better results.  This paper describes a computer aided heuristictechnique which uses only a modest amount of computer time in real-time to solve large (100-200)point problems.  This technique takes advantage of both the computer's and the human's problem-solvingabilities.  The computer is not asked to solve the problem in a brute force way as in many of today's heuristics,but it is asked to organize the data for the human so that the human can solve the problem easily. The technique used in this paper seems to point to new directions in the field of man-machine interactionand in the field of artificial intelligence. | Krolak, P.Felts, W.Marble, G..Kheuristic procedures, computer-aided heuristic technique,man-machine interaction, artificial intelligence, assignment problem, mask of the assignment, rubber bandtour generator, interaction process, traveling salesman problem.C3.57 3.66 5.30
2197 | The Merit of Regional Computing Networks | One of the suggested means for stimulating thespread of computing capabilities in institutions of higher learning is through the construction of regionalcomputing networks.  One such network has been constructed in the San Francisco Bay Area by StanfordUniversity.  This paper reports upon the lessons learned from the operation of the network over the pasttwo years.  A major impact of the network was not so much the computer power delivered to the schoolsas the awakening of computing awareness and the fostering of capability development at these schools. Theexpertise and assistance from the central facilityas well as the sharing of ideas among the participantswere other important benefits.  Both the quality and variety of services provided by the central facilitywere found to play a key role in the effectiveness of the network.  A regional network brings many benefitsand should not be judged as a purveyor of raw computer power alone. | Nielsen, N. R..Kcomputer sharing, computer utility, cooperative networks,curriculum development, educational computing, network computing, regional computing networks,remote computing, shared computing.C1.52 2.11
2198 | Introduction to "Feature Analysis ofGeneralized Data Base Management Systems" | This paper is a separately published introductionto a main report which analyzes the features of generalized data base management systems.  This introductiongives a review of the current state of the art in these systems and discusses the differencesand similarities between capabilities found in host language systems and those found in self-containedsystems.  After some discussion of the problems of data independence and binding,the four user levelsare identified and described.  Technical problems facing future designers are described.  The first ofthese is that of handling existing stored data and the next is that of providing more complex data structuresthan those already available in conventional programming languages.  The problem of high level interrogationand update functions acting on network structures is mentioned, followed by a discussion of theproblem of catering to a high volume of transactions initiated from terminals by parametric users-the lowestlevel of user.  The use of Cobol as a basis for further development work is considered at some lengthwith respect to data structures, host language capabilities, and self-contained capabilities.  Thissection also assesses the effect of the Data Base Task Group proposals.  The final section outlines theten major topics in the main body of the full report. | Codasyl Systems Committee.Kdata base management systems, programming languages,data structures, storage structures, information retrieval, transaction processing.C3.5 3.70 3.72 3.73 3.74 4.29
2199 | A Sparse Matrix Package (Part I) [F4] (Algorithm 408) | McNamee, J. M..Kmatrix, sparse matrix, matrix manipulation.C5.14
2200 | On Complement Division | The division algorithm theorem is expressedin a form that permits it to serve as the basis for devising division operations that produce both quotientand remainder in complement form.  Algorithms for division yielding complement results are derivedfor numbers represented in any base greater than one.  Both radix and radix-less-one complementation schemesare considered.  The binary form of the algorithms thus includes both two's and one's complement implementation. The problem of quotient overflow for complement results is dealt with as is that of selecting an appropriateform of the remainder condition for complement division.  | Stein, M. L.Munro, W. D..Kdivision algorithm, complement arithmetic, complementdivision, one's complement arithmetic, two's complement arithmetic.C3.15 4.0 4.9 5.11 6.32
2201 | Animator: An On-Line Two-dimensional Film Animation System | Animator is a computer animation system whichwas designed to overcome some of the inherent disadvantages associated with conventional computer animationtechniques.The DEC-338 serves as an input terminal for movie making, allowing the trial and errordesign of picture sequences in a conversational mode.  During all stages on the system input elements(light pen, pushbuttons, and teletype) is maintained.  At the user's request, this record is sent to the IBM360/75 where the S-D 4020 instructions necessary to produce the same sequence of pictures can be generated. It is anticipated that one of the primary contributions of Animator will be the provision of afacility which will allow any professor to produce his own expository film strips. | Talbot, P. A.Carr III, J. W.Coulter Jr., R. R.Hwang, R. C..Kcomputer graphics, computer animation, on-linesystems, two-dimensional languages, CRT, microfilm recorder.C3.41 3.80 4.22
2202 | Dynamic Microprogramming: Processor Organization and Programming | A dynamically microprogrammed processor is characterizedby a small (4^k 64-bit word) read-write "micro" storage.  The access time of this storage issimilar to the cycle time of the machine (50-100 nsec).  This microstorage is used to contain both dataand subroutines.  The (micro) instructions in such a processor differ from the conventional in thatthey perform only purely combinatorial operations; sequencing is under the control of the microinstruction.The presence of the read-write microstorage permits a more flexible assignment of resources than theread-only storage.  In particular, the processor developed in this paper stresses the simultaneous operation(within the microinstruction) of the adder, shifter, masker, and testing facilities of the processor. A microassembly language is developed and the overhead involved in subroutine linkages is analyzed. The efficiency of a flexible software linkage scheme is examined as to its overhead for various subroutinecharacteristics.  Finally, three examples of problem-oriented programming are considered and theresulting coding is compared against a System/360 assembly language version, with the technology normalized. | Tucker, A. B.Flynn, M. J..Kmicroprogramming,read-write microstorage,subroutine linkage, execution speed .C6.2
2203 | Key-to-Address Transform Techniques: A FundamentalPerformance Study on Large Existing Formatted Files | The results of a study of eight differentkey-to-address transformation methods applied to a set of existing files are presented.  As each methodis applied to a particular file, load factor and bucket size are varied over a wide range.  In addition,appropriate variables pertinent only to a specific method take on different values.  The performance ofeach method is summarized in terms of the number of accesses required to get to a record and the numberof overflow records created by a transformation.  Peculiarities of each method are discussed.  Practicalguidelines obtained from the results are stated.  Finally, a proposal for further quantitative fundamental study is outlined. | Lum, V. Y.Yuen, P. S. T.Dodd, M..Khashing, hashing techniques, hashing methods, hashcoding, keys, key transformation, key-to-address transformation, direct addressing, direct access method,randomizing, random access,file addressing, file organizations, file structures, scatter storage,search, collisions, clusters, information retrieval.C3.7 3.72 3.73 3.74 3.79 4.9
2204 | Program Development by Stepwise Refinement | The creative activity of programming-to be distinguishedfrom coding-is usually taught by examples serving to exhibit certain techniques.  It is here consideredas a sequence of design decisions concerning the decomposition of tasks into subtasks and of datainto data structures.  The process of successive refinement of specifications is illustrated by a shortbut nontrivial example, from which a number of conclusions are drawn regarding the art and the instruction of programming. | Wirth, N..Keducation in programming, programmingtechniques, stepwise program construction.C1.50 4.0
2205 | DIFSUB for Solution of Ordinary DifferentialEquations [D2] (Algorithm 407) | Gear, C. W..Kdifferential equations, stiff differential equations.C5.17
2206 | Exact Solution of Linear Equations UsingResidue Arithmetic [F4] (Algorithm 406) | Howell, J..Kresidue arithmetic, symmetric residue, modulus,mixed-radix representation, symmetric mixed-radix representation, mixed-radix conversion, prime number,linear equations, Gaussian elimination, matrix inversion, determinant, adjoint matrix, ill-condition.C3.15 5.14
2207 | The Automatic Integration of Ordinary Differential Equations | An integration technique for the automaticsolution of an initial value problem for a set of ordinary differential equations is described.  A criterionfor the selection of the order of approximation is proposed.  The objective of the criterion is to increasethe step size so as to reduce solution time. An option permits the solution of "stiff" differentialequations.  A program embodying the techniques discussed appears in Algorithm 407. | Gear, C. W..Kdifferential equations, stiff equations,integration, step control, order control.C5.17
2208 | Storage Utilization in a Memory Hierarchy When StorageAssignment Is Performed by a Hashing Algorithm | The utilization of storage is studied in a two-levelmemory hierarchy.  The first storage level, which is the fast store, is divided into a number ofstorage areas.  When an entry is to be filed in the hierarchy, a hashing algorithm will attempt toplace the entry into one of these areas.  If this particular area is full, then the entry will be placedinto the slower second-level store, even though other areas in the first-level store may have spaceavailable.  Given the N entries have been filed in the entire hierarchy, an expression is derived for theexpected number of entries filed in the first-level store.This expression gives a measure of how effectivelythe first-level store is being used.  By means of examples, storage utilization is then studied as afunction of the hashing algorithm, the number of storage areas into which the first-level store is dividedand the total size of the first-level store.  | Williams, J. G..Khashing algorithms, memory allocation, memory hierarchy,memory utilization, storage allocation, storage hierarchy, storage utilization.C3.74 4.3
2209 | A Scheduling Algorithm for a Computer Assisted Registration System | This paper presents the scheduling algorithmused in the Computer Assisted Registration System at the University of Tennessee.  Notation is defined andthe logic of the algorithm necessary to implement educational policy is described.  Results fromthe first term's implementation are presented. | Winters, W. K..Kcomputer assisted registration, scheduling algorithm, timetable.C3.32 5.39
2210 | Toward Automatic Program Synthesis | An elementary outline of the theorem-provingapproach to automatic program synthesis is given, without dwelling on technical details.  The method isillustrated by the automatic construction of both recursive and iterative programs operating on naturalnumbers,lists, and trees,  In order to construct a program satisfying certain specifications a theoreminduced by those specifications is proved, and the desired program is extracted from the proof.  Thesame technique is applied to transform recursively defined functions into iterative programs, frequentlywith a major gain inefficiency.  It is emphasized that in order to construct a program with loops or withrecursion, the principle of mathematical induction must be applied. The relation between the version ofthe induction rule used and the form of the program constructed is explored in some detail. | Manna, Z.Waldinger, R. J..Kartificial intelligence, answer extraction, automaticprogram synthesis, mathematical induction principle, problem solving, theorem proving.C3.64 5.23 5.24
2211 | Scanned-Display Computer Graphics | A television-like scanned-display system hasbeen successfully implemented on a Honeywell DDP-224 computer installation.  The scanned image is storedin the core memory of the computer, and software scan conversion is used to convert the rectangular coordinatesof a point to the appropriate word and bit in an output display array in core storage.  Resultsthus far indicate that flicker-free displays of large amounts of data are possible with reasonablyfast graphical interaction.  A scanned image of size 240 X 254 points is displayed at a 30 frame-per-second rate. | Noll, A. M..Kcomputer graphics, scanned-display, scan conversion, raster displays.C4.41 6.35
2212 | F-DISTRIBUTION | Tolman, H..KFisher's F-distribution, Student's t-distribution.C5.5
2213 | Roots of Matrix Pencils: The GeneralizedEigenvalue Problem [F2] (Algorithm 405) | Dell, A. M.Weil, R. L.Thompson, G. L..Keigenvalues, matrix roots, pencil roots.C5.1 5.3
2214 | Complex Interval Arithmetic | Complex interval arithmetic is defined usingreal interval arithmetic.  Complex interval division is defined so as to assure smallest possible resulting intervals. | Rokne, J.Lancaster, P..Kreal intervals, real interval arithmetic,complex intervals, complex interval arithmetic.C5.11
2215 | Application of Game Tree Searching Techniquesto Sequential Pattern Recognition | A sequential pattern recognition (SPR) proceduredoes not test all the features of a pattern at once.  Instead, it selects a feature to be tested.  Afterreceiving the result of that test, the procedure either classifies the unknown pattern or selects anotherfeature to be tested, etc.  Medical diagnosis is an example of SPR.  In this paper the authors suggestthat SPR be viewed as a one-person game played against nature (chance).  Virtually all the powerful techniquesdeveloped for searching two-person, strictly competitive game trees can easily be incorporated eitherdirectly or by analogy into SPR procedures.  In particular, one can incorporate the "mini averagebacking-up procedure" and the "gamma procedure," which are the analogues of the "minimax backing-up procedure"and the "alpha-beta procedure," respectively.  Some computer simulated experiments in character recognitionare presented.  The results indicate that the approach is promising. | Slagle, J. R.Lee, R. C. T..Ksequential pattern recognition, game tree searching,game against nature, gamma procedure, mini average backing-up procedure, dynamic programming, branch-and-boundapproach, optimal solution.C3.60 3.63 5.42
2216 | On the Probability Distribution of the Values of Binary Trees | An integral equation is derived for the generatingfunction for binary tree values, the values reflecting sorting effort. The analysis does not assumeuniformly distributed branching ratios, and therefore is applicable to a family of sorting algorithmsdiscussed by Hoare, Singleton, and van Emden.  The solution to the integral equation indicates thatusing more advanced algorithms in the family makes only minor reductions in the expected sorting effort,but substantially reduces the variance in sorting effort.  Statistical tests of the values of severalthousand trees containing up to 10,000 points have given first, second, and third moments of the value distributionfunction in satisfactory agreement with the moments computed from the generating function.  Theempirical tests, as well as the analytical results, are in agreement with previously published results for thefirst moment in the cases of uniform and nonuniform distribution of branching ratio, and for the second momentin the case of uniform distribution of branching ratio. | Hurwitz Jr., H..Kbinary trees, sorting, statistical analysis.C4.40 5.18 5.5
2217 | Experiments in Automatic Learning for a Multipurpose Heuristic Program | An automatic learning capability has been developedand implemented for use with the MULTIPLE (MULTIpurpose Program that LEarns) heuristic tree-searchingprogram, which is presently being applied to resolution theorem-proving in predicate calculus.MULTIPLE's proving program (PP) uses two evaluation functions to guide its search for a proof of whetheror not a particular goal is achievable.  Thirteen general features of predicate calculus clauses were createdfor use in the automatic learning of better evaluation functions for PP.  A multiple regressionprogram was used to produce optimal coefficients for linear polynomial functions in terms of the features. Also, automatic data-handling routines were written for passing data between the learning programand the proving program, and for analyzing and summarizing results.  Data was generally collected forlearning (regression analysis) from the experience of PP.  A number of experiments were performed to testthe effectiveness and generality of the learning program. Results showed that the learning produced dramaticimprovements in the solutions to problems which were in the same domain as those used for collectionlearning data.  Learning was also shown to generalize successfully to domains other than those usedfor data collection.  Another experiment demonstrated that the learning program could simultaneously improveperformance on problems in a specific domain and on problems in a variety of domains.  Some variationsof the learning program were also tested. | Slagle, J. R.Farrell, C. D..Klearning, theorem-providing, heuristic, automaticlearning, self-modifying,tree-searching, artificial intelligence, problem-solving, adaptive, LISP, multiple regression, resolution.C3.62 3.64
2218 | An Analysis of Some Time-Sharing Techniques | The effectiveness of certain time-sharing techniquessuch as program, relocation, disk rotational delay minimization, and swap volume minimization isinvestigated.  Summary data is presented, and the findings are discussed.  The vehicle for this investigationwas a SIMULA based simulation model reflecting an early framework for a planned Burroughs B6500 time-sharingsystem.  Inasmuch as the B6500 system is based upon the use of variable sized segments and adynamic overlay procedure, data is also presented which provides some indication of the effectiveness of thistype of organization in a time-sharing environment.  The design characteristics and operational capabilitiesof the simulation model are also described. | Nielsen, N. R..KB6500, bulk core usage, operating system model, relocation,rotational delay minimization, simulation, swap volume minimization, system simulation, time-sharing.C3.9 4.32
2219 | A Policy-Driven Scheduler for a Time-Sharing System | The service received by a process from a time-sharingoperating system can be characterized by a resource count SUM{w[i]R[ij]} where R[ij] is thenumber of units of service received by process i from resource i and w[i] is the cost per unit of theservice.  Each class of users can be characterized by a policy function which specifies the amount of servicea user who belongs to this class should receive as a function of time.  Priority changes dynamicallyas a function of the difference between the service promised to the user by the policy function and the servicehe actually receives.  A scheduling and swapping algorithm which keeps the resource count of each processabove its policy function will provide the specified level of service.  Overhead can be reduced by avoidingswaps of process which have received at least his level of service.  The algorithm has been implementedin a general purpose operating system, and it has provided significantly better service to interactiveand to batch jobs than the previous scheduler. | Bernstein, A. J.Sharp, J. C..Kscheduler, time-sharing, operating system,resource allocation and swapping.C4.32
2220 | Conversion of Limited-Entry Decision Tables to ComputerPrograms-A Proposed Modification to Pollack's Algorithm | Pollack has proposed an algorithm for convertingdecision tables into flowcharts which minimize subsequent execution time when compiled into a computerprogram.  Two modifications of this algorithm are proposed.  The first relies on Shannon's noiselesscoding theorem and the communications concept of entropy but does not completely test the ELSE Rule. The second modification completely tests the ELSE Rule but results in more executions than the first modification. Both modifications result in modification guarantees a globally optimal solution. | Shwayder, K..Kcoding, decision table, entropy, informationtheory, noiseless channel, sorting.C3.50 5.31
2221 | Comment on the Conversion of Decision Tables to Computer Programs | Pollack, S. L..Kdecision tables, diagnostic aids, system analysis, business applications.C3.50 3.59 4.19 4.29 4.49
2222 | Comment on London's Certification of Algorithm 245 | Redish, K. A..Kproof of algorithms, debugging, certification,metatheory,  sorting, in-place sorting.C4.42 4.49 5.24 5.31
2223 | Minit Algorithm For Linear Programming (Algorithm 222 [H]) | Kolm, A.Dahlstrand, T..Klinear programming, dual simplex method, primal problem, dual problem.C5.41
2224 | Complex Gamma Function [S14] (Algorithm 404) | Lucas Jr., C. W.Terrill, C. W..Kgamma function, poles of gamma function, Stirling'sasymptotic series, recursion formula, reflection formula.C5.12
2225 | Circular Integer Partitioning [A1] (Algorithm 403) | Coleman, M. W.Taylor, M. S..Kpartitions, combinatorics, statistical design of experiments.C5.39 5.5
2226 | Further Evidence for the Analysis of Algorithmsfor the Zero-One Programming Problem | The purpose of this note is to report computationalexperience additional to that recently summarized by Gue et al, with two algorithms for thezero-one linear programming problem.  An error in Gue's paper is corrected.  The utility of one ofthe algorithms as a suboptimizer is indicated. | Proll, L. G..Koperations research, integer programming, zero-one variables, algorithms.C5.39 5.41
2227 | Proof of a Program: FIND | A proof is given of the correctness of thealgorithm "Find."  First, a informal description is given of the purpose of the program and the methodused.  A systematic technique is described for constructing the program proof during the process of codingit, in such a way as to prevent the intrusion of logical errors.  The proof of termination is treatedas a separate exercise.  Finally, some conclusions relating to general programming methodology are drawn. | Hoare, C. A. R..Kproofs of programs, programming methodology, programdocumentation, program correctness, theory of programming.C4.0 4.22 5.21 5.23 5.24
2228 | Comments on Prevention of System Deadlocks | Habermann's method of deadlock prevention isdiscussed, where deadlock is defined as a system state from which resource allocations to certain processesare not possible.  It is shown that the scheduler may introduce "artificial" deadlocks which Habermann'smethod does not prevent.  Permanent blocking is the situation where certain processes never receive theirresource requests.  It is shown that deadlock prevention does not necessarily eliminate permanent blocking. A method of preventing permanent blocking is given. | Holt, R. C..Kmultiprogramming, time-sharing, scheduling, resourceallocation, deadlock, lockout, deadly embrace, knotting .C3.72 4.32 6.20
2229 | Construction of Rational and Negative Powers of a Formal Series | Some methods are described for the generationof fractional and negative powers of any formal series, such as Poisson series or Chebyshev series.  Itis shown that, with the use of the three elementary operations of addition, subtraction, and multiplication,all rational (positive and negative) powers of a series can be constructed.  There are basically twoapproaches: the binomial theorem and the iteration methods.  Both methods are described here, and the relationshipbetween them is pointed out.  Some well-known classical formulas are obtained as particular cases,and it is shown how the convergence properties of these formulas can be improved with very little additionalcomputations.  Finally, at the end of the article, some numerical experiments are describedwith Chebyshev series and with Fourier series. | Brucke, R. A..Kseries expansion, series inversion, root extraction,binomial theorem, Newton iterations, Chebyshev series, Poisson series, Fourier series.C3.11 3.15 3.21 5.0
2230 | A Language for Treating Geometric Patterns in a Two-dimensional space | In this paper CADEP, a problem-oriented languagefor positioning geometric patterns in a two-dimensional space, is presented.  Although the language has beenspecifically designed for the automatic generation of integrated circuit masks, it turns out to be wellsuited also for such other placement problems as architecture design, urban planning, logical and blockdiagram representation.  The design criteria, the structure, and the specific features of CADEP are illustrated. | Bracchi, G.Ferrari, D..Kgraphic language, problem-oriented language, two-dimensionalpatterns, graphic display, Fortran extension, layout problems, integrated circuit,architecture design, urban planning.C3.23 3.24 3.25 4.22
2231 | The Reconstruction of Binary Patterns from Their Projections | Given the horizontal and vertical projectionsof a finite binary pattern f, can we construct the original pattern f?  In this paper we give a characterizationof patterns that are reconstructable from their projection.  Three algorithms are developedto reconstruct both unambiguous and ambiguous patterns.  It is shown that an unambiguous pattern canbe perfectly reconstructed in time m X n and that a pattern similar to an ambiguous pattern can also be constructedin time m X n, where m, n are the dimensions of the pattern frame. | Chang, S..Kpattern reconstruction, image reconstruction, datacompression, pattern recognition, integral geometry.C3.63 5.30
2232 | Pattern Width at a Given Angle | That the pattern feature "width as a functionof angle" possesses several possible interpretations is demonstrated in this paper, which is a review ofthe width concept in pattern recognition and the geometrical concept itself.  The object of the workis to clarify how the word description can be made precise so that computer algorithms for feature extractionmay be obtained; the focus is on the theoretical subject matter.  The results consist of a set-theoreticdefinition of width-at-angle, a theorem relating it to the pattern boundary radius vector, and descriptionsof alternate widths.  All widths are calculated for an illustrative example; graphical and tabular comparisonsare given.  Substantial variation in width-at-angle magnitude is found.  The principal conclusion is thatthe set-theoretic width-at-angle is a useful pattern feature when it can be easily computed.  Further investigationof the information contained in only part of a width function is recommended for cases wherecomputation of width-at-angle is difficult. | Klinger, A..Kfeature extraction, pattern recognition,figureproperties, picture processing, integral geometry, width-at-angle, extent, integral projections,linear pattern measures, width functions.C3.60 3.62 3.63 5.12
2233 | Signature Simulation and Certain Cryptographic Codes | Three cyphers allegedly authored by ThomasJefferson Beale in 1822 have been the subject of intensive study for over 100 years.  Generations ofcryptanalysts have expended untold man-years, thus far without success, attempting tode code them; vast armiesof fortune hunters and treasure seekers have devoted Herculean labors to digging up the rolling hillsof Virginia trying to locate the promised bonanza.  The history of pertinent activities would fill volumes,yet serious students of cryptography have always had nagging doubts about the cyphers' authenticity. It has been alleged that the "known solution" to Cypher Number Two: 115, 73, 24, 818, 37, 52, 49,...("Ihave deposited in the County of Bedford about four miles from Buford's in an excavation or vault...")with the aid of an unsanitized version of the Declaration of Independence was merely a superb, imaginative,and grandiose hoax perpetrated ages ago for whatever reasons.  Modern computer technology couldobviously perform signature analyses the process of encoding itself so as to yield new clues and deeperinsights into their construction.  For the benefit of the uninitiated, the encoding method used in thesecond cypher employs a specified document whose words are simply numbered consecutively, and first lettersof these words are sought out at random to match the letters of these words are sought out at randomto match the letters of the clear text or message.  The sequence of numbers corresponding to these matchesis then written down as the final code.  While primitive, the process has the advantage of relativesecurity until the source document becomes known; at that moment the cypher can be decoded even by secondgraders.  The work now completed with the help of our UNIVAC 1108 includes numerous analytical studiesof the Beale cyphers and various types of simulations.  For example, we have turned the entire process ofsimulated encoding by various schemes over to the machine and analyzed the signatures of these syntheticcodes; we have also encoded various messages by hand, using different texts and a variety of methods toobtain their signatures. These simulations provide convincing evidence that the signatures are both processand data dependent; they indicate also very strongly that Mr. Beale's cyphers are for real and thatit is merely a matter of time before someone finds the correct source document and locates theright vault in the common-wealth of Virginia. | Hammer, C..KThomas Jefferson Beale, codes, cryptanalysis, cyphers,decoding, Declaration of Independence, encoding, Magna Carta, pseudotext, signature, simulation.C3.42 3.63 3.65 3.71
2234 | Roots of Matrix Pencils (Algorithm R405) | Heiberger, R. M..Keigenvalues, matrix roots, pencil roots.C5.1 5.3
2235 | Decision Table Translation (Algorithm R394) | Marshall, D. R. T..Kdecision table, decision table translation.C4.19
2236 | Remarks on Characteristic Values and AssociatedSolutions of Mathieus Differential Equation, Exponential Integral, and Systems of HyperbolicP.D.E. (Algorithms R352, R385, R392) | Frisch, M. J..KANSI Fortran standard.C4.0 4.22
2237 | BANDSOLVE (Algorithm R195) | Schuegraf, E.
2238 | Least Squares Surface Fit (Algorithm R176) | Schuegraf, E.
2239 | Squank (Algorithm C379) | Hallet, P.Mund, E..Knumerical integration, integration rule, adaptiveintegration, automatic integration, Simpson's rule, numerical quadrature, quadrature rule, adaptivequadrature, automatic quadrature, round-off error control.C5.16
2240 | Pseudo-Random Numbers [G5] (Algorithm C266) | Sullins, W. L..Kpseudo-random numbers, testing random number generators.C5.5
2241 | Product Type Three-point Gauss-Legendre-Simpson'sIntegration [D1] (Algorithm A439) | Boland, W. R..Knumerical integration, product type quadrature,Gaussian quadrature, Simpson's rule.C5.16
2242 | Product Type Two-Point Gauss-Legendre-Simpson'sIntegration [D1] (Algorithm A438) | Boland, W. R..Knumerical integration, product type quadrature,Gaussian quadrature, Simpson's rule.C5.16
2243 | Product Type Simpson's Integration [D1] (Algorithm A437) | Boland, W. R..Knumerical integration, product type quadrature, Simpson's rule.C5.16
2244 | Product Type Trapezoidal Integration (Algorithm A436) | Boland, W. R..Knumerical integration, product type quadrature, trapezoidal integration.C5.16
2245 | Trace-Driven Modeling and Analysis ofCPU Scheduling in Multiprogramming System | Microscopic level job stream data obtained ina production environment by an event-driven software probe is used to drive a model of a multiprogrammingcomputer system.  The CPU scheduling algorithm of the model is systematically varied.  This technique,called trace-driven modeling, provides an accurate replica of a production environment for the testing of variationsin the system.  At the same time alterations in scheduling methods can be easily carried out in acontrolled way with cause and effects relationships being isolated.  The scheduling methods tested includedthe best possible and worst possible methods, the traditional methods of multiprogramming theory, round-robin,first-come-first-served, etc., and dynamic predictors.  The relative and absolute performances ofthese scheduling methods are given.  It is concluded that a successful CPU scheduling method must be preemptiveand must prevent a given job from holding the CPU for too long a period. | Sherman, S.Baskett III, F.Browne, J. C..Kscheduling, CPU scheduling,multiprogramming,performance measurement, trace driven models.C4.10 4.20 4.31 4.32
2246 | Levels of Language for Portable Software | An increasing amount of software is beingimplemented in a portable form.  A popular way of accomplishing this is to encode the software in a speciallydesigned machine-independent language and then to map this language, often using a macro processor,into the assembly language of each desired object machine.  The design of the machine-independentlanguage is the key factor in this operation.  This paper discusses the relative merits of pitchingthis language at a high level or a low level, and presents some comparative results. | Brown, P. J..Kportable software, level of language, machineindependent, macro processor, efficiency.C4.12 4.21 4.22
2247 | On the Criteria To Be Used in Decomposing Systems into Modules | This paper discusses modularization as a mechanismfor improving the flexibility ad comprehensibility of a system while allowing the shortening of its developmenttime.  The effectiveness of a "modularization" is dependent upon the criteria used in dividing thesystem into modules.  A system design problem ispresented and both a conventional and unconventionaldecomposition are described.  It is shown that the unconventional decompositions have distinct advantagesfor the goals outlined.  The criteria used in arriving at the decompositions are discussed.  Theunconventional decomposition, if implemented with the conventional assumption that a module consists ofone or more subroutines, will be less efficient in most cases.  An alternative approach to implementationwhich does not have this effect is sketched. | Parnas, D. L..Ksoftware, modules, modularity, softwareengineering, KWIC index, software design.C4.0
2248 | A New Method for the Solution of theCauchy Problem for Parabolic Equations | An integral equation representation is givenfor parabolic partial differential equations.  When the equations are defined in unbounded domains, asin the initial value (Cauchy) problem, the solution of the integral equation by the method of successiveapproximation has inherent advantages over other methods.  Error bounds for the methods are of order h^(3/2)and h^(7/2) (his the increment size) depending on the finite difference approximations involved. | Moore, J.Robinson, P..Kparabolic equations, the Cauchy problem,method of successive approximations.C5.17
2249 | A Comparison of Multivariate Normal Generators | Three methods for generating outcomes on multivariatenormal random vectors with a specified variance-covariance matrix are presented.  A comparisonis made to determine which method requires the least computer execution time and memory space when utilizingthe IBM 360/67.  All methods use as a basis a standard Gaussian random number generator.  Resultsof the comparison indicate that the method based on triangular factorization of the covariance matrixgenerally requires less memory space and computer time than the other two methods.  | Barr, D. R.Sezak, N. L..Krandom number generator, normal distribution, multivariatenormal distribution, multivariate normal generator.C3.65 5.5
2250 | Computer Methods for Sampling from the Exponentialand Normal Distributions (Corrigendum) | Ahrens, J. H.Dieter, U.
2251 | Weighted Increment Linear Search for Scatter Tables | A new linear search for hash tables whose incrementstep is a function of the key being addressed is presented.  Comparisons with known methods are given,in terms of efficiency and computation complexity.  In particular, the new method applies to tables ofsize n = 2^r.  It allows full table searching, and practically eliminates primary clustering at a very low cost. | Luccio, F..Klinear search, weighted increment search, scatterstorage, hash table, key, hash address, clustering, search length.C3.73 3.74 4.9
2252 | A Method for Incrementally CompilingLanguages with Nested Statement Structure | A method of incremental compilation is presentedwhich applies especially to programming languages in which statements can be nested (such as Algol andPL/I).  The method permits editing of the source language using a general purpose text editor, and incrementalprocessing of changes without frequent recompilation of entire routines.  The essential pointsof the method are: (1) the syntax of the language is restricted insof ar as which constructs may occuron lines; (2) an internal data structure (called the skeleton) is maintained to represent the statementstructure; (3) the recompilation is partially batched in the sense that recompilation of modified linesdoes not occur until the last of a set of editing commands has been received; and (4) the parsing andcompilation are factored into two parts, that done on individual lines and that done globally tohandle the relationships between the lines. | Earley, J.Caizergues, P..Kincremental compiler, interactive programming language .C4.12 4.22
2253 | Index Ranges for Matrix Calculi | The paper describes a scheme for symbolicmanipulation of index expressions which arise as a by-product of the symbolic manipulation of expressionsin the matrix calculi described by the authors in a previous paper.  This scheme attempts program optimizationby transforming the original algorithm rather than the machine code.  The goal is to automaticallygenerate code for handling the tedious address calculations necessitated by complicated data structures. The paper is therefore preoccupied with "indexing by position."  The relationship of "indexing byname" and "indexing by position" is discussed. | Bayer, R.Witzgall, C..Kaddress calculations, algorithm transformation,compilation, data structures, indexing by name, indexing by position, index domain, index map, indexrange, matrix expressions, normal form, programming languages, program optimization, range operations, symbolicmanipulation, syntactic analysis, well-formed expressions.C4.12 4.22 5.14
2254 | Dynamic Partitioning for Array Languages | The classical process of partitioning an arrayinto subarrays is extended to a more useful array language operation.  Various modes of partitioningare defined for different types of arrays, so that subarrays may vary over the original array ina nearly arbitrary manner.  These definitions are motivated with several realistic examples to illustratethe value of partitioning for array languages.  Of general interest is the data structure for partitioning. This consists of dynamic tree structures which are used to derive and maintain the array controlinformation.  These are described in sufficient detail to be of value in the design of other array languages. The description presented in this paper is implemented in a new array language, OL/2, currentlyunder development at the University of Illinois. | Phillips, J. R.Adams, H. C..Kdynamic partitioning, array partitioning array language,data structure, tree structure, programming language design, array control blocks, partition control blocks.C4.12 4.2 4.22
2255 | Comments on Moorer's Music and Computer Composition | Smoliar, S. W..Kartificial intelligence, heuristic programming,models of cognitive processes, computer music, computer composition, music theory.C3.44 3.65
2256 | Further Comments on Dijkstra's Concurrent Programming Control Problem | Eisenberg, M. A.McGuire, M. R..Kcritical section, concurrent programming control, multiprocessing.C4.32
2257 | A Note on Optimal Doubly-Chained Trees | Kennedy, S..Kfile searching, doubly-chained tree, binary search tree.C3.73 3.74 5.32 5.6
2258 | Additional Results on Key-to-Address TransformTechniques: A Fundamental Performance Study on Large Existing Formatted Files | Lum, V. Y.Yuen, P. S. T..Khashing, hashing techniques, hashing methods, hashcoding, keys, key transformation, key-to-address transformation, direct addressing, direct access method,randomizing, random access file organization, file search, scatter storage, information retrieval.C3.7 3.72 3.73 3.74 3.79 4.9
2259 | Modified Incomplete Gamma Function [S14] (Algorithm A435) | Fullerton, W..Kmodified incomplete Gamma function, incompleteGamma function, chi-square distribution function, Poisson distribution function.C5.13
2260 | Exact Probabilities for R x C Contingency Tables [G2] (Algorithm A434) | March, D. L..Kprobability, contingency table, test of significance.C3.5 5.5
2261 | An Approximate Method for Generating Symmetric Random Variables | A method for generating values of continuoussymmetric random variables that is relatively fast, requires essentially no computer memory, and iseasy to use is developed.  The method, which uses a uniform zero-one random number source, is based onthe inverse function of the lambda distribution of Turkey.  Since it approximates many of the continuoustheoretical distributions and empirical distributions frequently used in simulations, the method shouldbe useful to simulation practitioners. | Ramberg, J. S.Schmeiser, B. W..Ksimulation, Monte Carlo, probability, statistics,approximations, random variables, random numbers, moments, distribution.C5.5 8.1
2262 | Garbage Collection for Virtual Memory Computer Systems | In list processing there is typically a growingdemand for space during program execution.  This paper examines the practical implications of thisgrowth within a virtual memory computer system, proposes two new garbage collection techniques for virtualmemory systems, and compares them with traditional methods by discussion and by simulation. | Baecker, H. D..Kgarbage collection, virtual memory, listprocessing, paging, segmentation, page tables.C4.32
2263 | The Conversion of Limited-Entry Decision Tablesto Optimal and Near-Optimal Flowcharts: Two New Algorithms | Two new algorithms for deriving optimal andnear-optimal flowcharts from limited entry decision tables are presented.  Both take into account rule frequenciesand the time needed to test conditions.  One of the algorithms, called the optimum-finding algorithm,leads to a flowchart which truly minimizes execution time for a decision table in which simple rulesare already contracted to complex rules.  The other one, called the optimum-approaching algorithm, requiresmany fewer calculations but does not necessarily produce the optimum flowchart.  The algorithms are firstderived for treating decision tables not containing an ELSE-rule, but the optimum-approaching algorithmis shown to be equally valid for tables including such a rule.  Both algorithms are compared with existingones and are applied to a somewhat large decision table derived from a real case.  From this comparison twoconclusions are drawn.  (1) The optimum-approaching algorithm will usually lead to better results than comparableexisting ones and will not require more, but usually less, computation time.(2) In general, thegreater computation effort needed for applying the optimum-finding algorithm will not be justifiedby the small reduction in execution time obtained. | Verhelst, M..Kdecision table, flowcharting, preprocessor, optimal programs, search.C3.50 3.59 4.19 4.29 4.49 5.31
2264 | Derived Semantics for Some Programming Language Constructs | The constructs of a simple programming languageare introduced and described informally in terms of values and side-effects.  A translator is definedwhich translates the language into flowcharts for a simple machine.  The action of the machine in executinga flowchart is defined.  A proof is constructed that the effect of translating and executing any programcan be expressed solely in terms of the value and side-effect of the program.  During the course ofconstructing the proof, formal definitions of the concepts of value and side-effect are derived in orderto make the proof rigorous.  Correctness of the implementation involves checking that the definitions derivedin the step above are an acceptable formalization of the informal description given in the first step. | Henderson, P..Klambda calculus, formal description, programcorrectness, programming languages, semantics.C4.22 5.23 5.24
2265 | A Model for Type Checking | Most current programming languages treat computationover different classes of objects (e.g. numbers, strings, labels and functions).  For correctcompilation and execution, the following question then arises: is a program properly constructed so thatits operations and operands are compatible?  The activity of answering this question is usually calledtype checking.  This paper attempts to isolate the notion of type checking and presents a partialsolution to the type checking problem based on the notions of abstraction and application of functions. In particular, a program is mapped into an expression within a decidable subset of the Lambda calculus, whichcharacterizes the type relations within the program and eliminates all other information.  The determinationof the type-wise correctness or incorrectness of the program is resolved by reducing its correspondingLambda calculus expression to one of two normal forms, the constant "correct" for a type-wise correctprogram or the constant "error".  An application to type checking in Algol 60 is made, and the attendantproblems faced for any notion of type checking are discussed. | Ledgard, H. F..Ktype checking, types, Lambda calculus, models forprogramming languages, syntax, semantics, compiler writing, language implementation, formal definition.C4.12 4.22 5.2 5.21 5.23
2266 | A Highly Parallel Algorithm for ApproximatingAll Zeros of a Polynomial with Only Real Zeros | An algorithm is described based on Newton'smethod which simultaneously approximates all zeros of a polynomial with only real zeros.  The algorithm, whichis conceptually suitable for parallel computation, determines its own starting values so that convergenceto the zeros is guaranteed.  Multiple zeros and their multiplicity are readily determined.  At nopoint in the method is polynomial deflation used. | Patrick, M. L..Kparallel numerical algorithms, real polynomials,real zeros, Newton's method, starting values, guaranteed convergence.C5.15
2267 | Algorithms To Reveal Properties of Floating-Point Arithmetic | Two algorithms are presented in the form ofFortran subroutines.  Each subroutine computes the radix and number of digits of the floating-pointnumbers and whether rounding or chopping is done by the machine on which it is run.  The methods areshown to work on any "reasonable" floating-point computer. | Malcolm, M. A..Kfloating-point arithmetic, high-levellanguages, philosophy of language design.C4.9 5.19
2268 | A Comparative Study of Computer Programsfor Integrating Differential Equations | A study comparing the performance of several computerprograms for integrating systems of ordinary differential equations is reported.  The integration methods representedinclude multistep methods (predictor-correctors), single-step methods (Runge-Kutta) and extrapolation methods(both polynomial and rational).  The testing procedure is described together with the evaluationcriteria applied.  A set of test problems on which the programs were tested is included in an appendix. For the particular problems and criteria used in the investigation it was found that a program based onrational extrapolation showed the best performance. | Fox, P..Kordinary differential equations, integration,program comparison, certification, validation.C5.10 5.17
2269 | Tableless Date Conversion (Algorithm R398) | Robertson, J. D..Kdate, calendar, Fortran statement function, arithmetic statement function.C3.15 4.9 5.9
2270 | Interpolation and Smooth Curve Fitting Basedon Local Procedures [E2] (Algorithm A433) | Akima, H..Kinterpolation, polynomial, slope of curve, smooth curve fitting.C5.13
2271 | Aesthetics and the Human Factor in Programming (Corrigendum) | Ershov,A. P.
2272 | Sorting by Natural Selection | A family of sorting algorithms is proposed,the members of which make fuller use of the memory space and thus yield longer sorted strings.  Extensivesimulation results are presented, and various implications and further applications are discussed. | Frazer, W. D.Wong, C. K..Kalgorithms, sorting by replacement selection, expected string length.C5.31
2273 | Conversion of Decision Tables By Rule Mask Method Without Rule Mask | Two algorithms for generating computer programsfrom decision tables are described.  The algorithms allow handling limited entry, extended entry, and mixedentry tables.  The algorithms are based on the rule mask method but need not have the masks at executiontime.  They perform the logical operations immediately rather than at the end of the interpretingprocess.  Execution time can be considerably reduced by instantly marking rules which are not applicable (Algorithms1 and 2) or conditions which are already tested (Algorithm 2).  The new algorithms combine to acertain degree the advantages of mask methods with those of tree methods. | Dathe, G..Kdecision tables, rule mask, rule mask method,rule mask technique, program generator.C3.50 4.12 4.19 4.29
2274 | Generating English Discourse from Semantic Networks | A system is described for generating Englishsentences from a form of semantic nets in which the nodes are word-sense meanings and the paths areprimarily deep case relations.  The grammar used by the system is in the form of a network that imposesan ordering on a set of syntactic transformations that are expressed as LISP functions.  The generationalgorithm uses the information in the semantic network to select appropriate generation paths throughthe grammar.  The system is designed for use as a computational tool that allows a linguist to developand study methods for generating surface strings from an underlying semantic structure.  Initial findingwith regard to form determiners such as voice, form, tense, and mood, some rules for embedding sentences,and some attention to pronominal substitution are reported.  The system is programmed in LISP1.5 and is available from the authors. | Simmons, R.Slocum, J..Ksemantic nets, grammars, deep case relations,semantic generation, discourse generation.C3.42 3.65
2275 | Integral Equations of Immunology | The inversion of a particular integral equationof the first (Fredholm) kind is the basic problem considered.  The strategy which yielded success consistedof three essential points: (1) fit the known experimental data by a curve with properties which derivefrom properties of the (as yet unknown) function; (2) stabilize the computation for the unknown functionby using singular value decomposition; (3) constrain the unknown function approximation (since it representsa probability distribution) to be nonnegative.  A number of test cases are presented. One set of actualexperimental data is analyzed with the procedures presented. | Hanson, R. J..Kintegral equations of the first kind, nonnegativeconstraints, singular value analysis.C3.10 5.14 5.18 5.41
2276 | Computer Methods for Sampling fromthe Exponential and Normal Distributions | Various methods are known for transforming uniformlydistributed random numbers into exponentiallyand normally distributed quantities.  The most efficientones are compared, in terms of memory requirements and speed, with some new algorithms.  A number of proceduresconvert Taylor series expansions directly into sampling steps, an approach which may be used forsampling from any continuous distribution.  For the exponential distribution a definite recommendationcan be made, whereas in the case of the normal distribution there remains a choice between slower andshorter algorithms and faster but space consuming methods. | Ahrens, J. H.Dieter, U..Krandom numbers, pseudorandom, normal distribution,exponential distribution, exponential distribution, simulation, numerical analysis.C3.29 3.57 5.11 5.5
2277 | Demand Paging Through Utilization of Working Sets on the MANIAC II | A hardware implementation on the Maniac II computerof the working set model for demand paging, as introduced by Denning, is discussed.  Characteristicsof the Maniac II are given, along with a description of the basic demand paging scheme and the associate memorywhich has been added to the Maniac II hardware.  Finally, a description of the hardware design for implementationof the working set model is discussed and a specification of the actions taken under variousconditions which may arise during the operation of the full working set model, demand paging system is given. | Morris, J. B..Kdemand paging, dynamic storage allocation, ManiacII, memory allocation, one-level store, paging, paging associative memory, storage allocation,thrashing, virtual memory, working set model.C4.30 6.21
2278 | On Foster's Information Storage and Retrieval Using AVL Trees | Tan, K. C..Kbinary trees, search trees, information storage, information retrieval.C3.70 3.73 3.74
2279 | A Controller for a Braille Terminal | Rubinstein, R.Feldman, J..Kblind programming aid, braille, braille characterset, braille character translation, braille computer communication, braille computer terminal, braille terminal,tactile computer communication, tactile terminal.C1.59 4.41 6.35
2280 | Comment on Deadlock Prevention Method | Parnas, D. L.Habermann, A. N..Kmultiprogramming, time-sharing, scheduling, resourceallocation, deadlock, interlock, lockout, deadly embrace, knotting.C3.72 4.32 6.20
2281 | The Eigen problem of Block Tridiagonal Matrices | Khalil, H. M..Klinear algebra, eigenvalues and eigenvectors,partial differential equations.C5.14 5.17
2282 | A Comparison of Floating Point Summation Methods | Gregory, J..Ksummation, floating-point addition, truncation error, error propagation.C5.11
2283 | Thinning Algorithms on Rectangular, Hexagonal, and Triangular Arrays | In this report three thinning algorithms aredeveloped: one each for use with rectangular, hexagonal, and triangular arrays.  The approach to thedevelopment of each algorithm is the same.  Pictorial results produced by each of the algorithms are presentedand the relative performances of the algorithms are compared.  It is found that the algorithm operatingwith the triangular array is the most sensitive to image irregularities and noise, yet it will yielda thinned image with an overall reduced number of points.  It is concluded that the algorithm operating inconjunction with the hexagonal array has features which strike a balance between those of the other two arrays. | Deutsch, E. S..Kthinning algorithms, rectangular, hexagonal,triangular arrays, image processing, skeleton.C3.64
2284 | Solution of the Matrix Equation AX+XB=C [F4] (Algorithm A432) | Bartels, R. H.Stewart, G. W..Klinear algebra, matrices, linear equations.C5.14
2285 | Computer Routine for Quadratic and LinearProgramming Problems [H] (Algorithm A431) | A computer program based on Lemke's complementarypivot algorithm is presented.  This can be used to solve linear and quadratic programming problems. The program has been extensively tested ona wide range of problems and the results have been extremely satisfactory. | Ravindran, A. .Klinear program, quadratic program, complementaryproblem, Lemke's algorithm, simplex method.C5.41
2286 | Automatic Error Analysis for Determining Precision | The problem considered is that of evaluating arational expression to within any desired tolerance on a computer which performs variable-precision floating-pointarithmetic operations.    An automatic error analysis technique is given for determining, directlyfrom the results of a trial low-precision interval arithmetic calculation, just how much precisionand data accuracy are required to achieve a desired final accuracy.  The technique given generalizeeasily to the evaluation of many nonrational expressions. | Richman, P. L..Kerror analysis, interval arithmetic, precision control.C5.11
2287 | A New Approach to Automatic Scanning of Contour Maps | The problem of automatic digitizing of contourmaps is discussed.  The structure of a general contour map is analyzed, and its topological propertiesare utilized in developing a new scanning algorithm.  The problem of detection and recognition of contourlines is solved by a two color labeling method.  It is shown that for maps containing normal contour linesonly, it suffices to distinguish between so-called "even" and "odd" lines.  The "tangency problem" involvedin practical scanning is discussed, and a solution based on minimizing computer memory space andsimplifying control program is suggested. | Mor, M.Lamdan, T..Kautomatic scanning, contour maps, digitizing,contour lines, topology, detection and recognition.C3.14 3.19 6.35 6.36
2288 | File Organization: The Consecutive Retrieval Property | The consecutive retrieval property is an importantrelation between a query set and record set.  Its existence enables the design of an informationretrieval system with a minimal search time and no redundant storage.  Some important theorems onthe consecutive retrieval property are proved in this paper.  Conditions under which the consecutive retrievalproperty exists and remain invariant have been established.  An outline for designing an informationretrieval system based on the consecutive retrieval property is also discussed. | Ghosh, S. P..Kfile organization, consecutive storage, consecutiveretrieval, information retrieval, record organization, query structure, record structure, storage ontapes, storage space, minimum access time.C3.70 3.73 3.74
2289 | Cellular Arrays for the Solution of Graph Problems | A cellular array is a two-dimensional, checkerboardtype interconnection of identical modules (or cells), where each cell contains a few bits ofmemory and a small amount of combinational logic, and communicates mainly with its immediate neighborsin the array.  The chief computational advantage offered by cellular arrays is the improvement in speedachieved by virtue of the possibilities for parallel processing.  In this paper it is shown that cellulararrays are inherently well suited for the solution of many graph problems.  For example, the adjacencymatrix of a graph is easily mapped onto an array; each matrix element is stored in one cell of the array,and typical row and column operations are readily implemented by simple cell logic.  A major challengein the effective use of cellular arrays for the solution of graph problems is the determination of algorithmsthat exploit the possibilities for parallelism, especially for problems whose solutions appear to be inherentlyserial.  In particular, several parallelized algorithms are presented for the solution of certainspanning tree, distance, and path problems, with direct applications to wire routing, PERT chart analysis,and the analysis of many types of networks.  These algorithms exhibit a computation time that inmany cases grows at a rate not exceeding log2 n, where n is the number of nodes in the graph.  Straightforwardcellular implementations of the well-known serial algorithms for these problems require about nsteps, and noncellular implementations require from n^2 to n^3 steps. | Levitt, K. N.Kautz, W. H..Kgraph theory, cellular logic-in-memory arrays,parallel processing, special purpose computers, algorithms for distance and spanning tree problems.C5.32 6.22 6.5
2290 | Immediate Predominators in a Directed Graph [H] (Algorithm A430) | Purdom Jr., P. W.Moore, E. F..Kpredominator, immediate predominator, graph theory,directed graph, shortest path, articulation, connectivity, program optimization, optimizing compiler.C4.12 5.32
2291 | Localization of the Roots of a Polynomial [C2] (Algorithm A429) | Squire, W..Kpolynomials, roots of polynomials,theoryof equations, Routh-Hurwitz criterion.C5.15
2292 | A Note on the Generation of Rosary Permutations | Read, R. C..Kpermutation, permutation generation.C5.39
2293 | Comment on Average Binary Search Length | Jones, P. R..Ksearching, binary searching, record retrieval.C3.74
2294 | A Bonus from van Wijngaarden's Device | Morris Jr., J. H..Knon-local transfers, procedure returns.C4.12 4.13 4.22
2295 | Comment on the Composition of Semantics in Algol 68 | van der Poel, W. L..Kprogramming primitives, programming languages,Algol, semantics, recursive composition, design of programming languages, data structures.C1.3 4.2 4.22 5.23 5.24
2296 | Compiling Fixed-Point Multiplications | Bernstein, H. J..Kcompiling multiplications, fixed-point arithmetic.C4.12
2297 | A Model of Memory Contention in a Paging Machine | This paper is concerned with certain aspects of contentionfor main memory resources in a multiprogrammed computer system operating under demand paging.  Inthe model presented, the number of page-frames of main memory allocated to a problem program varies intime.  These changes in memory configuration are represented explicitly in the model, CPU requirements andpage exception characteristics of program material being described statistically.  Expressions for the distributionof the number of page-frames allocated to an executing program, the long run expected fractionof a program's execution time in a given number of page-frames, and the average execution interval of themultiprogrammed load are obtained.  It is pointed out heuristically and demonstrated numerically thatan increase is obtain able in the average execution interval of the multiprogrammed load over that resultingfrom equal fixed partitioning of main memory. | Oden, P. H.Shedler, G. S..Kpaging machines, demand paging, operating systemsstudies, queuing analysis, memory contention, memory management.C4.32
2298 | An Environment for Research in Microprogramming and Emulation | The development of the research project inmicroprogramming and emulation at State University of New York at Buffalo consisted of three phases: theevaluation of various possible machines to support this research; the decision to purchase one such machine,which appears to be superior to the others considered; and the organization and definition of goalsfor each group in the project.  Each of these phases is reported, with emphasis placed on theearly results achieved in this research. | Rosin, R. F.Frieder, G.Eckhouse Jr., R. H..Kmicroprogramming, emulation, computer systems, languageprocessors, input-output systems, nano-program, project management, hardware evaluation.C4.1 4.2 4.3 6.2
2299 | An Extensible Editor for a Small Machine with Disk Storage | A design philosophy for developing a sophisticatedutility program is illustrated by the actual design and implementation of a text editor.  A versatiledata structure is employed so that only a small number of programmed subroutines are necessary for alltypes of data manipulation.  Such a data structure is described, and its merits are illustrated by the easewith which powerful extensions can be implemented in terms of a few basic editing function. | Benjamin, A. J..Kcommand processing, context searching, executiveprogram, garbage collection, interpreter, list processing, macro language, paging, parameter substitution,recursion, state table, storage allocation, string manipulation, text editing, virtual memory.C3.73 3.74 3.75 4.13 4.22 4.43 4.49
2300 | Political Redistricting by Computer | The problems of political redistricting areconsidered and a computer method for redistricting is presented.  Criteria for acceptable redistricting arediscussed, including population equality, compactness, contiguity, and preservation of natural and/or politicalboundaries.  Only nonpartisan criteria are considered.  Using 1970 Bureau of Census population data, specificresults are given for the ten Congressional Districts in the state of Missouri and for the seven St. LouisCounty Council seats.  Results from the use of the algorithm indicate the feasibility of politicalredistricting with the aid of a computer. | Helbig, R. E.Orr, P. K.Roediger, R. R..Kpolitical redistricting, reapportionment, compactness,equal population, contiguity, transportation algorithm, legislative districts, population units.C2.12 3.35 5.41
2301 | Generating Parsers for Affix Grammars | Affix grammars are two-level grammars whichare similar to van Wijngaarden's two-level grammars used in the definition of Algol 68.  Affix grammars are shownby Koster to be equal in power to van Wijngaarden grammars.  They are much more suited to parsing thanare the latter, however.  Koster, the inventor of affix based on recursive procedures.  This paper presentsa bottom-up scheme for parsing them, based on an extension of Floyd Production Language (FPL).  Includedis an algorithm, similar to that of DeRemer's, for converting a large class of affix grammars into FPL. The paper concludes by discussing briefly the applicabilities of the conversion algorithm and affixgrammars in general, and some possible extensions to Koster's definition of affix grammars. | Crowe, D..Kalgorithmic language processing,bottom-up parsing,Floyd Production Language, parsing, syntax directed compiling, translator writing systems, two-level grammars.C3.42 4.12 4.13 4.20 5.23
2302 | Computers and Employment | The relationship of computers and automationto employment is part of the more general relation of technological change to employment.  The most obviouseffect is that increase in productivity due to technology can eliminate jobs.  Technology affectsthe individual worker, in the nature and amount of his work, and in his attitudes toward that work.  Technologicalchange affects the occupational structure of the entire labor force.  Because of the central importanceof these effects, the impact of technology has been the subject of extensive study by economists, sociologists,political scientists, and psychologists.  Even within a single discipline, studies are often contradictory,and conclusions are colored by political overtones.  We wish to delineate some of the issues,and present arguments given to support different viewpoints. | Borodin, A.Gotlieb, C. C..Kemployment, unemployment, social implications, attitudes,skills, obsolescence, technology, unions, displacement.C2.1
2303 | Archaeology of Computers - Reminiscences, 1945-1947 | The period preceding the founding of ACM wasdominated by the first large computer ENIAC.  Its characteristics, described here, foreshadow later developments. | Alt, F. L..Khistory of computers.C1.2
2304 | A Western View of Computer History | Many U.S. histories of the digital computerfield have tended to be impersonal, with heavy emphasis on eastern universities and commercial developments. This article records the events of the early years in a personal way.  The people, organizations,technologies, and computers of the 1945-55 period in the western part of the United Statesare described as they happened. | Sprague, R. E..Khistory, computer history.C1.2 6.0
2305 | The "Plankalkul" of Konrad Zuse: A Forerunnerof Today's Programming Languages | Plankalkul was an attempt by Korrad Zuse inthe 1940's to devise a notational and conceptual system for writing what today is termed a program.  Althoughthis early approach to a programming language did not lead to practical use, the plan is describedhere because it contains features that are standard in today's programming languages.  The investigationis of historical interest; also, it may provide insights that would lead to advancements in the stateof the art.  Using modern programming terminology, the Plankalkul is presented to the extent it has possibleto reconstruct it from the published literature. | Bauer, F. L.Wossner, H..Khigher programming languages, programming,theory of programming, history of programming.C1.2 4.22 5.29
2306 | Ancient Babylonian Algorithms | The early origins of mathematics are discussed,emphasizing those aspects which seem to be of greatest interest from the standpoint of computerscience.  A number of old Babylonian tablets, many of which have never before been translated into English, are quoted. | Knuth, D. E..Khistory of computation, Babylonian tablets,sexagesimal number system, sorting .C1.2
2307 | Dynamic Document Processing | The current role of computers in automaticdocument processing is briefly outlined, and some reasons are given why the early promise of library automationand of the mechanization of documentation processes has not been fulfilled.  A new dynamic documentenvironment is then outlined in which clusteredfiles are searched and information is retrieved followingan interactive user-controlled search process.  Methods are described for an automatic query modificationbased on user needs, and for a continuous reorganization of the stored information as a function ofearlier file processing and of normal collection growth.  The proposed procedures provide powerful toolsfor information retrieval and for the control of dynamic library collections in which new itemsare continually added and old ones are retired. | Salton, G..Kautomatic indexing, automatic search and retrieval,iterative searching, mechanized library processing, collection growth, collection retirement, feedback search.C3.62 3.71 3.73 3.74
2308 | Computers and Urban Society | This brief survey of the use of computers inurban society covers the broad range of activities found in any city.  The future scope of applications islimited only by the imagination and inventiveness of future system designers, programmers, analysts, anddecision makers.  The computer can be, if properly used, with respect for human dignity and civil liberty,a significant factor in improving the efficiency of the urban process.  It is expected that the benefitsof such computer usage will outweigh the costs and that we may look forward to an expansion of such usage. | Sturman, G. M..Kurban systems, urban applications, data acquisition,data management, engineering analysis, information systems.C3.23 3.39 3.53 3.72 3.82 3.89
2309 | Computers in the Instructional Process:Directions for Research and Development | A survey is given of computer applicationsto the instructional process which suggests how the computer professional can contribute to effective educational systems. | Zinn, K. L..Keducation.C1.5 3.32
2310 | Language Analysis in the Humanities | The use of the computer in the language-orientedhumanities for exhaustive listing of detail (as in indices and concordances) is widespread and acceptedas desirable.  The implications of the computer for a "science" of the humanities-a science entailinggathering data for the construction and testing of models-are neither widely recognized nor accepted. This paper argues that the computer's  major role as to language analysis in the humanities will be theestablishing of such a science.Thus, for those areas of the humanities for which rigor and precisionare necessary (e.g. analyzing literature or teaching a student to write a composition) the computercan be a critically important facilitator. | Sedelow, S. Y..Klanguage analysis, humanities, science of the humanities,pattern recognition, pattern generation, interdisciplinary cooperation.C1.3 2.19 3.42 3.43
2311 | A Generational Perspective of Information System Development | System development is categorized from a generationalpoint of view that parallels the commonly described computing system generations.  For each generation,the scope of development projects and the technological world view of the system developer are examined. | Benjamin, R. I..Kcomputing milieu, management data processing, hardwaresystems, software systems, systems development process, functional systems, management systems.C2.0 3.50 4.0 6.20
2312 | On the Present and Future of Scientific Computation | A pessimistic forecast is given of what can beexpected to happen in the application of computers to the physical sciences. | Rice, J. R..Kscientific computation.C3.1 5.0
2313 | The Evolution of Storage Structures | Data base management systems have grown rapidlyin their power and complexity over the 15-year history of data processing on commercially availablecomputers.  The original concepts have split, and new terms have been adopted to name and refer to theseconcepts.  The Data Structure Diagram graphic technique is used to illustrate the splitting of theconcepts and the structural relations which exist between these concepts at each point in the evolution. | Bachman, C. W..Kblock, cylinder, device, field, extent file, page,record, physical record, logical record, track, volume, entity, set, entity class, set class, data structurediagram, storage structure, physical storage structure, logical storage structure, storage allocationstructure, Integrated Data Store, index sequential, hash, randomize, item.C1.4 4.41 4.9
2314 | Requirements for Advanced Programming Systems for List Processing | List processing systems should be designed tofacilitate production of large programs to manipulate large complex symbolic data stores.  This paper presentsan overview of a number of system features which the author feels are important to improve the productivityof programmers working in such domains.  A system view it taken, rather than focusing just on languagefeatures, since algorithms must be not only coded in a language form, but debugged, modified, madeefficient, and run on data.  Because of this general framework,the requirements specified are applicableto the design of advanced programming systems for a wide range of applications.  Three aspects of programmingsystems are highlighted: good interactive facilities, programmable control structures, and sophisticateddata communication mechanisms.  Interactive features are described to facilitate program composition,entry, testing, debugging, editing, optimization, and packaging.  Implementation of a generalized environmentstructure model specified would allow programming of various control regimes including multiprocesses,coroutines and backtracking.  Alternative methods of procedure invocation required include invocationby pattern and by monitoring condition.  The  need for extended data forms, storage management, and extensibilityare stressed, as is the duality of data retrieval and function evaluation.  Syntax directedinput and output of data would facilitate use of complex data stores. | Bobrow, D. G..Klist processing, programming languages, design ofprogramming languages, interactive systems, control structures, data structures, programming primitives,semantics, advanced programming systems.C1.3 4.2 4.22 4.3 4.32 5.23 5.24
2315 | The Production of Better Mathematical Software | Some observations are made on steps to betaken toward the creation of better mathematical software.  These steps suggest the need for a coordinatedeffort and the creation of a center to focus activities in this area. | Fosdick, L. D..Kmathematical software, programming.C4.0
2316 | Programming Languages: History and Future | This paper discusses both the history and futureof programming languages (= higher level languages).  Some of the difficulties in writing such a historyare indicated.  A key part of the paper is a tree showing the chronological development of languages and theirinterrelationships.  Reasons for the proliferation of languages are given.  The major languages are listedwith the reasons for their importance.  A section on chronology indicates the happenings of the significantprevious time periods and the major topics of 1972.  Key concepts other than specific languages are discussed. | Sammet, J. E..Kprogramming languages, higher level languages,languages, history, future directions, language interrelationships, programming language tree, programminglanguage history, programming language future.C1.2 4.2
2317 | Programming Systems and Languages 1965-1975 | In spite of impressive gains by PL/I, Fortranand Cobol remain the languages in which most of the world's production programs are written and willremain so into the foreseeable future.  There is a great deal of theoretical interest in Algol 68and in extensible languages, but so far at least they have had little practical impact.  Problem-orientedlanguages may very well become the most important language development area in the next five to ten years. In the operating system area all major computer manufacturers set out to produce very ambitious multiprogrammingsystems, and they all ran into similar problems.  A number of university projects,though notdirectly comparable to those of the manufacturers, have contributed greatly to a better understandingof operating system principles.  Important trends include the increased interest in the development ofsystem measurement and evaluation techniques,and increased use of microprogramming for some programming system functions. | Rosen, S..Klanguages, operating systems, programmingsystems, multiprogramming, history.C1.2 4.22 4.32
2318 | The Role of Computer System Models in Performance Evaluation | Models constitute a useful means of investigatingcomputer system performance.  This paper examines the interrelationships between models and othermethods for evaluating the performance of computer systems and establishes circumstances underwhich the use of a model is appropriate. | Kimbleton, S. R..Kmodeling, evaluation, performance, analytic-models,simulation-models, system-models.C2.43 2.44 6.2 8.3
2319 | Operating System Performance | An overview of the current and future positionswith respect to operating system performance is given.  While a great deal of information and a largenumber of models for subsystems have been developed, gaps still exist in out knowledge.  Because of thesevere interactions between the various subsystems of an operating system, an overall model of the totalsystem must be developed to be able to analyze and design the performance aspects of an operating systemalthough such total system designs are exceptional today, it is projected that they will become increasinglymore common and necessary in the near future.  Such a design philosophy will clearly have a severe impacton the way we go about modularizing operating and computer systems. | Lynch, W. C..Kcomputer system, operating system, performanceevaluation, performance measurement, measurement, techniques, modularity, layering, structured programming,paging, virtual memory, input/output, disk storage facility, drum storage facility, sector queueing.C4.30 6.20
2320 | Structured Multiprogramming | This paper presents a proposal for structuredrepresentation of multiprogramming in a high level language.  The notation used explicitly associatesa data structure shared by concurrent processes with operations defined on it.  This clarifies the meaningof programs and permits a large class of time-dependent errors to be caught at compile time.  A combination ofcritical regions and event variables enables the programmer to control scheduling of resources amongcompeting processes to any degree desired.  These concepts are sufficiently safe to use not only withinoperating systems but also within user programs. | Hansen, P. B..Kstructured multiprogramming, programming languages,operating systems, concurrent processes, shared data, mutual exclusion, critical regions, processcommunication, synchronizing events..C4.2 4.3
2321 | On the Interface Between Computers and Data Communications Systems | Future systems that combine computers, digitalterminals, and communications equipment present design optimization problems that require reconsiderationof the traditional functional responsibilities of the respective subsystems.  Several "standard" interfaces,by means of which computers and digital terminals connect to the communications systems willbe required.  When specifying these interfaces, consideration must be given to problems of coordination,synchronization, error control, signaling, stream multiplexing, and switch control, in addition to minimizingthe technological interdependence of specific subsystem designs.  A focus on some of the problems isobtained in a discussion of a detailed specification for a particular computer-communications system interface. | Fraser, A. G..Kcommunications, standard interface communicationsprotocol, virtual channel, multiplexed input/output, coordination of input/output.C3.81 6.0 6.35
2322 | A View of computer Architecture | An attempt is made to predict the developmentsof the next 25 years in the field of computer architecture.  Standardized, inexpensive microcomputerson a single chip are predicted.  These will be used extensively to provide logical functions for noncomputationaldevices and incidentally for the design of superscale computers.  | Foster, C. C..Kcomputer architecture, projection, microcomputers,computer design, computer organization.C1.2 2.1 6.0 6.2
2323 | Toward a General Theory of Special Functions | A list of a number of natural developmentsfor the field of algebraic manipulation is given.  Then the prospects for a general theory of functionsdefined by ordinary differential equations are discussed.  The claim is made that recent developmentsin mathematics indicate that it should be possible to algorithmically generate many properties of solutionsto differential equations.  Such a theory is preferable to a less general effort to make algebraicmanipulation systems knowledgeable about the usual special functions (e.g. exponential, hypergeometric). | Moses, J..Kalgebraic manipulation, special functions, algebraicsimplification, symbolic integration, algebraic geometry, differential algebra.C1.50 3.15 5.19 5.9
2324 | Management Science: A View from Nonlinear Programming | A brief history of integer and continuousnonlinear programming is presented as well as the current obstacles to practical use of these mathematicalprogramming techniques.  It is forecast that the useful contributions to nonlinear programming actuallymade in the next few years are more likely to be consolidations than theoretical breakthroughs.  Thesecontributions are likely to be the documentation of standard test problems, construction of user orientedsoftware, and comparisons of currently known algorithms to demonstrate which techniques are best for specific problems. | Shanno, D. F.Weil, R. L..Kinteger programming, linear programming, mathematicalprogramming, nonlinear programming, quadratic programming, management science, operations research, algorithms.C5.41 8.3
2325 | Numerical Mathematics and Computer Science | Numerical mathematics is viewed as the analysisof continuous algorithms.  Four of the components of numerical mathematics are discussed.  These are: foundations(finite precision number systems, computational complexity), synthesis and analysis of algorithms,analysis of error, programs and program libraries. | Traub, J. F..Knumerical mathematics, computer science, mathematicsof computation, algorithms, continuous algorithms.C1.3 5.0 5.1 5.25
2326 | Fix point Approach to the Theory of Computation  | Following the fix point theory of Scott, thesemantics of computer programs are defined in terms of the least fix points of recursive programs.  Thisallows not only the justification of all existing verification techniques, but also their extension to thehandling, in a uniform manner of various properties of computer programs, including correctness, termination, and equivalence. | Manna, Z.Vuillemin, J..Kverification techniques, semantics of programminglanguages, least fix points, recursive programs, computational induction.C5.23 5.24
2327 | Toward an Automata Theory of Brains | A source of ideas for automata theory-the studyof the brain-has been pushed aside in mathematical development of the theory.  This paper suggests the waysin which automata theory might evolve over the next 25 years if it is to contribute to an understandingof how the brain processes information. | Arbib, M. A..Kautomata theory, brain theory, network complexity,resolution of redundancy of potential command, frog visual system, reticular formation mode selection.C3.36 3.65 5.22
2328 | Individualizing Instruction in a Generative CAI Tutor | Koffman, E. B..Kcomputer-assisted instruction, generative CAL, adaptive instruction.C3.32 3.51 3.62
2329 | Computer Science-A Vicious Circle | Kandel, A..Keducation, computer engineering, computerscience curriculum, systems design.C1.52 6.0
2330 | Calculation of Fourier Integrals (Algorithm R418) | Einarsson, B..Kquadrature, Filon quadrature, integration, Filon integration,Fourier coefficients, Fourier integrals, Fourier series, spline,spline approximation, splinequadrature, extrapolation, Richardson extrapolation.C5.16
2331 | An Integer Programming Problem (Algorithm R397) | Johnson, S. C.Kernighan, B. W..Kinteger programming, change-making problem.C5.41
2332 | Special Series Summation with Arbitrary Precision (Algorithm R393) | Sale, A. H. J..Kfunction evaluation, series summation, approximation.C5.12 5.13
2333 | Random Vectors Uniform is Solid Angle (Algorithm R381) | Schrack, G. F..Krandom vector generator, points uniform on sphere,spherically symmetric probability distribution.C5.5
2334 | General Random Number Generator (Algorithm R370) | Proll, L. G..Krandom number generator, probability density function,transformation, cumulative distribution function.C5.13 5.5
2335 | Eigenvalues and Eigenvectors of a Real General matrix (Algorithm R343) | Niessner, H..Keigenvalues, eigenvectors, QR-algorithm,nonsymmetric matrices, general matrices .C5.14
2336 | Complex Error Function (Algorithm C363) | Kolbig, K. S..Kerror function for complex argument, Voigt function,special functions, function evaluation.C5.12
2337 | A Sorting Problem and Its Complexity | A technique for proving min-max norms of sortingalgorithms is given.  One new algorithm for finding the minimum and maximum elements of a set withfewest comparisons is proved optimal with this technique. | Pohl, I..Ksorting, computational complexity, computational combinatorics.C5.29 5.31
2338 | A Starting Method for Solving Nonlinear VolterraIntegral Equations of the Second Kind | A fourth-order starting method is given forVolterra integral equations of the second kind and numerical examples are presented. | Iguchi, K..Kalgorithm, Volterra integral equations, starting method.C5.18
2339 | Computer-Assigned Codes from Verbal Responses | It is often desirable to convert verbal responsesto multidigit codes. This conversion is generally accomplished by clerk-coders.  A study was conducted to testthe feasibility of translating verbal descriptions to numerical codes in a computer program.  Primary emphasiswas placed on computerized construction of a reference file of verbal descriptions for use by theprogram.  The results of the study clearly show that such procedures are feasible. | O'Reagan, R. T..Kverbal responses, computer coding, reference list,historical response patterns, word strings, concept translation, word coding.C3.30 3.42 3.63 3.66 3.71 3.74 3.75 5.6
2340 | A Boolean Matrix Method for the Computationof Linear Precedence Functions | A modified version of Bell's Boolean matrixmethod for the computation of linear precedence functions associated with a conflict-free matrix ofprecedence relations is given.  This algorithm not only detects when the precedence functions do not  exist,but also provides an indication of why they do not exist, so that corrective action can be takenif possible.  Necessary and sufficient conditions for the existence of precedence functions are given. The use of Boolean matrices to prove the existence of precedence functions associated with classes of conflict-freegrammars is illustrated through an example. | Martin, D. F..Kprecedence grammars, context-free parsing.C4.12
2341 | Blocks-A New Data type for SNOBOL4 | A new data type, called a block, has been implementedfor SNOBOL4.  A block is a three-dimensional aggregate of characters in the form of a right parallelepiped,best thought of as a three-dimensional extension to a string.  (The third dimension is used foroverstriking.)  Blocks may be printed, concatenated in any of three dimensions, and merged on the basisof program-defined connection points.  Some blocks adapt in size and shape to their environment.  Blocksand their operations are mainly used for composing printable output.  A variety of graphical problems (includingflowcharting, bargraphs, logic diagrams, mathematical-equation formation, and text justificationand preparation) have been programmed on a printer in what appears to be an easy and natural way.  In additionto these somewhat specialized applications, blocks appear to be a good general purpose device-independentoutput formation mechanism especially suitable for nonnumerical work.  The concept of a block is largelylanguage independent.That is, blocks require little in the way of specialized syntax and could readilybe absorbed into the external structure of most programming languages. | Gimpel, J. F..Kcharacter manipulation, output formatting, stringprocessing, graphics, nonnumerical programming, SNOBOL4, data types, two-dimensional mathematics, test processing, flowcharting.C4.22 4.41
2342 | Interference Between Communicating Parallel Processes | Various kinds of interference between communicatingparallel processes have been examined by Dijkstra, Knuth, and others.  Solutions have been givenfor the mutual exclusion problem and associated subproblems, in the form of parallel programs, and informalproofs of correctness have been given for these solutions.  In this paper a system of parallelprocesses is regarded as a machine which proceeds from one state S (i.e. a collection of pertinent datavalues and process configurations) to a next state S' in accordance with a transition rule S --> S'.  Aset of such rules yields sequences of states, which dictate the system's behavior.  The mutual exclusion problemand the associated subproblems are formulated as questions of inclusion between sets of states, orof the existence of certain sequences.  A mechanical proof procedure is shown, which will either verify (provethe correctness of ) or discredit (prove the incorrectness of) an attempted solution, with respectto any of the interference properties.  It is shown how to calculate transition rules from the "partialrules" by which the individual processes operate.  The formation of partial rules and the calculation oftransition rules are both applicable to hardware processes as well as to software processes, andsymmetry between processes is not required. | Gilbert, P.Chandler, W. J..Kconcurrent programming control, cooperating processes,formal programs, interference, mutual exclusion, operating systems, parallel processes.C4.0 4.10 4.30 4.32 4.42 5.24 6.20
2343 | A Proposal To Establish a Pseudo Virtual Memory via Writable Overlays | Many computer systems solve executable storagesize problems for large programs by using overlays.  However, it appears that no one overlay scheme containsa well-balanced combination of the most useful capabilities which are found in various existing techniques. A proposal is presented which utilizes several of the best capabilities from existing schemesand is complemented by several additional features, e.g. writable overlays.  The writable overlay capabilityprovides a virtual memory effect, although the programmer may still be required to design the overlayconfiguration.  Since overlay structuring is a complex task, several tools (including a graphic display)are included in the proposal in order to aid the programmer in the design.  The content of overlaysis briefly discussed, and it is noted that many of the details of the final overlay configuration may be decided after the fact. | Spacek, T. R..Koverlay, overlay structure, segment, segmentation,folding, paging, linkage editor, collector, loader, virtual memory.C4.10 4.12 4.39 4.49
2344 | On the Optimization of Performance of Time-Sharing Systems by Simulation | A simulation model of a time-sharing systemwith a finite noncontiguous store and an infinite auxiliary store is used to study the variation of systemparameters such as store size, number of jobs allowed to execute simultaneously, job-scheduling algorithm,etc.  The effects of these variations on a measure of system performance is used to ascertain whichof the parameters controllable by the job-scheduling algorithm, including the scheduling itself, require optimization,and which of the parameters not normally controllable by the scheduling algorithm have a markedeffect on system performance.  System performance is based upon the mean cost of delay to all jobs processed. It is shown that significant improvements in the measure of system performance can be obtained byusing variable time-slice techniques and by selecting the optimum round-robin cycle time.  It appears that thesefeatures would benefit from optimization whereas other parameters controllable by the scheduling algorithmaffect system performance in a predictable manner and would not benefit from optimization.  Featuresnot normally under the control of the scheduling algorithm can also have a marked effect on the measureof performance; in particular, supervisor overheads, the size of the store, and the speed of the CPU.  A comparisonis made between the results of the simulation model and two analytical equations for quantum-orientednonpreemptive time-sharing systems.  The comparison is found to be very favorable. | Blatny, J.Clark, S. R.Rourke, T. A..Ktime-sharing, simulation studies, optimization,measure of performance, scheduling algorithms.C3.80 4.30 4.32
2345 | Curriculum Recommendations for GraduateProfessional Programs in Information Systems | The need for education related to informationsystems in organizations is discussed, and a curriculum is proposed for graduate professional programsin universities, at the Master's level.  Material necessary for such programs is identified, and coursesincorporating it are specified.  Detailed course descriptions are presented, program organization discussed,and implementation questions considered. | Ashenhurst, R. L..Keducation, management systems, systems analysis,management information systems, information systems development, information analysis, system design.C1.52 3.51
2346 | Hu-Tucker Minimum Redundancy AlphabeticCoding Method [Z] (Algorithm A428) | Yohe, J. M..Kinformation theory, coding theory, Hu-Tuckermethod, minimum redundancy coding.C5.6
2347 | Fourier Cosine Integral [D1] (Algorithm A427) | Linz, P..Knumerical integration, quadrature, adaptive quadrature,Filon quadrature, Fourier coefficients, Fourier integrals.C5.16
2348 | Merge Sort Algorithm [M1] (Algorithm A426) | Bron, C..Ksort, merge.C5.31
2349 | Generation of Random Correlated Normal Variables [G5] (Algorithm A425) | Hurst, R. L.Knop, R. E..Krandom number, normal density, normal distribution,Gaussian density, Gaussian distribution, simulation, Monte Carlo.C5.5
2350 | Clenshaw-Curtis Quadrature [D1] (Algorithm A424) | Gentleman, W.M..Kquadrature, Chebyshev series, cosine transform, fast Fourier transform.C5.1
2351 | The Optimality of Winograd's Formula | Harter, R..Kinner product, Winograd's formula.C5.14
2352 | Minimax Nonlinear Approximation by Approximation on Subsets | Dunham, C. B..Kminimax approximation, nonlinear approximation, subset.C5.13
2353 | Fast Finite-Difference Solution of Biharmonic Problems | Setting the Reynolds number equal to zero, ina method for solving the Navier-Strokes equations numerically, results in a fast numerical method forbiharmonic problems.  The equation is treated as a system of two second order equations and a simplesmoothing process is essential for convergence.  An application is made to a crack-type problem. | Greenspan, D.Schultz, D..Knumerical analysis, partial differential equations,biharmonic equation, boundary value problem.C5.17
2354 | Implementing Clenshaw-Curtis Quadrature,II Computing the Cosine Transformation | In a companion paper to this, "I Methodologyand Experiences," the automatic Clenshaw-Curtis quadrature scheme was described and how each quadratureformula used in the scheme requires a cosine transformation of the integrand values was shown. The high cost of these cosine transformations has been a serious drawback in using Clenshaw-Curtis quadrature. Two other problems related to the cosine transformation have also been trouble some.  First, theconventional computation of the cosine transformation by recurrence relation is numerically unstable, particularlyat the low frequencies which have the largest effect upon the integral.  Second, in case the automaticscheme should require refinement of the sampling, storage is required to save the integrand values afterthe cosine transformation is computed.  This second part of the paper shows how the cosine transformation canbe computed by a modification of the fast Fourier transform and all three problems overcome.  The modificationis also applicable in other circumstances requiring cosine or sine transformations, such as polynomialinterpolation through the Chebyshev points. | Gentleman, W. M..Kfast Fourier transformation, cosine transformation,Clenshaw-Curtis quadrature, Chebyshev series.C5.13 5.14 5.16
2355 | Implementing Clenshaw-Curtis quadrature, I Methodology and Experience | Clenshaw-Curtis quadrature is a particularlyimportant automatic quadrature scheme for a variety of reasons, especially the high accuracy obtained fromrelatively few integrand values.  However, it has received little use because it requires the computationof a cosine transformation and the arithmetic cost of this has been prohibitive.  This paper is intwo parts; a companion paper, "II Computing the Cosine Transformation," shows that this objection canbe overcome by computing the cosine transformation by a modification of the fast Fourier transform algorithm. This first part discusses the strategy and various error estimates, and summarizes experiencewith a particular implementation of the scheme. | Gentleman, W. M..KClenshaw Curtis, numerical integration, automaticquadrature, error estimates, Chebyshev series.C5.16
2356 | A Technique for Software Module Specification with Examples | This paper presents an approach to writingspecifications for parts of software systems.  The main goal is to provide specifications sufficientlyprecise and complete that other pieces of software can be written to interact with the piece specified withoutadditional information.  The secondary goal is to include in the specification no more informationthan necessary to meet the first goal.  The technique is illustrated by means of a variety of examples from a tutorial system. | Parnas, D. L..Ksoftware, specification, modules, software engineering, software design.C4.0 4.29 4.9
2357 | MUX, a Simple Approach to On-Line Computing | An on-line system operating as part of a normalbatch system for the CDC 6600 computer is described.  The system, which required one man-year for initialsoftware implementation, although basically simple,provides the necessary elements to input and modify files,submit them for batch execution, and provide results at the user's terminal.  A multiplexer designedand developed as part of the project cost one man-year for design and checkout, and $16,000 for partsand fabrication.  All aspects of the system are described, including design criteria, implementation,cost, overhead, and user reactions. | Christman, R. D..Ktime-sharing, remote computing, on-line access,on-line computing, remote file manager, real time, multiplexer, implementation effort, operating overhead,user reactions, remote terminals, operating system.C3.79 3.89 4.39 4.41
2358 | The Multics Virtual Memory: Concepts and Design | As experience with use of on-line operatingsystems has grown, the need to share information among system users has become increasingly apparent. Many contemporary systems permit some degree of sharing.  Usually, sharing is accomplished by allowingseveral users to share data via input and output of information stored in files kept in secondary storage. Through the use of segmentation, however, Multics provides direct hardware addressing by user andsystem programs of all information, independent of its physical storage location.  Information is storedin segments each of which is potentially sharable and carries its own independent attributes of size and accessprivilege.  Here, the design and implementation considerations of segmentation and sharing in Multicsare first discussed under the assumption that all information resides in large, segmented main memory. Since the size of main memory on contemporary systems is rather limited, it is then shown how the Multicssoftware achieves the effect of a large segmented main memory through the use of the Honeywell645 segmentation and paging hardware. | Bensoussan, A.Clingen, C. T.Daley, R. C..Koperating system, Multics, virtual memory, segmentation,information sharing, paging, memory management, memory hierarchy.C4.30 4.31 4.32
2359 | An Improved Index Sequential Access Method Using Hashed Overflow | The Index Sequential Access Method (ISAM) isone of the most important file management systems used with moveable head disk devices.  This study investigatesthe use of an unconventional method of treating overflow records.  The method is to use hashingtechniques to allocate space for such records.  If certain conditions are satisfied, this is superiorto the conventional ISAM method of chaining the overflow records via linked list techniques.  These conditions are:long overflow chains with significant overflow; lack of tight disk space constraints; recordkeys which are small compared to the total record size; and significant use of the file in the index as opposedto the sequential mode.  Using hashed overflow, the time to locate a record is dependent not on the totalvolume of overflow records as in conventional ISAM, but on the percentage use of space dedicated to overflow records. | Mullin, J. K..KISAM, index sequential, hashing, scatterstorage, disk, cylinder, overflow.C3.72 3.73 3.74
2360 | A Comment on the Double-Chained Tree | Hu, T. C..Kfile searching, double-chained tree, binary search tree.C3.73 3.74 5.32 5.6
2361 | A Note on Cheney's Nonrecursive List-Compacting Algorithm | Walden, D. C..Klist compacting, garbage collection.C4.19 4.49
2362 | Linear Equation Solver [F4] (Algorithm A423) | Moler, C. B..Kmatrix algorithms, linear equations, Fortran,paged memory, virtual memory, array processing.C4.22 4.32 5.14
2363 | Minimal Spanning Tree [H] (Algorithm A422) | Whitney, V. K. M..Kspanning tree, minimal spanning tree, maximal spanning tree.C5.32
2364 | Complex Gamma Function with Error Control [S14] (Algorithm A421) | Kuki, H..Kcomplex gamma function, gamma function, complexlog gamma function, loggamma function, round-off error control, inherent error control, run-time errorestimates, error estimates, special functions.C4.9 5.11 5.12
2365 | Matrix Computations with Fortran and Paging | The efficiency of conventional Fortran programsfor matrix computations can often be improved by reversing the order of nested loops.  Such modificationsproduce modest savings in many common situations and very significant savings for large problems rununder an operating system which uses paging. | Moler, C. B..Kmatrix algorithms, linear equations, Fortran,paged memory, virtual memory, array processing.C4.22 4.32 5.14
2366 | Complex Gamma Function with Error Control | An algorithm to compute the gamma function andlog gamma function of a complex variable is presented.  The standard algorithm is modified in several respectsto insure the continuity of the function value and to reduce accumulation of round-off errors.  Inaddition to computation of function values, this algorithm includes an object-time estimation of round-offerrors.  Experimental data with regard to the effectiveness of this error control are presented. A Fortran program for the algorithm appears in the algorithms section of this issue. | Kuki, H..Kcomplex gamma function, gamma function, complexlog gamma function, loggamma function, round-off error control, inherent error control, run-time error estimates, error estimates.C5.11 5.12
2367 | Computers and Society: A Proposed Course for Computer Scientists | The purpose of this paper is to describe a courseconcerned with both the effects of computers on society and the responsibilities of computer scientiststo society.  The impact of computers is divided into five components: political, economic, cultural, social,and moral; the main part of the paper defines each component and presents examples of the relevantissues.  In the remaining portions the possible formats for such a course are discussed, a topic by topicoutline is given, and a selected set of references is listed.  It is hoped that the proposal will makeit easier to initiate courses on this subject. | Horowitz, E.Morgan, H. L.Shaw, A. C..Kcomputers and society, social implications, course proposal.C1.0 1.52 2.1
2368 | An Implemented Graph Algorithm for Winning Shannon Switching games | In this tutorial paper a computer programwhich wins Shannon Switching Games is described. Since these games are played on graphs, the programis a good example of the implementation of graph algorithms.  The two players in a Shannon Switching Game,CONNECT and CUT, have nonsimilar goals.  Either CONNECT, CUT, or the player moving first is guaranteedthe existence of a winning strategy.  The simple strategy explained in this paper is valid in all threecases.  In fact, the major routines never need to know whether the computer is CONNECT or CUT. | Chase, S. M..Kgraph algorithms, graph processing, Shannon SwitchingGames, game playing, graph theory, positional games, demonstration programs, game theory, spinning trees.C3.69 5.32
2369 | Hidden Lines Elimination for a Rotating Object | A method is presented of determining whichparts of three-dimensional objects are visible and which are invisible when the objects are rotated aboutsome axis.  This paper describes a polygon comparison scheme in which the relationships of two polygons canbe classified into tree types, and also discusses how the relationship is changed for each pair of polygonsunder rotation about some axis.  A rotation table is defined for each pair of polygons, which remainsfixed as long as rotation is about one axis and provides a means of rapidly determining the visibleand hidden line relationship between two polygons.  Additional work must be done to extend this approachto simultaneous rotation about several axes. | Matsushita, Y..Khidden line problem, display programming, computergraphics, displays, graphics, computer drawn picture.C4.40 4.41 4.49
2370 | An Experimental Laboratory for Pattern Recognition and Signal Processing | An interactive computer-controlled scanningand display system has been in operation at the IBM Thomas J. Watson Research Center for three years. The system includes two flying-spot scanners and a TV camera specially interfaced to a process controldigital computer, dot-mode and vector displays, analog input and output facilities, and a variety ofother experimental equipment.  The system design and programming support are described and typical applicationsin scanner control, optical character recognition,and image processing are presented. | Herbst, N. M.Will, P. M..Kscanners, pseudorandom displays, interactiveterminal, image processing, pattern recognition.C4.41 6.35
2371 | A System for Interprocess Communicationin a Resource Sharing Computer Network | A system of communication between processes in atime-sharing system is described and the communication system is extended so that it may be used between processesdistributed throughout a computer network.  The hypothetical application of the system to an existing network is discussed. | Walden, D. C..Kinterprocess communication, time-sharing,computer networks, resource sharing.C3.81 4.39 4.82 4.9
2372 | On the Implementation of Security Measures in Information Systems | The security of an information system may berepresented by a model matrix whose elements are decision rules and whose row and column indices areusers and data items respectively.  A set of four functions is used to access this matrix at translationand execution time.  Distinguishing between data dependent and data independent decision rules enablesone to perform much of the checking of security only once at translation time rather than repeatedlyat execution time.  The model is used to explain security features of several existing systems, and servesas a framework for a proposal for general security system implementation within today's languages and operating systems. | Conway, R. W.Maxwell, W. L.Morgan, H. L..Ksecurity, privacy, access control confidentiality,operating systems, access management, data banks, management information systems.C3.50 3.73 4.12 4.22 4.39
2373 | Properties of the Working-Set Model | A program's working set W(t,T) at time t isthe set of distinct pages among the T most recently referenced pages.  Relations between the average working-set size,the missing-page rate, and the interreference-interval distribution may be derived both from time-average definitionsand from ensemble-average (statistical) definitions. An efficient algorithm for estimating thesequantities is given.  The relation to LRU (least recently used) paging is characterized.  The independent-referencemodel, in which page references are statistically independent, is used to assess the effectsto interpage dependencies on working-set size observations. Under general assumptions, working-setsize is shown to be normally distributed. | Denning, P. J.Schwartz, S. C..Kworking-set model, paging, paging algorithms,program behavior, program modeling.C4.3
2374 | A Study of Storage Partitioning Using a Mathematical Model of Locality | Both fixed and dynamic storage partitioningprocedures are examined for use in multiprogramming systems.  The storage requirement of programs is modeledas a stationary Gaussian process.  Experiments justifying this model are described.  By means of thismodel dynamic storage partitioning is shown to provide substantial increases in storage utilizationand operating efficiency over fixed partitioning.  | Coffman Jr., E. G.Ryan Jr., T. A..Kstorage partitioning, memory management, dynamicstorage allocation, space sharing, multiprogrammed storage, working-sets, program behavior models, mathematical modeling.C4.32 4.39
2375 | A Comparative Analysis of Disk Scheduling Policies | Five well-known scheduling policies for movablehead disks are compared using the performance criteria of expected seek time (system oriented)and expectedwaiting time (individual I/O request oriented).  Both analytical and simulation results are obtained. The variance of waiting time is introduced as another meaningful measure of performance, showing possiblediscrimination against individual requests.  Then the choice of a utility function to measure totalperformance including system oriented and individual request oriented measures is described.  Such a functionallows one to differentiate among the scheduling policies over a wide range of input loading conditions. The selection and implementation of a maximum performance two-policy algorithm are discussed. | Teorey, T. J.Pinkerton, T. B..Kaccess time, analytical models, auxiliary storage,direct access storage, disk analysis, disk scheduling, performance criteria, peripheral memory devices, real-timesystems, response time, rotational delay, scheduling policies, seek time, simulation, storageunits, time-sharing systems, waiting time.C3.72 4.32 6.34
2376 | Synchronization of Communicating Processes | Formalization of a well-defined synchronizationmechanism can be used to prove that concurrently running processes of a system communicate correctly. This is demonstrated for a system consisting of many sending processes which deposit messages in a bufferand many receiving processes which remove messages from that buffer.  The formal description of the synchronizationmechanism makes it very easy to prove that the buffer will neither overflow nor underflow,that senders and receivers will never operate on the same message frame in the buffer nor will they run into a deadlock.  | Habermann, A. N..Kparallel programming, multiprogramming, program correctness,process communication, process scheduling.C4.30 4.32 4.39 4.9
2377 | A Hardware Architecture for Implementing Protection Rings | Protection of computations and informationis an important aspect of a computer utility.  In a system which uses segmentation as a memory addressingscheme, protection can be achieved in part by associating concentric rings of decreasing access privilegewith a computation.  This paper describes hardware processor mechanisms for implementing these ringsof protection.  The mechanisms for implementing these rings of protection. The mechanisms allow cross-ringcalls and subsequent returns to occur without trapping to the supervisor.  Automatic hardware validationof references across ring boundaries is also performed.  Thus, a call by a user procedure to a protectedsubsystem (including the supervisor) is identical to a call to a companion user procedure.  The mechanismsof passing and referencing arguments are the same in both cases as well. | Schroeder, M. D.Saltzer, J. H..Kprotection, protection rings, protection hardware,access control, hardware access control, computer utility, time-sharing, shared information, segmentation, virtual memory, Multics.C4.32 6.21
2378 | An Operating System Based on the Concept of a Supervisory Computer | An operating system which is organized as asmall supervisor and a set of independent processes are described.  The supervisor handles I/O with externaldevices-the file and directory system-schedules active processes and manages memory, handle errors, andprovides a small set of primitive functions which it will execute for a process.  A process is able tospecify a request for a complicated action on the part of the supervisor (usually a wait on the occurrenceof a compound event in the system) by combining these primitives into a "supervisory computer program." The part of the supervisor which executes these programs may be viewed as a software implemented "supervisorycomputer."  The paper develops these concepts in detail, outlines the remainder of the supervisor, anddiscusses some of the advantages of this approach. | Gaines, R. S..Koperating systems, supervisors, multiprogramming,time-sharing, cooperating processes.C4.30 4.31 4.32
2379 | The Design of the Venus Operating System | The Venus Operating System is an experimentalmultiprogramming system which supports five or six concurrent users on a small computer.  The system wasproduced to test the effect of machine architecture on complexity of software.  The system is defined bya combination of microprograms and software.  The microprogram defines a machine with some unusual architecturalfeature; the software exploits these features to define the operating system as simply as possible. In this paper the development of the system is described, with particular emphasis on the principles which guided the design. | Liskov, B. H..Koperating systems, system design, levels of abstraction,machine architecture, microprogramming, segments, semaphores, multiprogramming, virtual machines,processes, process communication, virtual devices, data sharing, resource management, deadlock.C4.30 4.32 4.41 6.21
2380 | TENEX, a Paged Time Sharing System for the PDP-10 | TENEX is a new time sharing system implementedon DEC PDP-10 augmented by special paging hardware developed at BBN.  This report specifies a set of goalswhich are important for any time sharing system.  It describes how the TENEX design and implementationachieve these goals.  These include specifications for a powerful multiprocess large memory virtual machine,intimate terminal interaction, comprehensive uniform file and I/O capabilities, and clean flexiblesystem structure.  Although the implementation described here required some compromise to achieve asystem operational within six months of hardware checkout, TENEX has met its major goals and providedreliable service at several sites and through the ARPA network. | Bobrow, D. G.Burchfiel, J. D.Murphy, D. L.Tomlinson, R. S.Beranek, B..KTENEX, paging, virtual machines, time sharingsystem, scheduling algorithm, process structure, PDP-10.C2.44 4.32 4.39 4.42
2381 | Average Binary Search Length for Dense Ordered Lists (Corrigendum) | Flores, I.Madpis, G.
2382 | Reconstruction of Pictures from Their Projections (Corrigendum) | Gordon, R.Herman, G. T.
2383 | Music and Computer Composition | The problem discussed is that of simulating humancomposition of Western popular music by computer and some relevant theories of music and harmony are given. Problems with this kind of program and several schemes that are known not to work are discussed.  Severalprevious computer compositions are discussed, including the ILLIAC Suite.  A program to generate shortmelody fragments was written to simulate some of the aspects of human composition.  Five samples ofits output are presented and discussed.  It was discovered that although the fragments show many ofthe characteristics of popular melodies, they have a strangely alien sound.  It is theorized that thisis because the relevant probabilities which would discriminate against unfamiliar sequences were not used. | Moorer, J. A..Kartificial intelligence, heuristic programming,models of cognitive processes, computer music, computer composition, music theory.C3.44 3.65
2384 | Hidden-Line Plotting Program [J6] (Algorithm A420) | Williamson, H. .Khidden-line plot, surface plot .C4.9
2385 | Zeros of a Complex Polynomial [C2] (Algorithm A419) | Jenkins, M. A.Traub, J. F..Kroots, roots of a polynomial, zeros of a polynomial.C5.15
2386 | Dynamic Microprogramming: Processor Organizationand Programming (Corrigendum) | Tucker, A. B.
2387 | Maximum Computing Power and Cost Factors in the Centralization Problem | A simple analysis of some computer-economic factorsinvolved in comparing multimachine installations versus large single machine installations is given, anda mathematical model is derived to assist policy decisions.  | Oldehoeft, A. E.Halstead, M. H..Kcentralization, decentralization, economics ofcomputers, computer management, economies of scale.C2.41
2388 | Optimizing Binary Trees Grown With a Sorting Algorithm | Items can be retrieved from binary trees grownwith a form of the Algorithm Quicksort in an average time proportional to log n, where n is the numberof items in the tree.  The binary trees grown by this algorithm sometimes have some branches longerthan others; therefore, it is possible to reduce the average retrieval time by restructuring the tree tomake the branches as uniform in length as possible.  An algorithm to do this is presented.  The use of thisalgorithm is discussed, and it is compared with another which restructures the tree after each new item is added. | Martin, W. A.Ness, D. N..Kretrieving information from binary trees, globaland local optimization, sorting, recursion.C3.74 5.31
2389 | Preliminary Report on a System for General Space Planning | A computer language and a set of programs withinthat language are described which allow the formulating and solving of a class of space planningproblems.  The language is an extension of Algol and includes means to represent spaces and objects, to manipulatethem, and to test the resulting arrangements according to a variety of constraints.  The algorithmsused to solve problems expressed in this language rely on heuristic programming.  Both the languageand the search algorithms are detailed. | Eastman, C. M..Kautomated design, architecture, heuristic programs, space planning.C3.20 3.40 3.64 3.66
2390 | A Proposal for a Computer-Based Interactive Scientific Community | Because of the problems created by the explosionof papers in the mathematical sciences and the drawbacks that this places on research, it is suggestedthat a tree of all mathematical results and terminology be maintained in a multiterminal computer system. Users of the system can store in the computer an updated file of their current knowledge, and on selectinga paper to read, they can obtain from the computer the minimum subtree of theorems required to bringthem from what they already know to the background knowledge which the paper assumes.  Under certain conditions,means are also provided for the contribution of useful comments by the readers of a work and for interactionbetween commentators and with the author.  This paper describes how the system can be organizedand the role required of readers, writers, and commentators.  | Pager, D..Kinteractive system, organization of scientific community,readers, writers, commentators, computer utility, information retrieval, trees, data structures.C1.0 1.1 1.59 2.10 3.15 3.32 3.50 3.51 3.70 3.71 3.74 3.9
2391 | Unitary Symmetric Polynomials [Z] (Algorithm R391) | Schrack, G. F..Ksymmetric polynomials, elementary symmetric polynomials,unitary symmetric polynomials, polynomial synthesis, reverse Horner scheme, reversesynthetic division, binomial coefficients.C5.11 5.30 5.5
2392 | In-Situ Transposition of a Rectangular Matrix [F1] (Algorithm C380) | Macleod, I. D. G..Krectangular matrix, transpose.C5.14
2393 | Calculation of Fourier Integrals [D1] (Algorithm A418) | Einarsson, B..Kquadrature, Filon quadrature, integration, Filon integration,Fourier coefficients, Fourier integrals, Fourier series, spline, spline approximation, splinequadrature, extrapolation, Richardson extrapolation.C5.16
2394 | Ordering +-f(+-f(+-f(...+-f(x)..))) When f(x) Is Positive Monotonic | Salzer, H. E..Kordering, storage, retrieval, positive functions,monotonic functions, increasing functions, decreasing function, binary system, Chebyshev zeros, square rots, continued fractions.C5.40
2395 | Quadratic Programming for Nonlinear Regression | A quadratic programming algorithm is describedfor use with the magnified diagonal method of nonlinear regression with linear constraints.  Theregression method is published in JACM, July 1970. | Shrager, R. I..Knonlinear equations, nonlinear regression, nonlinearprogramming, quadratic programming, least squares, inequality, constraints, iteration.C5.15 5.41
2396 | MUSE: A Model To Understand Simple English | MUSE is a computer model for natural languageprocessing, based on a semantic memory network like that of Quillian's TLC.  MUSE, from a Model to UnderstandSimple English, processes English sentences of unrestricted content but somewhat restricted format. The model first applies syntactic analysis to eliminate some interpretations and then employs a simplifiedsemantic intersection procedure to find a valid interpretation of the input.  While the semanticprocessing is similar to TLC's, the syntactic component includes the early use of parse trees and specialpurpose rules.  The "relational triple" notation used during interpretation of input is compatible with MUSE'smemory structures, allowing direct verification of familiar concepts and the addition of new ones. MUSE also has a repertoire of actions, which range from editing and reporting the contents of its ownmemory to an indirect form of question answering.  Examples are presented to demonstrate how the model interpretstext, resolves ambiguities, adds information to memory, generalizes from examples and performs various actions. | McCalla, G. I.Sampson, J. R..Knatural language processing, semantic memory, textcomprehension, question answering, artificial intelligence, human memory simulation.C3.36 3.42 3.62 3.65 3.74
2397 | Optimizing the Polyphase Sort (Corrigendum) | Shell, D. L.
2398 | Teacher/Student Authored CAI Using the NEWBASIC System | The pedagogical advantages of a general purposeinteractive system called NEWBASIC/CATALYST are discussed.  NEWBASIC/CATALYSTincorporates an advancedimplementation of BASIC, system-level interactive features, and a general capability for extension throughuser oriented function attachment,  Application of this last feature to provide a flexible CAI scan capabilityis illustrated.  An example of interaction at the system level shows how students can mix the advantagesof independent or "solo" mode computing with those of guided or "dual" mode interaction.  Preliminaryexperience with the system in an urban secondary school setting is discussed. | Dwyer, T. A..KCAI, BASIC, CATALYST, NEWBASIC, education, computersin education, extended languages, interactive systems.C1.50 1.51 3.32 4.22
2399 | A CRT Editing System | A test-editing and manipulation program is described. The program operates from low-cost cathode-ray tube entry and display stations with keyboard and 13function buttons. Applications, potential economy of operation, and some aspects of implementation are discussed. | Irons, E. T.Djorup, F. M..Kediting, text, cathode-ray tube entry display, time-sharing.C3.7 4.3
2400 | Use of the Hough Transformation ToDetect Lines and Curves in Pictures | Hough has proposed an interesting and computationallyefficient procedure for detecting lines in pictures.  This paper points out that the use of angle-radiusrather than slope-intercept parameters simplifies the computation further.  It also showshow the method can be used for more general curve fitting, and gives alternative interpretationsthat explain the source of its efficiency. | Duda, R. O.Hart, P. E..Kpicture processing, pattern recognition, line detection,curve detection, colinear points, point-line transformation, Hough transformation.C3.63
2401 | On Shrinking Binary Picture Patterns | A parallel processing algorithm for shrinkingbinary patterns to obtain single isolated elements, one for each pattern, is presented.  This proceduremay be used for counting patterns on a matrix, and a hardware implementation of the algorithm using largescale integrated technology is envisioned.  The principal features of this method are the very smallwindow employed (two-by-two elements), the parallel nature of the process, and the possibility of shrinkingany pattern, regardless of the complexity of its configuration.  Problems regarding merging and disconnectionof patterns during the process as well as the determination of the maximum number of stepsnecessary to obtain a single isolated element from a pattern, are reviewed and discussed.  An analogy with aneural network description, in terms of McCulloch-Pitts "neurons" is presented. | Levialdi, S..Kcounting binary patterns, shrinking, parallelprocessing, multiple connected pictures.C3.63
2402 | Pictorial Pattern Recognition and thePhase Problem of X-ray Crystallography | The availability of interactive, three-dimensional,computer graphics systems coupled to powerful digital computers encourages the development of algorithmsadapted to this environment.  Pictorial pattern recognition techniques make possible a number of approachesto X-ray structure determination based on molecular model building, i.e. the use of chemical informationto frame "structural hypotheses" which can computationally be tested and refined by referenceto the experimental data.  Application of standard pattern recognition algorithms is hindered by the factthat the cross-correlation between a model and the correct structure cannot be computed because ofa fundamental incompleteness in the measured data.  However, it is possible to compute an upper bound to sucha cross-correlation.  A simple example demonstrates that this information can be the basis of a techniquefor structure determination that can make effective use of an interactive graphics system. Model buildingby cross-correlations has intrinsic advantages over usual crystallographic techniques based on theautocorrelation or Patterson function, especially for large structures.  This is significant, for crystallographyof biological macromolecules hasbeen and will continue to be a field of intense interest. | Lesk, A. M..Kpictorial pattern recognition, phase problem,X-ray crystallography, interactive graphics.C3.13 3.17 3.63
2403 | Procedures for Natural Spline Interpolation [E1] (Algorithm A472) | Herriot, J. G..Kapproximation, interpolation, spline, naturalspline, spline approximation, cubic natural spline.C5.13
2404 | Exponential Integrals [S13] (Algorithm A471) | Gautschi, W..Kexponential integral, recurrence relations,recursive computation, continued fractions.C5.12
2405 | Linear Systems with Almost Tridiagonal Matrix [F4] (Algorithm A470) | Kubicek, M..Ksystem of linear equations, almost tridiagonal matrix, sparse matrix.C5.14
2406 | A Data Definition and Mapping Language | A data definition language i sa declarativecomputer language for specifying data structures.  Most data definition languages concentrate on the declarationof logical data structures with little concern for how these structures are physically realizedon a computer system.  However, the need for data definition languages which describe both the logicaland physical aspects of data is increasingly apparent.  Such languages will be a key systems, as wellas in advanced data management systems and distributed data bases.  This paper reviews past work in the datadefinition language for describing both logical and physical aspects of data.  Applications of these"generalized" data definition languages are also discussed. | Sibley, E. H.Taylor, R. W..Kdata definition language, data and storage structure,data translation, data base management systems, file translation.C3.51 3.70 3.73 4.29 4.82
2407 | Curriculum Recommendations for UndergraduatePrograms in Information Systems | The need for education related to informationsystems in organizations is discussed, and a curriculum is proposed for an undergraduate program. Material necessary for such programs is identified, and courses incorporating it are specified.Detailed coursedescriptions are presented.  Program organization and a problems of implementation are discussed. | Couger, J. D..Keducation, undergraduate curricula, management systems,information systems, information analysis, system design, systems analysis.C1.52 3.51
2408 | Solving the Biharmonic Equation in a Square:A Direct Versus a Semidirect Method | Two methods for solving the biharmonic equationare compared.  One method is direct, using eigenvalue-eigenvector decomposition.  The other methodis iterative, solving a Poisson equation directly at each iteration. | Ehrlich, L. W..Kbiharmonic, direct method, block iterative,eigenvector-eigenvalue decomposition.C5.14 5.17
2409 | An Algorithm for the Approximate Solutionof Wiener-Hopf Integral Equations | An explicit approximate solution is given foran equation.  Where it is assumed that the classical Wiener-Hopf technique may be applied.  It is furthermoreassumed that Fourier transforms are known explicitly.  The approximate solution depends on two positive parameters. | Stenger, F..Kintegral equations, Wiener-Hopf, convolution, approximate solution.C5.18
2410 | A Recurrence Scheme for Converting fromOne Orthogonal Expansion into Another | A generalization of a scheme of Hamming forconverting a polynomial Pn(x) into a Chebyshev series is combined with a recurrence scheme of Clenshawfor summing any finite series whose terms satisfy a three-term recurrence formula.   | Salzer, H. E..Korthogonal expansions, series interconversion,recurrence schemes, Hamming recurrence, Clenshaw recurrence, three-term recurrence, five-term recurrence, Chebyshev series.C5.12
2411 | Tree-Structured Programs | Wegner, E..Kcontrol structures, flowcharts, goto statements,inductive assertion, least fix points, optimization in compilers, program documentation, program flow graphs,programming language design, proof of programs, semantics of programming languages, structured programming..C4.12 4.22 5.24
2412 | Comment on Brent's Scatter Storage Algorithm | Feldman, J. A.Low, J. R..KHashing, information storage and retrieval,scatter storage, searching, symbol table.C3.7 3.73 3.74 4.1 4.9
2413 | A Note on Subexpression Ordering inthe Execution of Arithmetic Expressions | A counterexample to the supposed optimalityof an algorithm for generating schedules for trees of tasks with unequal execution times is presented. A comparison with the "critical path" heuristic is discussed. | Denning, P. J.Graham, G. S..Kscheduling, tree scheduling, task scheduling, multiprocessor scheduling.C4.32 8.3 8.1
2414 | Arithmetic Overa Finite Field [A1] (Algorithm A469) | Lam, C.McKay, J..Kalgebra.C5.19
2415 | Algorithm for Automatic Numerical IntegrationOver a Finite Interval [D1] (Algorithm A468) | Patterson, T. N. L..Kautomatic integration, numerical integration,automatic quadrature, numerical quadrature.C5.16
2416 | Matrix Transposition in Place [F1] (Algorithm A467) | Brenner, N..Ktransposition, matrix operations, permutations,primitive roots, number theory.C3.15 5.14 5.39
2417 | Four Combinatorial Algorithms [G6] (Algorithm A466) | Ehrlich, G..Kpermutations and combinations.C5.39
2418 | Student's t Frequency [S14] (Algorithm A465) | Hill, G. W..KStudent's t statistic, density function, series approximation.C5.12 5.5
2419 | Eigenvalues of a Real, Symmetric, TridiagonalMatrix [F2] (Algorithm A464) | Reinsch, C. H..Keigenvalues, QR Algorithm.C5.14
2420 | Experiments with an Automatic Theorem-ProverHavingPartial Ordering Inference Rules | Automatic theorem-provers need to be made muchmore efficient.  With this in mind, Slagle has shown how the axioms for partial ordering can be replacedby built-in inference rules when using a particular theorem-proving algorithm based upon hyper-resolution andparamodulation.  The new rules embody the transitivity of partial orderings and the close relationship between predicates.  A program has been developed using a modified version of these rules.  This new theorem-proverhas been found to be very powerful for solving problems involving partial orderings.  This paper presentsa detailed description of the program and a comprehensive account of the experiments that have been performed with it. | Slagle, J. R.Norton, L. M..Ktheorem-proving, partial ordering, resolution,hyper-resolution, P1-resolution, paramodulation,inference rules, heuristics.C3.64 3.66
2421 | A Scan Conversion Algorithm with Reduced Storage Requirements | Most graphics systems using a raster scan outputdevice (CRT or hardcopy) maintain a display file in the XY or random scan format.  Scan converters,hardware or software, must be provided to translate the picture description from the XY format to the rasterformat.  Published scan conversion algorithms which are fast will reserve a buffer area large enoughto accommodate the entire screen.  On the other hand, those which use a small buffer area are slow becausethey require multiple passes through the XY display file.  The scan conversion algorithm describedhere uses a linked list data structure to process the lines of the drawing in strips corresponding togroups of scan lines.  A relatively small primary memory buffer area is used to accumulate the binary imagefor a group of scan lines.  When this portion of the drawing has been plotted, the buffer is reused forthe next portion.  Because of the list processing procedures used, only a single pass through the XY displayfile is required when generating the binary image and only a slight increase in execution time overthe fully buffered core results.  Results slow that storage requirements can be reduced by more than80 percent while causing less than a 10 percent increase in execution time. | Jordan, B. W. Jr.Barrett, R. C..Kgraphics, scan conversion, raster plotter,line drawing, discrete image, dot generation.C4.41 6.35 8.2
2422 | Adaptive Correction of Program Statements (Corrigendum) | James, E. B.Partridge, D. P.
2423 | A Parser-Generating System for Constructing Compressed Compilers | This paper describes a parser-generating system(PGS) currently in use on the CDC-6500 computer at Purdue University.  The PGS is a Fortran-coded compiler. In the input translation grammar, each BNF syntactic rule corresponds to a (possibly empty) "codegenerator" realizable as an assembly language, Fortran or Algol, subroutine that is called wheneverthat syntactic rule is applied in the parse of a program.  Typical one-pass compilers constructed by thePGS translate source programs at speeds approaching 14,000 cards per minute.  For an XPL compiler, the parserprogram and its tables currently occupy 288 words of 60-bit core memory of which 140 words are parsingtable entries and 82 words are links to code generators. | Mickunas, M. D.Schneider, V. B..Kparser generators, translator writing systems,syntactic analysis, normal-form grammars, pushdown automata, translation grammars, translator optimization, compression algorithm.C4.12 5.22 5.23
2424 | Dynamic Verification of Operating System Decisions | Dynamic verification of a decision impliesthat every time the decision is made there is a consistency check performed on the decision using independenthardware and software.  The dynamic verification of operating system decisions is used on the PRIME systembeing designed and constructed at the University of California, Berkeley.  PRIME is an experimental time-sharingwhich is to have the properties of continuous availability, data privacy, and cost effectiveness. The technique of dynamic verification allows the construction of an operating system which does not make certaindecisions improperly even in the presence of a single hardware or software fault.  Furthermore,multiple faults lead to unreliable operation only if the faults happen to reinforce each other.  On PRIME,dynamic verification is used to ensure that one user's information cannot become available to anotheruser gratuitously even in the presence of a single hardware or software fault.the amount of additionalhardware and software required for dynamic verification can be modest. | Fabry, R. S..Koperating systems, data security, fault tolerance,software reliability, data privacy, program verification, modular computer systems.C4.32
2425 | The Programmer as Navigator | Bachman, C. W.
2426 | Algorithms SCALE1, SCALE2, and SCALE3 for Determinationof Scales on Computer Generated Plots [J6] (Algorithm A463) | Lewart, C. R..Kplotting, scaling for plotting.C4.41
2427 | Bivariate Normal Distribution [S15] (Algorithm A462) | Donnelly,T. G..Kbivariate, normal Gaussian, frequency distribution.C5.5
2428 | Cubic Spline Solutions to a Class of FunctionalDifferential Equations [D2] (Algorithm A461) | Burkowski, F. J.Hoskins, W. D..Kdifferential equation, spline approximation.C5.17
2429 | Calculation of Optimum Parameters for AlternatingDirection Implicit Procedures [D3] (Algorithm A460) | Saylor, P. E.Sebastian, J. D..Kelliptic difference equations, Peaceman-Rachford,Douglas-Rachford, W. B. Jordan, optimum parameters, alternating-direction-implicit, ADI.C5.14 5.17
2430 | The Elementary Circuits of a Graph [H] (Algorithm A459) | Syslo,M. M..Kalgorithm, graph theory, circuit searchalgorithm, path search algorithm, searching.C3.74 4.22 5.32
2431 | Discrete Linear L1 Approximation by intervalLinear Programming [E2] (Algorithm A458) | Robers, P. D.Robers, S. S..Kdiscrete approximation, L1 approximation.C5.13 5.41
2432 | Addendum to a Multiple-Precision Division Algorithm | Mifsud, C. J.Bohlen, M. J..Kmultiple-precision, division, overflow.C3.15 4.0 5.1
2433 | Control Structures in Illiac IV Fortran | As part of an effort to design and implementa Fortran compiler on the ILLIAC IV, an extended Fortran, called IVTRAN, has been developed.  This languageprovides a means of expressing data and control structures suitable for exploiting ILLIAC IV parallelism. This paper reviews the hardware characteristics of the ILLIAC and singles out unconventional featureswhich could be expected to influence language (and compiler) design.  The implications of these features fordata layout and algorithm structure are discussed, and the conclusion is drawn that data allocation rather thancode structuring is the crucial ILLIAC optimization problem.  A satisfactory method of data allocation isthen presented.  Language structures to utilize this storage method and express parallel algorithms are described. | Millstein, R. E..Karray processing, parallelism detection, explicitparallelism, array allocation, parallel control structures, ILLIAC IV Fortran.C4.12 4.21 4.22
2434 | Using Page Residency To Select the Working Set Parameter | Denning's method for selecting the working setparameter, which uses interreference intervals, is examined.  Several omissions in his model are noted,and new assumptions are introduced to overcome these omissions.  Using this modified model, Dening's resultson page residency are rederived and reconsidered for selecting the working set parameter. | Prieve, B. G..Kworking set model, paging, program behavior,program modeling.C4.3
2435 | A Class of Dynamic Memory Allocation Algorithms | Anew dynamic memory allocation algorithm, theFibonacci system, is introduced.  This algorithm is similar to, but seems to have certain advantages over,the "buddy" system.  A generalization is mentioned which includes both of these systems as special cases. | Hirschberg, D. S..Kdynamic storage allocation, buddy system,simulation, Fibonacci, fragmentation.C3.89 4.32 4.39
2436 | A Note on the Confinement Problem | This note explores the problem of confininga program during its execution so that it cannot transmit information to any other program except itscaller.  A set of examples attempts to stake out the boundaries of the problem.  Necessary conditionsfor a solution are stated and informally justified. | Lampson, B. W..Kprotection, confinement, proprietary program,privacy, security, leakage of data.C2.11 4.30
2437 | General Performance Analysis of Key-to-AddressTransformation Methods Using an Abstract File Concept | This paper presents a new approach to the analysisof performance of the various key-to-address transformation methods.  In this approach the keys ina file are assumed to have been selected from the key space according to a certain probabilistic selectionalgorithm.  All files with the same number of keys selected from this key space will be suitably weightedin accordance with the algorithm, and the average performance of the transformation methods onthese files will be used as the potential of these methods.  Using this analysis, methods with the same overallperformance can be classified and key distributions partial to certain transformations can be identified. All this can be done analytically.  The approach is applied to a group of transformation methodsusing files whose keys are selected randomly. | Lum, V. Y..Khashing, hashing techniques, hashing methods, hash coding,key transformation, key-to-address transformation, direct addressing, randomizing, random access, scatterstorage, information retrieval, hashing analysis, randomization performance analysis.C3.7 3.72 3.73 3.74 3.79 4.9 5.9
2438 | A Model and Stack Implementation of Multiple Environments | Many control and access environment structuresrequire that storage for a procedure activation exist at times when control is not nested within theprocedure activated.  This is straightforward to implement by dynamic storage allocation with linkedblocks for each activation, but rather expensive in both time and space.  This paper presents an implementationtechnique using a single stack to hold procedure activation storage which allows retentionof that storage for durations not necessarily tied to control flow.  The technique has the property that,in the simple case,it runs identically to the usual automatic stack allocation and deallocation procedure. Applications of this technique to multitasking, coroutines, backtracking, label-valued variables, andfunctional arguments are discussed.  In the initial model, a single real processor is assumed, and the implementationassumes multiple-processes coordinate by passing control explicitly to one another.  A multiprocessorimplementation requires only a few changes to the basic technique, as described. | Bobrow, D. G.Wegbreit, B..Kcontrol structures, environments, stack allocation,dendrarchy, retention, dynamic storage allocation, access environments, FUNARG problem, multitasking,coroutines, backtracking, label-valued variables, functional arguments, multiprocessor systems, extensible control structures.C4.1 4.2 4.22 4.3 4.32 5.24
2439 | Multiple Terminals Under User ProgramControl in a Time-Sharing Environment | User-written programs on the Dartmouth Time-Sharingsystem can communicate with many remote terminals simultaneously and can control the interactionsbetween these terminals.  Such programs can be written using standard input and output instructionsin any language available on the system.  This paper describes how this multiple-terminal facilitywas implemented without requiring any changes in the system executive or in any of the system's compilers or interpreters. | McGeachie, J. S..KDTSS, multiple terminals, remote terminals, remoteconsoles, time-sharing, on-line interaction, on-line games.C3.81 4.32
2440 | Localization of the Roots of a Polynomial (Algorithm R429) | Driessen, H. B.Hunt, E. W. LeM.
2441 | Hidden-Line Plotting Program (Algorithm R420) | Williamson, H.
2442 | A Sparse Matrix Package (Algorithm R408) | Lawrence, E. E.
2443 | Generation of Permutations in Lexicographic Order (Algorithm R323) | Roy, M. K.
2444 | Finding All Cliques of an Undirected Graph (Algorithm A457) | Bron, C.Kerbosch, J..Kcliques, maximal complete subgraphs, clusters, backtrackingalgorithm, branch and bound technique, recursion.C3.71 5.32
2445 | Routing Problem (Algorithm A456) | Fencl, Z..Krouting problem, shortest path, travelingsalesman problem, Hamiltonian circuit.C5.40
2446 | Analysis of Skew Representations of the Symmetric Group (Algorithm A455) | Hunter, D. B.Williams, J. M..Ksymmetric group, skew representation, partition,Young diagram, lattice permutation, binary model, outer product.C5.30
2447 | Sard Kernels for Certain Bivariate Cubatures | An error analysis for some bivariate cubaturesis given.  The remainders are obtained by the use of Sard kernels.  Numerical results and computergraphs are given for some of the kernel functions. | Barnhill, R. E.Pilcher, D. T..Kcubatures, Sard kernels, numerical integration, remainder formulas.C5.13 5.16
2448 | Reversible Execution | Zelkowitz, M. V..Kdebugging, PL/I, reversible execution, backtracking.C4.22 4.42
2449 | A Simple Technique for Structured Variable Lookup | A simple technique for the symbol-table lookupof structured variables based on simple automata theory is presented. The technique offers a deterministicsolution to a problem which is currently handled in a nondeterministic manner in PL/I and COBOL compilers. | Gates, G. W.Poplawski, D. A..Ksymbol table organization, PL/I and COBOL structured variables.C4.12
2450 | Empirical Working Set Behavior | The working set model for program behaviorhas been proposed in recent years as a basis for the design of scheduling and paging algorithms.  Althoughthe words "working set" are now commonly encountered in the literature dealing with resource allocation, thereis a dearth of published data on program measurements, in the hope that workers in the field might find experimentalevidence upon which to substantiate and base theoretical work. | Rodriguez-Rosell, J..Kvirtual memory, paging, working set,software measurement, program behavior.C4.3
2451 | Design of Tree Structures for Efficient Querying | A standard information retrieval operation isto determine which records in a data collection satisfy a given query expressed in terms of data values. The process of locating the desired responses can be represented by a tree search model.  This paperposes an optimization problem in the design of such trees to serve a well-specified application. Theproblem is academic in the sense that ordinarily the optimal tree cannot be implemented by means of practicaltechniques.  On the other hand, it is potentially useful for the comparison it affords between observedperformance and that of an intuitively attractive ideal search procedure.  As a practical applicationof such a model this paper considers the design of a novel tree search scheme based on a bit vector representationof data and shows that essentially the same algorithm can be used to design either an idealsearch tree or a bit-vector tree.  An experimental study of a small formatted file illustrates the concepts. | Casey, R. G..Ktree file, information storage and retrieval, clustering,search, data structure, data management, query answering.C3.62 3.74
2452 | Evaluation and Selection of File Organization-A Model and System | This work first discusses the factors thataffect file (data base) organization performance, an elusive subject, and then presents a methodology, amodel and a programmed system to estimate primarily total storage costs and average access time of severalfile organizations, given a specific data base, query characterization and device-related specifications. Based on these estimates, an appropriate file structure may be selected for the specific situation. The system is a convenient tool to study file structures and to facilitate as much as possible the processof data base structure design and evaluation. | Cardenas, A. F..Kfile organization, file structures, file management,file organization performance, file organization model, file structure design, secondary index organization,simulation, data base, access time, storage requirement, data base analysis, data management.C3.70 3.71 3.72 3.74 3.79 4.0
2453 | Information Theory Applied to the Conversionof Decision Tables to Computer Programs | Using ideas from information theory, this paperdevelops a heuristic algorithm that converts a limited entry decision table to a tree structured computerprogram with near minimum average processing time.  The method is applicable to any limited entrydecision table and does not require that actions have single rules or that the cost of testing conditionsbe equal.  It is thus more general than the previously published heuristic algorithms.  Comparedto the optimal algorithm of Reinwald and Soland, this algorithm is easy to code and takes a much smallertranslation time; it is thus felt that it is more useful in practice.  The algorithm is well suited formanual conversion of decision tables to flowcharts. | Ganapathy, S.Rajaraman, V..Kdecision tables, optimum computer programs, information measure.C3.50 4.12 5.6
2454 | Computational Algorithms for Closed QueueingNetworks with Exponential Servers | Methods are presented for computing the equilibriumdistribution of customers in closed queueing networks with exponential servers.  Expressions forvarious marginal distributions are also derived.  The computational algorithms are based on two-dimensionaliterative techniques which are highly efficient and quite simple to implement.  Implementation considerationssuch as storage allocation strategies and order of evaluation are examined in some detail. | Buzen, J. P..Kqueueing theory, queueing networks, equilibriumdistributions, steady state distributions.C5.12 5.5 8.1 8.3
2455 | A Generalization of AVL Trees | A generalization of AVL trees is proposed inwhich imbalances up to (triangle shape) is a small integer.  An experiment is performed to compare thesetrees with standard AVL trees and with balanced trees on the basis of mean retrieval time, of amountof restructuring expected, and on the worst case of retrieval time.  It is shown that, by permittingimbalances of up to five units, the retrieval time is increased a small amount while the amount of restructuringrequired is decreased by a factor of ten.  A few theoretical results are derived, including the correctionof an earlier paper, and are duly compared with the experimental data.  Reasonably good correspondence is found. | Foster, C. C..KAVL trees, balanced trees, information storage and retrieval.C3.7 3.72 4.49 5.31
2456 | On the Capabilities of While, Repeat, and Exit Statements | A well-formed program is defined as a programin which loops and if statements are properly nested and can be entered only at their beginning.  Acorresponding definition is given for a well-formed flowchart.  It is shown that a program is well formed ifand only if it can be written with if, repeat, and multi-level exit statements for sequence control. It is also shown that if,while, and repeat statements with single-level exit do not suffice.  It is also shownthat any flowcharts can be converted to a well-formed flowchart by node splitting.  Practical implications are discussed. | Peterson, W. W.Kasami, T.Tokura, N..Kwell-formed program, while statement, repeat statement,exit statement, go to statement, flowchart, node splitting, software reliability.C4.39 4.49 5.29
2457 | Inductive Methodsfor Proving Properties of Programs | There are two main purposes in this paper:first, clarification and extension of known results about computation of recursive programs, with emphasison the difference between the theoretical and practical approaches; second, presentation and examinationof various known methods for proving properties of recursive programs.  Discussed in detail are twopowerful inductive methods computational induction and structural induction, including examples of their applications. | Manna, Z.Nes, S.Vuillemin, J..Krecursive programs, least fixed point, computationalinduction, structural induction.C4.2 5.23 5.24
2458 | Localization of the Roots of a Polynomial (Algorithm R429) | Williams, E. J.
2459 | Hu-Tucker Minimum Redundancy Alphabetic Coding Method (Algorithm R428) | Byrne, J. G.
2460 | Clenshaw-Curtis Quadrature (Algorithm R424) | Good, A. J.
2461 | Graph Plotter (Algorithm R412) | Watkins, R. P.
2462 | An Efficient Prime Number Generator (Algorithm R357) | DeMorgan, R. M.
2463 | Complex Gamma Function (Algorithm R404,C404) | Andrejkova, G.Vinar, J.
2464 | The Complex Method for Constrained Optimization [E4] (Algorithm A454) | Richardson, J. A.Kuester, J. L..Koptimization, constrained optimization, Box's algorithm.C5.41
2465 | Gaussian Quadrature formulas for Bromwich'sIntegral [D1] (Algorithm A453) | Piessens, R..KGaussian quadrature, Bromwich's integral, complexintegration, numerical inversion of the Laplace transform.C5.16 5.13
2466 | Enumerating Combinations of m Out of n Objects [G6] (Algorithm A452) | Liu, C. NTang, D. T..Kpermutations, combination.C5.30
2467 | Chi-Square quantiles [G1] (Algorithm A451) | Goldstein, R. B..KChi-square, asymptotic approximation, normaldeviate, chi-square deviate, degrees of freedom.C5.12 5.5
2468 | Rosenbrock Function Minimization [E4] (Algorithm A450) | Machura, M.Mulawa, A..Kfunction minimization, Rosenbrock's method.C5.19
2469 | Petri Nets and Speed Independent design | Petri nets are investigated as one method ofmodeling speed independent asynchronous circuits.  A study of circuit realizations of Petri nets leadsto a demonstration of their usefulness in modeling speed independent operation.  This usefulness is emphasizedby the design of a speed independent processor from modules developed in the investigation of Petri net implementation. | Misunas, D..Kspeed independent asynchronous, Petri net.C6.1 6.33
2470 | Fen-An Axiomatic Basis for Program Semantics | A formal system is presented which abstractsthe notions of data item, function, and relation.  It is argued that the system is more suitable than settheory (or its derivatives) for the concise and accurate description of program semantics.  It is shownhow the system can be used to build composite data types out of simper ones with the operations of rowing,structuring, and uniting.  It is also demonstrated that completely new primitive types can be introducedinto languages through the mechanism of singleton data types.  Both deterministic and nondeterministicfunctions are shown to be definable in the system.  It is described how the local environment can be modeledas a data item and how imperative statements can be considered functions on the environment.  Thenature of recursive functions is briefly discussed, and a technique is presented by which they can be introducedinto the system.  The technique is contrasted with the use of the paradoxical combinator, Y.  Thequestions of local and global environments and of various modes of function calling and parameter passingare touched upon. The theory is applied to the proof of several elementary theorems concerning the semanticsof the assignment, conditional, and iterative statements.  An appendix is included which presents indetail the formal system governing webs and fen, the abstractions used informally in the body of the paper. | MacLennan, B. J..Ksemantics, formal systems, lambda-calculus, extensiblelanguages, data types, modes, axioms, correctness, formal language definition, formal description, data structures,description languages, models of computation.C4.22 5.21 5.24 5.26
2471 | A Learning Program Which Plays Partnership Dominoes | A learning program has been written is BASICto play four-player partnership dominoes.  Because dominoes is a game of incomplete information, the programuses somewhat different principles of artificial intelligence from those used in programs for gamesof complete information, such as checkers, chess, and go.  The program was constructed to use a "strategysignature table" which classifies board situations through the interactions of game parameters. Each entryin the table contains adaptively determined weights indicating the advi sability of various strategies. Once chosen, a strategy then employs probability analysis and linear polynomial evaluation to choosea move.  Our program wins approximately two-thirds of its games in tournament situations, and has defeated championship players. | Smith, M. H..Kartificial intelligence, intelligence learning,heuristic procedures, heuristic programming, game playing, problem solving,dominoes, incomplete information,machine learning, signature table, learning programs, strategy learning.C3.62 3.64 3.66 3.69
2472 | Minimal spanning Tree (Algorithm R422) | Kernighan, B. W..Kspanning tree, minimal spanning tree, Prim algorithm.C5.32
2473 | Hidden-Line Plotting Program (Algorithm R420) | Macleod, I. D. G.Collins, A. M..Khidden-line plot, surface plot.C4.9
2474 | DIFSUB for Solution of Ordinary Differential Equations (Algorithm C407) | Nikolai, P. J..Kdifferential equations, stiff differentialequations, boundary value problems.C5.17
2475 | Solution of Linear Programming Problemsin 0-1 Variables [H1] (Algorithm A449) | Fiala, F..Klinear programming, zero-one variable .C5.41
2476 | Equivalence Between AND/OR Graphs and Context-Free Grammars | Hall, P. A. V..Kartificial intelligence, AND/OR graphs,language theory, context-free grammars.C3.60 3.64 5.23
2477 | Multiple Exits from a Loop Without the GOTO | Bochmann, G. V..Kcontrol structures, goto free programming,multiple exits from loops, exit statement.C4.20 4.22
2478 | Computer Science-Seminars for Undergraduates | Kandel, A..Keducation, computer science, curriculum, imprecisesynthesis, fuzzy educational structure.C1.52 6.0
2479 | Curriculum Recommendations for Graduate ProfessionalPrograms in Information Systems: Recommended Addendum on Information Systems Administration | An addendum to the Report of the ACM CurriculumCommittee on Computer Education for Management is proposed. The proposed addendum is to include in the curriculuma course on Information Systems administration. It is important for two reasons: (1) the systems designermust understand the administrative framework in which he must operate to work effectively, and (2) animportant objective of the curriculum recommendations is to prepare the future manager of the computer activity. It is felt that the importance of these two reasons justifies the addition of the recommended course. The course is outlined in the format of the original report. | McFarlan, F. W.Nolan, R. L..Keducation, management information systems, informationsystems administration, information systems management, computer management.C1.52 3.51
2480 | Teaching "About Programming" | This paper presents the goals and organizationof a course about programming designed to provide entering students in a graduate program with a culturalenrichment in their professional lives.  The students are expected to have taken at least two programmingcourses prior to this one and, therefore, to be familiar with at least two programming languages,both as students and users.  Teaching someone how to program is similar to teaching him to play a musicalinstrument: neither skill can be taught-they must be learned.  However, the teacher still servesseveral vital purposes: to present a set of rules for producing well-formed utterances; to offer numerousdemonstrations of his own skill; and to function as an involved critic.  Finally, the teacher is thesource of information about the process in which the student is involved. | Rosin, R. F..Keducation, programming concepts, professionalism.C1.52 2.2 4.22
2481 | The Distribution of a Program in Primary and Fast Buffer Storage | A virtual memory computer system with a fastbuffer (cache) memory between primary memory and the central processing unit is considered.  The optimaldistribution of a program between the buffer and primary memory is studied using the program's lifetimefunction.  Expressions for the distribution of a program which maximizes the useful fraction ofthe cost-time integral of primary and fast buffer storage are obtained for swapping and nonswapping buffer management policies. | Gelenbe, E..Kcache, virtual memory, lifetime function, cost-time integral, fast buffer.C4.3 6.2 6.3
2482 | Mixed Solutions for the Deadlock Problem | Mixtures of detection, avoidance, and preventionprovide more effective and practical solutions to the deadlock problem than any one of these alone.  Theindividual techniques can be tailored for subproblems of resource allocation and still operate together toprevent deadlocks.  This paper presents a method, based on the concept of the hierarchical operatingsystem, for constructing appropriate mixtures and suggests appropriate subsystems for the most frequentlyoccurring resource allocation problems | Howard, J. H. Jr..Kdeadlocks, resource allocation, operating systems,multiprogramming, hierarchical systems.C4.30 4.32
2483 | COKO III: The Cooper-Koz Chess Program | COKO III is a chess player written entirelyin Fortran.  On the IBM 360-65, COKO III plays a minimal chess game at the rate of .2 sec cpu timeper move, with a level close to lower chess club play.  A selective tree searching procedure controlledby tactical chess logistics allows a deployment of multiple minimal game calculations to achieve some optimalmove selection.  The tree searching algorithms are the heart of COKO's effectiveness, yet they areconceptually simple.  In addition, an interesting phenomenon called a tree searching catastrophe has plaguedCOKO's entire development just as it troubles a human player.  Standard exponential growth is curbedto a large extent by the definition and trimming of the Fischer set.  A clear distinction between treepruning and selective tree searching is also made.  Representation of the chess environment is describedalong with a strategical preanalysis procedure that maps the Lasker regions.  Specific chess algorithmsare described which could be used as a command structure by anyone desiring to do some chess programexperimentation.  A comparison is made of some mysterious actions of human players and COKO III. | Kozdrowicki, E. W.Cooper, D. W..Kartificial intelligence, selective searching, treesearching, tree searching catastrophe, heuristic programming,chess algorithms, Lasker regions, Fischerset, minimal chess game, strategical, tactical, tactical control mode, game playing, alpha beta, machinelearning, concept formation, command structure, minimax, computer chess tournament, auxiliary minimal game.C3.60 3.66 3.74 4.22
2484 | A Note on Information Organization and Storage | Since the logical structure of a data basecan be represented by a tree or graph, it is quite natural for us to view the process of designing a database as that of constructing a tree or a graph.  A general method for constructing such a tree or a graphis provided.  There are three important elements in this general construction method; namely, a set ofbinary relations, an algorithm for constructing subsets of a set, and an algorithm for selecting anelement from the given set of objects.  The use of different relations and algorithms results in differentinformation structures, as list, tree, ring, etc.  Thus the problem of information organization andstorage is reduced to that of defining relations and formulating algorithms under a given set of constraints. The results presented may be valuable to designers as useful design concepts, and may serve asa basis for developing a formal theory on the subject. | Huang, J. C..Kdata base, data-base management, information retrieval,information structure, file organization, storage allocation, tree, graph.C3.70 3.73 3.74 5.32
2485 | Managing the Computer Resource: A Stage Hypothesis | Based on the study of expenditures for data processing,a descriptive stage hypothesis is presented.  It is suggested that the planning, organizing, and controllingactivities associated with managing the computer resource will change in character over a periodof time, and will evolve in patterns roughly correlated to four stages of the computer budget: StageI (computer acquisition), Stage II (intense system development), Stage III (proliferation of controls), andStage IV (user/service orientation).  Each stage is described and related to individual tasks for managing the computer resource. | Nolan, R. L..Kcomputer management, computer budget, computer expenditures,stage hypothesis, planning, organizing, control, computer resource.C2.41 2.43 3.50
2486 | Computer Photocomposition of Technical Text | In computer assisted typesetting by means ofphotocomposition, special problems arise in highly technical material such as mathematical formulas.  Newsolutions to several of these problems have been devised in the information system of the American Instituteof Physics.  They include: the representation of special characters (foreign alphabets, mathematicalsymbols, etc.) not available on input keyboards or on the photocomposer; the generation of such symbols,e.g. by overprinting; the precise positioning of accent marks (floating diacritics); line breaks,i.e. words or formulas placed partly at the end of one line and partly at the beginning of the next;and certain aspects of error correction. | Alt, F. L.Yuni Kirk, J..Kphotocomposition, typesetting, printing, graphics, text processing.C3.79 3.82
2487 | Cubic Spline solutions to Fourth-order Boundary Value Problems | The cubic spline approximation to the fourth-orderdifferential equation y''''+p(x)y''+q(x)y'+r(x)y=t(x) is shown to reduce to the solution of a five-term recurrencerelationship.  For some special cases the approximation is shown to be simply related to a finitedifference representation with a local truncation error of order (y/720)delta^8. | Hoskins, W. D..Kcubic spline, differential equations, boundary value problem.C5.13 5.17
2488 | Least Squares Piecewise Cubic Curve Fitting | The matrices involved in a linear least squaresformulation are determined for the problem of fitting piecewise cubic functions, those possessinga continuous derivative, to arrays of planar data. | Ferguson, J.Staley, P. A..Kcurve fitting, data reduction, functionapproximation, approximation splines.C5.13
2489 | Number of Multiply-Restricted Partitions [A1] (Algorithm A448) | Beyer, T.Swinehart, D. F..Kpartitions, enumeration, change making, energy-leveldegeneracies, molecular vibrational energy-levels.C3.13 5.30
2490 | Efficient Algorithms for Graph Manipulation [H] (Algorithm A447) | Efficient algorithms are presented for partitioninga graph into connected components, biconnected components and simple paths.  The algorithm for partitioningof a graph into simple paths is iterative and each iteration produces a new path between twovertices already on paths.  (The start vertex can be specified dynamically.)  If V is the number of verticesand E is the number of edges, each algorithm requires time and space proportional to max (V,E)when executed on a random access computer. | Hopcroft, J.Tarjan, R..Kgraphs,analysis of algorithms, graph manipulation.C5.32
2491 | Threaded Code | The concept of "threaded code" is presented asan alternative to machine language code.  Hardware and software realizations of it are given.  In softwareit is realized as interpretive code not needing an interpreter.  Extensions and optimizations are mentioned. | Bell, J. R..Kinterpreter, machine code, time tradeoff, spacetradeoff, compiled code, subroutine calls, threaded code.C4.12 4.13 6.33
2492 | The Development of Decision Tables viaParsing of Complex Decision Situations | A new parsing technique is proposed which allowsparsing based only on syntactical characteristics of the decision problem.  It requires a descriptionof the problem in decision grid chart format and allows the development of decision tables within definedlimits by avoiding, or at least minimizing, repetition of conditions and actions in the resulting tables. | Strunz, H..Kdecision tables, parsing, decision grid chart,problem analysis.C4.0 4.1 4.2
2493 | Optimum Data Base Reorganization Points | In certain data base organization schemes thecost per access may increase due to structural inefficiencies caused by updates.  By reorganizingthe data base the cost per access may be reduced.  However, the high cost of a reorganization prohibitsfrequent reorganizations.  This paper examines strategies for selecting the optimum reorganization points. | Shneiderman, B..Kdata base, reorganization, files, information retrieval.C3.73
2494 | A Computer Generated Aid for Cluster Analysis | A computer generated graphic method, whichcan be used in conjunction with any hierarchical scheme of cluster analysis, is described and illustrated. The graphic principle used is the representation of the elements of a data matrix of similarities or dissimilaritiesby computer printed symbols (of character overstrikes) of various shades of darkness, where adark symbol corresponds to a small dissimilarity.  The plots, applied to a data matrix before clusteringand to the rearranged matrix after clustering, show at a glance whether clustering brought forth anydistinctive clusters.  A well-known set of data consisting of the correlations of 24 psychological testsis used to illustrate the comparison of groupings by four methods of factor analysis and two methods of cluster analysis. | Ling, R. F..Kcomputer graphics, cluster analysis, numericaltaxonomy, hierarchical clustering, factor analysis.C3.10 3.30 3.36 4.49
2495 | Adapting Optimal Code Generation for ArithmeticExpressions to the Instruction Sets Available on Present-Day Computers | Stockhausen, P. F..Karithmetic expressions, code generation, compilers,object-code optimization, register assignment, trees.C4.12 5.24 5.32
2496 | On the Near-Optimality of the Shortest-Latency-Time-FirstDrum Scheduling Discipline | For computer systems in which it is practicalto determine the instantaneous drum position, a popular discipline for determining the sequence in whichthe records are to be accessed is the so-called shortest-latency-time-first, SLTF, discipline.  Whena collection of varying-length records is to be accessed from specified drum positions, it is known thatthe SLTF discipline does not necessarily minimize the drum latency time.  However, we show that the totaltime to access the entire collection for any SLTF schedule is never as much as a drum revolutionlonger than a minimum latency schedule. | Stone, H. S.Fuller, S.  H..Kdrum scheduling, shortest-access-time-first, minimallatency scheduling, shortest-latency-time-first.C4.31 4.41 6.35
2497 | Synchronizing Processors with Memory-Content-Generated Interrupts | Implementations of the "Lock-Unlock" methodof synchronizing processors in a multiprocessor system usually require uninterruptable, memory-pause type instructions. An interlock scheme called read-interlock, which does not require memory-pause instructions, hasbeen developed for a dual DEC PDP-10 system with real-time requirements.  The read-interlock method doesrequire a special"read-interlock" instruction in the repertoire of the processors and a special "read-interlock"cycle in the repertoire of the memory modules.  When a processor examines a "lock" (a memorylocation) with a read-interlock instruction, it will be interrupted if the lock was already set; examininga lock immediately sets it if it was not already set (this event sequence is a read-interlock cycle). Writing into a lock clears it.  Having the processor interrupted upon encountering a set lock instead ofbranching is advantageous if the branch would have resulted in an effective interrupt. | Hill, J. C..Kinterrupts,supervisors, monitors, debugging, parallelprocessing, associative memories, microprogramming.C4.32 6.29
2498 | Minimizing Wasted Space in Partitioned Segmentation | A paged virtual memory system using a finitenumber of page sizes is considered.  Two algorithms for assigning pages to segments are discussed.  Bothof these algorithm are simple to implement.  The problem of choosing the page sizes to minimize the expectedvalue of total wasted space in internal fragmentation and in a page table, per segment, is then solved for aprobability density function of segment size which may be expressed as a convex combination of Erlang densities. | Gelenbe, E..Kdynamic storage allocation, virtual memory, paging,multiple page sizes, fragmentation, segmentation.C4.0 4.3 4.32 6.34 8.3
2499 | Efficient Multiprogramming Resource Allocation and Accounting | Although sometimes thought of as only a componentof time-sharing operation, multiprogramming can involve broader questions of resource allocation,since fairness is not required to meet a response criterion.  In a multiprogrammed system, it may servemaximal resource use to be unfair, for example by holding an input/output channel idle for a programwhile it completes a small amount of processor usage, enabling further use of the channel.  Severalapplications of this principle are given, and it is suggested that a multiprogramming executive mightdynamically adjust its allocation algorithms to gain efficiency.  Allocation of resources is closely connectedto accounting for those resources, raising the problems of repeatability, minimal uncharged overhead,and relative weighting of charges for dependent resources.  Since weightings may depend on allocationalgorithms, these are not arbitrary accounting parameters.  Often the only repeatable accounting isone which omits an extensive overhead will be paid, and should multiprogramming prove efficient, overchargeswill result.  Multiprogramming turns on allocation of the memory resource essential to control of otherresources.  The general suggestions for allocation and accounting are applied to this question, and somedetails provided for the case of a monitor which controls a virtual-memory machine. | Hamlet, R. G..Kmonitor, executive, multiprogramming, efficiency,resource allocation, resource accounting.C4.32
2500 | A Practical Approach to Managing Resources and Avoiding Deadlocks | Resource scheduling and allocation can be expensivewith regard to time and space in multiprogramming or time-sharing environments involving large numbers oftasks and resources with conflicting requirements.  Detection and/or prevention of deadlocks can requiremassive amounts of additional overhead if efficient usage of resources is to be maintained.  A resourcemanagement program is described which uses linked lists along with other techniques to overcome a largeportion of this overhead.  The program, which is currently running as part of a large scale general purposeoperating system, keeps resources relatively active but does not detect or prevent all deadlocksin its implemented state.  Certain changes, which would permit more comprehensive levels of deadlockprevention/detection at additional cost, have not been incorporated in the running system dueto the infrequency of deadlock situations. | Frailey, D. J..Kdeadlock, resource allocation, scheduling, resourcemanagement, multiprogramming, time-sharing, multiprocessing, deadly embrace.C4.30 4.32
2501 | WYLBUR: An Interactive Text Editing and Remote Job Entry System | WYLBUR is a comprehensive system for manipulatingall kinds of text, such as computer programs, letters, and manuscripts, using typewriter terminalsconnected to a computer.  It has facilities for remote job entry and retrieval as well as facilitiesfor text alignment and justification.  A powerful method for addressing text by content is provided.  Thispaper describes the external appearance of WYLBUR as well as its internal structure.  A short descriptionof the major features of ORVYL, a general purpose time-sharing system which operates in conjunction with WYLBUR, is also included. | Fajman, R.Borgelt, J..Ktext editing, time-sharing, on-line text editing,interactive text editing, terminal, remote terminal, terminal system, interactive terminal, remote job entry,remote job retrieval, program preparation, document preparation, data entry, content addressing.C3.70 3.79 4.10 4.19 4.41 4.43 4.49
2502 | A Comment on the Practical Aspects of Computer Science Education | Estell, R. G..Keducation, computer engineering, computersciences curriculum, systems design.C1.52 6.0
2503 | Another Comment on Computer Music | Wexelblat, R. L.
2504 | Concerning Music and Computer Composition in Computational Linguistics | McMorrow, C. H..Kartificial intelligence, heuristic programming,models of cognitive processes, computer music, computer composition,music theory.C3.44 3.65
2505 | Reflection-Free Permutations, Rosary Permutations,and Adjacent Transposition Algorithms | Roy, M. K..Kpermutation, permutation generation, scheduling, combinatorial analysis.C5.39
2506 | A Sparse Matrix Package (Algorithm R408) | Sale, R. H. J..Kmatrix, sparse matrix, matrix manipulation, Fortran standards.C5.14
2507 | Exact Solution of Linear Equations UsingResidue Arithmetic (Algorithm R406) | Howell, J..Kresidue arithmetic, symmetric residue, modulus,mixed-radix representation, symmetric mixed-radix representation, mixed radix conversion, prime number,linear equations, Gaussian elimination, matrix inversion, determinant, adjoint matrix, ill-condition.C3.5 5.14
2508 | Increasing the Efficiency of Quicksort (Algorithm R402) | Wheeler, R. E..Ksorting, quicksort.C3.73 4.49 5.31 5.6
2509 | Minit Algorithm for Linear Programming (Algorithm R333) | Obradovic, D.
2510 | Minit Algorithm for Linear Programming (Algorithm R333) | Holmgren, B.Obradovic, D.Kolm, A.
2511 | Maxflow (Algorithm R324) | Bayer, G.
2512 | Coulomb Wave Functions (Algorithm R300) | Vos, H..KCoulomb wave functions, wave functions,special functions, function evaluation.C5.12
2513 | A Nonrecursive List Moving Algorithm | An efficient, nonrecursive algorithm is givenfor moving any LISP-type list.  In particular, the algorithm requires no storage other than the newnodes into which the list is to be moved, and no additional bits per node for marking; the algorithmruns in time proportional to the number of nodes in the list.  The original list structure is destroyed as it is moved. | Reingold, E. M..Klist moving, list copying, list traversal, garbage collection LISP.C4.19 4.49
2514 | An Array Grammar Programming System | A package of Fortran programs has been developedthat permits a user to interactively design and test array grammars.  The user can control the ruleselection procedure in a derivation or parse, using weighted programming matrices; he also has a choiceof instance selection schemes (raster,random, parallel).  Examples are given involving array languagesconsisting of simple geometrical patterns, as well as a language of "neuron pictures." | Mercer, A.Rosenfeld, A..Kpicture grammars, array grammars.C3.63 5.23 8.2
2515 | Minimal Event-Node Network of Project Precedence Relations | A procedure for constructing a minimal event-nodenetwork to represent a set of precedence relations without parallel activities is presented.  Aminimal event-node network is an event-node network in which both the number of nodes and the number of arcsare the minima to preserve the given precedence relations Counterexamples are given to show that thealgorithm presented by A. C. Fisher, J. S. Liebman, and G. L. Nemhauser (1968) produces event-node networkswhich are not minimal.  Since our procedure includes the set-covering problem, the time required may growexponentially with the number of given activities. | Corneil, D. G.Gotlieb, C. C.Lee, Y. M..Knetwork, project, event-node network, activity-nodenetwork, minimal event-node network, dummy activity, project precedence relations.C3.57 5.32 8.3
2516 | Hierarchical Storage in Information Retrieval | A probabilistic analysis is employed to determinethe effect of hierarchical storage organizations on information retrieval operations.  The data storagehardware is assumed to consist on n-levels of linearly connected memory hardware with increasing dataaccess times and increasing data storage capabilities.  A system might, for example, consist of fast semiconductormemory, computer core memory, extended core storage, disk memory, and data cells.  Equations are derivedto predict the effect of such a system on data access times using sequential files, random access files,and structured files employing multiple-hierarchical linked lists. | Salasin, J..Kinformation retrieval, hierarchical storage.C3.70 3.72 3.73 3.74 3.79 3.90 6.20 6.34
2517 | Some Comments on the Use of Ambiguous DecisionTables and Their Conversion to Computer Programs | This paper comments upon recently publishedwork on decision table translation using methods similar to the rule-mask technique.  The applicabilityof these methods under various possible conventions on overall table meaning is discussed, and it is arguedthat there is a place both for the multi-rule and the single-rule (or action set) convention in decision tale usage. | King, P. J. H.Johnson, R. G..Kdecision tables, systems analysis, programming.C3.50 3.59 4.19 4.29 4.49
2518 | Programming by Questionnaire: An Effective Way To Use Decision Tables | Programming by questionnaire combines aspectsof decision table programming and general purpose programming by using decision tables to construct an applicationprogram through the selection of certain source statements from a predefined file.  It is proposedthat programming by questionnairies a useful compromise between general and special purpose programmingfor a significant class of large scale problems.  The elements of the approach are discussedan existing application is described. | Low, D. W..Kcustomizing, modeling, applications development,programmer productivity, simulator generation, automatic program generation, no reprogramming.C4.20 4.22 4.29
2519 | On the Problem of Communicating Complex Information | The nature of the difficulty involved in communicatingmathematical results between scientists using a computer based information retrieval systemis examined.  The problem is analyzed in terms of psychological and information-processing processes, andwhat turns out to be a vicious circle of effects is described.  These include ways of augmenting writtennatural language by various notational and linguistic devices, the exhibition of the structure inherent in theinformation we are communicating, and a sophisticated interactive system controlled by computer. | Pager, D..Kcomplex information, information, communication,mathematics, proof, interactive system, language.C1.0 1.1 1.50 1.52 1.59 2.42 3.32 3.51 3.62 3.70 3.81
2520 | Greatest Common Divisor of n Integers and Multipliers (Algorithm C386) | Ragland, L. C.Good, D. I..Kproof of algorithms, greatest common divisor,Euclidean algorithm, inductive assertion method.C3.15 4.42 5.10 5.24
2521 | Ten Subroutines for the Manipulationof Chebyshev Series [C1] (Algorithm A446) | Broucke, R..KChebyshev series, differentiation, integration,curve fitting,approximations, negative powers.C5.12 5.13 5.16
2522 | The Design, Implementation, and Evaluation of a Working Set Dispatcher | The behavior of a computer system is largelydependent upon the algorithms employed to allocate the system resources to the processes competing for them. Recent research in time-sharing paging systems has developed the working set model for program behavior,and are source allocation strategy based on this model has been proposed.  Two implementationsalong these principles have been reported, but it seems that in neither case have further results beenannounced.  This report discusses the design and implementation of a dispatcher based on the working setprinciple, presents data to permit analysis of its behavior, and indicates future directions of researchon methods of controlling a computer system. | Rodriguez-Rosell, J.Dupuy, J. P..Kworking set, dispatcher, scheduler, time-sharingsystems, resource allocation, software evaluation, operating systems, supervisory systems.C4.31 4.32
2523 | A Region Coloring Technique for Scene Analysis | A method of converting a picture into a "cartoon"or "map" whose regions correspond to differently textured regions is described.  Texture edges in thepicture are detected, and solid regions surrounded by these (usually broken) edges are "colored in" usinga propagation process.  The resulting map is cleaned by comparing the region colors with the textures ofthe corresponding regions in the picture, and also by merging some regions with others according to criteriabased on topology and size.  The method has been applied to the construction of cloud cover mapsfrom cloud cover pictures obtained by satellites. | Strong III, J. P.Rosenfeld, A..Kpicture processing, scene analysis, edge detection.C3.63 8.2
2524 | Some Approaches to Best-Match File Searching | The problem of searching the set of keys ina file to find a key which is closest to a given query key is discussed.  After "closest," in terms ofa metric on the the key space, is suitably defined, three file structures are presented together with theircorresponding search algorithms, which are intended to reduce the number of comparisons required to achievethe desired result. These methods are derived using certain inequalities satisfied by metrics and bygraph-theoretic concepts.  Some empirical results are presented which compare the efficiency of the methods. | Burkhard, W. A.Keller, R. M..Kmatching, file structuring, file searching, heuristics, best match.C3.73 3.79 4.9
2525 | A Statistical Study of the Accuracy of Floating Point Number Systems | This paper presents the statistical resultsof tests of the accuracy of certain arithmetic systems in evaluating sums, products and inner products,and analytic error estimates for some of the computations.  The arithmetic systems studied are 6-digithexadecimal and 22-digit binary floating point number representations combined with the usual chopand round modes of arithmetic with various numbers of guard digits, and with a modified round mode with guarddigits.  In a certain sense, arithmetic systems differing only in their use of binary or hexadecimal numberrepresentations are shown to be approximately statistically equivalent inaccuracy.  Further, theusual round mode with guard digits is shown to be statistically superior in accuracy to the usual chopmode in all cases save one.  The modified round mode is found to be superior to the chop mode in all cases. | Kuki, H.Cody, W. J..Kerror analysis, floating point arithmetic,rounding, guard digits, number representation.C5.11 5.5 6.32
2526 | Asymmetric Memory Hierarchies |  A study is presented of some of the systemimplications of memory hierarchies in which the backing or secondary store has a very small read time,relative of both the time required for writing and to the read time of conventional backing storagedevices. Several analytic models are introduced, and it is shown that such hierarchies may operate inways which differ from those of more conventional hierarchies.  In particular, it is shown that it may notbe necessary to multiprogram in such a situation.  In the past, backing storage devices have been roughlysymmetric with respect to their read and write times.  This situation may not continue, as severaldevices are currently under development which may have a very small read-time/write-time ratio.  This studyplaces particular emphasis on one such system-the RCA read/write holographic optical memory. | Williams, J.G..Kasymmetric memory hierarchy, demand paging, holographicoptical memory, memory device, memory hierarchy, paging, storage device, storage hierarchy, virtual memory.C4.3 4.32 5.2 6.2 6.34
2527 | Implementation of High Level Language Machine | Computing machines which directly executethe statements of a high level language have been proposed in the past.  This report describes the actualimplementation of such a machine: it is a computer whose "machine language" is APL.  The machine is fullyoperational and correctly executes almost all of the APL operations on scalars, vectors, and arrays. The machine automatically allocates memory, executes statements, calls functions, converts numbers from onetype to another, checks subscripts, and automatically detects many types of programmer errors. | Hassitt, A.Lageschulte, J. W.Lyon, L. E..Kcomputer architecture, high level language machine,emulators, microprogramming, interpreters, execution speed, APL.C4.1 6.2
2528 | Binary Pattern Reconstruction from Projections [Z] (Algorithm R445) | Lau, J..Kpattern reconstruction, image reconstruction,data compression, picture processing.C3.63 5.30
2529 | Binary Pattern Reconstruction from Projections [Z] (Algorithm A445) | Chang, S..Kpattern reconstruction, image reconstruction,data compression, picture processing .C3.63 5.30
2530 | An Algorithm for Extracting Phrases ina Space-Optimal Fashion [Z] (Algorithm A444) | Wagner, R. A..Kinformation retrieval, coding, text compression.C3.70 5.6
2531 | Graduate Education: The Ph.D. Glut | Payne, W. H..Kgraduate education, Ph.D. production, accreditation.C1.5 2.2 2.3
2532 | On Harrison's Substring Testing Technique | Bookstein, A..Kstring, substring, hashing, information storage and retrieval.C3.74 5.30 5.5
2533 | Gray Code and the +- Sign Sequence when+-f (+-f(+-f(...+-f(x)...))) Is Ordered | Salzer, H. E..KGray code, sign sequences, ordering, positivemonotonic functions, binary system, Galois sum.C5.10
2534 | Design and Implementation of a Diagnostic Compiler for PL/I | PL/C is a compiler for a dialect for PL/I.  Thedesign objective was to provide a maximum degree of diagnostic assistance in a batch processing environment. For the most part this assistance is implicit and is provided automatically by the compiler. The most remarkablecharacteristic of PL/C is its perseverance-it completes translation of every program submitted andcontinues execution until a user-established error limit is reached. This requires that the compiler repairerrors encountered during both translation and execution, and the design of PL/C is dominated bythis consideration.  PL/C also introduces several explicit user-controlled facilities for program testing. To accommodate these extensions to PL/I without abandoning compatibility with IBM compiler PL/C permits"pseudo comments"-constructions whose contents can optionally be considered either source test or comment. In spite of the diagnostic effort PL/C is a fast and efficient processor.  It effectively demonstratesthat compilers can provide better diagnostic assistance than is customarily offered, even when a sophisticatedsource language is employed, and that this assistance need not be prohibitively costly. | Conway, R. W.Wilcox, T. R..Kcompilers, debugging, PL/I, programming languages.C1.5 4.12 4.42
2535 | The Effects of Multiplexing on a Computer-Communications System | A study is made of the way in which asynchronoustime division multiplexing changes the stochastic nature of the arrival process from a user to the computerand, consequently, affects the performance of a time-shared computer-communications system.  It isconcluded that while, for certain values of system parameters, there is noticeable improvement in theperformance of the computer (model), in the sense that time-shared scheduling delays are reduced, theseimprovements are offset by the transmission delays imposed by multiplexing so that there may be little orno change in the computer-communications system performance.  Analytical and simulation results arebased on the model of the computer-communications system being an M/D/1 queue (the multiplexor) in tandemwith a single exponential server (the computer).  Analytical results include a general description of theoutput process of an M/D/1 queue and the conditions under which this output process is approximately Poisson. | Pack, C. D..Kcomputer communications, time-sharing, multiplexing,scheduling algorithms, operating systems.C3.80 3.81 6.20
2536 | Telecommunications Using a Front-End Minicomputer | The use of a front-end minicomputer to providevaried remote terminal access to a large scale computer is considered.  The problems of embeddingtelecommunications I/O within an operating system are discussed, and it is shown how the decentralizationof intelligence acquired by front-end processing vastly simplifies the problem.  A specific implementation isdiscussed with emphasis on the main processor-minicomputer link, the hardware-software implementation, the effectof the main processor operating system, and an assessment of the advantages over a hard wired line controller. | Feinroth, Y.Franceschini, E.Goldstein, M..Ktelecommunications, minicomputer, front-endprocessor, remote job entry, remote terminals.C3.81 4.32 4.41
2537 | Common Phrases and Minimum-Space Text Storage | A method for saving storage space for textstrings, such as compiler diagnostic messages, is described.  The method relies on hand selection of aset of text strings which are common to one or more messages.  These phrases are then stored only once. The storage technique gives rise to a mathematical optimization problem: determine how each message shoulduse the available phrases to minimize its storage requirement.  This problem is nontrivial when phraseswhich overlap exist.  However, a dynamic programming algorithm is presented which solves the problem in timewhich grows linearly with the number of characters in the text.  Algorithm 444 applies to this paper. | Wagner, R. A..Kdiagnostic messages, error messages, common phrases,minimum space, text storage, optimization, dynamic programming.C3.73 4.10 5.41
2538 | A Computer Science Course Program for Small Colleges | The ACM Subcommittee on Small College Programsof the Committee on Curriculum in Computer Science (CCCS) was appointed in 1969 to consider the uniqueproblems of small colleges and universities, and to make recommendations regarding computer science programsat such schools.  This report, authorized by both the subcommittee and (CCCS), supplies a set ofrecommendations for courses and necessary resources.  Implementation problems are discussed, specificallywithin the constraints of limited faculty and for the purposes of satisfying a wide variety of objectives. Detailed description of four courses are given; suggestions are made for more advanced work;and an extensive library list is included. | Austing, R. H.Engel, G. L..Kcomputer science education, course proposals, smallcolleges, programming course, social implications course, computer organization course, file organization course, bibliographies.C1.52
2539 | Solution of the Transcendental Equation w*exp(w)=x [C5] (Algorithm A443) | Fritsch, F. N.Shafer, R. E.Crowley,W. P..Ktranscendental function evaluation, solution of transcendental equation.C5.12 5.15
2540 | Properties of the Working Set Model (Corrigendum) | Denning, P. J.Schwartz, S. C.
2541 | An Overview of the ISPL Computer System Design | This paper explores the advantages of the concurrentdesign of the language, operating system, and machine (via microcode) to create an interactive programminglaboratory.  It describes the synergistic effect that the freedom to move and alter features fromone of these domains to another has had on the design of this system (which has not been implemented). This freedom simplified both incremental compilation and the system's addressing structure, and centralized thecommunication mechanisms enabling the construction of hierarchical subsystems.  It also suggested an importantnew concept for operating systems: separation of the scheduling from the maintenance functions in resourceallocation. This separation enables incorporation of new scheduling algorithms (decision of what to do) withoutendangering the system integration (correctly performing the scheduling decisions). | Balzer, R. M..Kconcurrent design, operating-system, scheduling,interprogram communication, incremental compilation, virtual addressing, debugging, hierarchical subsystems.C4.0 4.13 4.22 4.30 4.32 4.41 4.42 6.20
2542 | A Software Design and Evaluation System | A critical failure of current software systemdesign and implementation methodology is that the performance of a proposed design is not evaluatedbefore it is actually implemented.  In this paper the reasons for this failure are explored, and a new methodologywhich overcomes many of the difficulties is proposed.  A system which integrates performance evaluationwith design and implementation is described.  This system is based on a simple, high level languagewhich is used to describe the evolving system at all stages of its development.  The source languagedescription is used as direct input to performance analysis and simulation routines.  Using the performanceinformation obtained from these routines as feedback, the problems which adversely affect performanceare detected early enough so that they can be corrected without costly major reimplementation of the proposed system. | Graham, R. M.Clancy, G. J. Jr.DeVaney, D. B..Koperating system development, language processingsoftware evaluation, compilers, system programming, supervisory systems, debugging, program maintenance,modeling, system integration, simulation.C4.0 4.12 4.22 4.30 4.42 4.43 8.1
2543 | Reducing the Retrieval Time of Scatter Storage Techniques | A new method for entering and retrieving informationin a hash table is described.  The method is intended to be efficient if most entries are lookedup several times.  The expected number of probes to look up an entry, predicted theoretically and verifiedby Monte Carlo experiments, is considerably less than for other comparable methods if the tableis nearly full.  An example of a possible Fortran implementation is given. | Brent, R. P..Kaddress calculation, content addressing, file searching,hash addressing, hash code, linear probing, linear quotient method, scatter storage, searching, symbol table.C3.7 3.73 3.74 4.1 4.9
2544 | Automatic Error bounds for Simple Zeros of Analytic Functions | The Cauchy-Ostrowski theorem on convergenceof Newton iterates for an analytic function in one variable is extended to include computational errorsusing complex interval arithmetic. Several numerical examples are given for polynomials with real and complexroots and one example for the Bessel function of the first kind. | Rokne, J..Kreal intervals, complex intervals, real intervalarithmetic, complex interval arithmetic, Newton's method, Cauchy-Ostrowski theorem, zeros ofpolynomials, zeros of Bessel functions.C5.11 5.12 5.15
2545 | A Theory of Discrete Patterns and Their Implementation in SNOBOL4 | The notion of a discrete pattern is formalizedand certain properties deduced.  A pattern is shown to be a generalization of a formal language. Algorithms for implementing the kinds of patterns in SNOBOL4 are given.  The general approach is to create,in-so-far as possible, a bottom-up parse from a top-down specification. | Gimpel, J. F..Kpatterns, SNOBOL4, pattern theory, parsing, pattern matching,string processing, pattern implementation.C4.29 5.39
2546 | The Use of Grammatical Inference for Designing Programming Languages | Both in designing a new programming languageand in extending an existing language, the designer is faced with the problem of deriving a "natural" grammarfor the language.  We are proposing an interactive approach to the grammar design problem wherein the designerpresents a sample of sentences and structures as input to a grammatical inference algorithm.  The algorithmthen constructs a grammar which is a reasonable generalization of the examples submitted by the designer. The implementation is presently restricted to a subclass of operator precedence grammars, buta second algorithm is outlined which applies to a larger class of context-free grammars. | Crespi-Reghizzi, S.Melkanoff, M. A.Lichten, L..Kgrammar design, language definition, inference,identification in the limit, extensible languages.C3.61 4.2 5.23
2547 | Representation of Contours ad Regions for Efficient Computer Search | A novel computer-searchable representationfor the three basic pictorial features, contour maps, region coverage, and line structures, is described. The representation, which has practical storage requirements, provides a rapid mean of searching largefiles for data associated with geometric position as well as with attribute value.  An application of thisrepresentation to handling terrain information illustrates its utility.  The algebraic propertiesof the data structure make it computationally easy to determine whether a point lies within a closed boundary;compute the area contained by a closed boundary; generate the closed boundary representing the union orintersection of two closed boundaries; and determine the neighboring boundaries to a point and theminimum distances between them and the point. | Merrill, R. D..Kcontour map representation, region boundary representation,computer-search-able structure, graphic data retrieval, graphic language, two-dimensionalpatterns, computer graphics, graphic display.C3.21 3.23 3.79 6.35
2548 | Normal Deviate [S14] (Algorithm A442) | Hill, G. W.Davis, A. W..Knormal distribution inverse, probittransform, Taylor series approximation.C5.12 5.5
2549 | Random Deviates from the Dipole Distribution [G5] (Algorithm A441) | Knop, R. E..Krandom number, probability density, probability distribution,Dipole distribution, Cauchy distribution, simulation, Monte Carlo.C3.17 5.5
2550 | A Multidimensional Monte Carlo Quadrature withAdaptive Stratified Sampling [D1] (Algorithm A440) | Gallaher, L. J..KMonte Carloquadrature, stratified sampling,adaptive quadrature, sequential stratification.C5.16 5.5
2551 | Mutual Recursion in Algol 60 Using Restricted Compilers | Atkins,M. S..KAlgol 60, mutual recursion, compiler restrictions.C4.12 4.22
2552 | A Note on When To Chain Overflow Items Within a Direct-Access Table | Bays, C..Khash code, open hash, chaining, information retrieval, collision.C3.7 4.9
2553 | The Practical Aspect of Computer Science Education-Discussion | Blount, S. E..Keducation, computer engineering, computerscience curriculum, systems design.C1.52 6.0
2554 | Reduction of a Band-Symmetric Generalized Eigenvalue Problem | An algorithm is described for reducing thegeneralized eigenvalue problem Ax = lambda Bx to an ordinary problem, in case A and B are symmetric bandmatrices with B positive definite.  If n is the order of the matrix and m the bandwidth, the matricesA and B are partitioned into m-by-m blocks; and the algorithm is described in terms of these blocks. The algorithm reduces the generalized problem to an ordinary eigenvalue problem for a symmetric bandmatrix C whose bandwidth is the same as A and B.  The algorithm is similar to those of Rutishauser andSchwartz for the reduction of symmetric matrices to band form.  The calculation C requires order mn^2operation.  The round-off error in the calculation of C is of the same order as the sum of the errors ateach of the n/m steps of the algorithm, the latter errors being largely determined by the condition of B with respect to inversion. | Crawford, C. R..Kgeneralized eigenvalues, symmetric band matrices.C5.14
2555 | Variable-Precision Exponentiation | A previous paper presented an efficient algorithm,called the Recomputation Algorithm, for evaluating a rational expression to within any desired toleranceon a computer which performs variable-precision arithmetic operations.  The Recomputation Algorithm can beapplied to expressions involving any variable-precision operations having O(10^(-p) + SUM{|Ei|}) error bounds,where p denotes the operation's precision and Ei denotes the error in the operation's ith argument. This paper presents an efficient variable-precision exponential operation with an error bound of the aboveorder.  Other operations such as log, sin, and cos, which have simple series expansions, can be handled similarly. | Richman, P. L..Kvariable-precision, exponential function,error analysis, interval arithmetic.C5.11
2556 | Adaptive Correction of Program Statements | A method of analyzing statements in a programminglanguage which can tolerate a considerable inaccuracy in their specification is proposed. This methodinvolves principles at present mainly confined to studies in the area of artificial intelligence suchas feature extraction, approximate tree matching, and strategy improvement by feedback from the matching process. A pilot program incorporating the principles is described and preliminary operating results are presented. A final section surveys further principles which are currently being investigated. | James, E. B.Partridge, D. P..Kadaptive, linguistic pattern matching, automaticparsing, approximate match, compiler, program statement analysis, syntax analysis.C3.62 3.63 3.65
2557 | On the Time Required for a Sequence of Matrix Products | This paper discusses the multiplication of conformablesequences of row vectors, column vectors, and square matrices.  The minimum time required to evaluatesuch products on ordinary serial computers as well as parallel computers is discussed.  Algorithmsare presented which properly parse such matrix sequences subject to the constraints of the machine organization. | Muraoka, Y.Kuck, D. J..Kmatrix expressions, matrix multiplication, operationminimization, parallel machine, time minimization.C4.22 5.14
2558 | Protection in Programming Languages | Linguistic mechanisms which can be used to protectone subprogram from another's malfunctioning are described.  Function-producing functions and varioustype-tagging schemes are considered.  An attempt is made to distinguish between access limitation and authentication. | Morris, J. H. Jr..Kprotection, types, environments,trademarks, seals,access keys, access control authentication, secrecy.C4.2 4.3
2559 | The Reallocation of Hash-Coded Tables | When the space allocation for a hash-coded tableis altered, the table entries must be rescattered over the new space.  A technique for accomplishingthis rescattering is presented.  The technique is independent of both the length of the table and the hashingfunction used, and can be utilized in conjunction with a linear reallocation of the table being rescattered. Moreover, it can be used to eliminate previously flagged deletions from any hash-coded table, or to changefrom one hashing method to another.  The efficiency of the technique is discussed and theoretical statistics are given. | Bays, C..Kreallocation, dynamic storage, hash code, scatter storage, deletions.C3.7 3.73 3.74 4.9
2560 | A Queuing Model of a MultiprogrammedComputer with a Two-Level Storage System | The results are presented of an analysis ofa probabilistic model of a multiprogrammed computer system with a two-level storage system in which thereis sequential dependency of accesses between the devices.  Expressions are obtained for the long-run probabilitythat both the CPU and each of the storage devices are busy.  Some numerical results are given whichquantify the gains in CPU utilization obtainable by multiprogramming in the presence of this type of storage system. | Shedler, G. S..Kmultiprogrammed computer system, storage system, hierarchical index sets.C4.32
2561 | A Heuristic Approach to Inductive Inference in Fact Retrieval Systems | Heuristic procedures are presented which havebeen developed to perform inferences by generalizing from available information.  The procedures make useof a similarity structure which is imposed on the data base using nonnumerical clustering algorithms.  Theyare implemented in a model fact retrieval system which uses a formal query language and a property-list datastructure.  A program of experiments is described wherein the procedures are used with test data baseswhich are altered by deleting part of the data and by purposely introducing false data.  It is found thatthe system can infer the correct response under a variety of conditions involving incomplete and inconsistent data. | Skinner, C. W..Kinference, inductive inference, clustering, fact retrieval, heuristics.C3.61 3.71 3.79
2562 | Routing Problem (Algorithm R456) | Tesch, G.
2563 | Merge Sort Algorithm (R426) | Bron, C.
2564 | Hidden-Line Plotting Program (Algorithm R420) | Ellis, T. M. R.
2565 | A Gaussian Pseudo-Random Number Generator (Algorithm 488) | Brent, R. P..Krandom numbers, pseudo-random numbers,Gaussian distribution, normal distribution.C5.39 5.5
2566 | Exact Cumulative Distribution of the Kolmogorov-SmirnovStatistic for Small Samples (Algorithm A487) | Pomeranz, J..KKolmogorov-Smirnov test, K-S statistic, goodness-of-fit testing.C8.1 5.5
2567 | An Exponential Method for the Solution ofSystems of Ordinary Differential Equations  | An explicit, coupled, single-step method forthe numerical solution of initial value problems for systems of ordinary differential equations is presented. The method was designed to be general purpose in nature but to be especially efficient when dealingwith stiff systems of differential equations.  It is, in general, second order except for the caseof a linear system with constant coefficients and linear forcing terms; in that case, the method is thirdorder.  It has been implemented and put to routine usage in biological applications-where stiffness frequentlyappears-with favorable results.  When compared to a standard fourth order Runge-Kutta implementation,computation time required by this method has ranged from comparable for certain nonstiff problems to betterthan two orders of magnitude faster for some highly stiff systems. | Chu, S. C.Berman, M..Knumerical solution, ordinary differential equations,initial value problems, stiff systems.C5.17
2568 | A Graph Formulation of a School Scheduling Algorithm | The problem classically titled "The ExaminationSchedule Problem" takes various forms in the literature.  Most of these formulations can be presentedin the terminology of classical Network Theory.  One such formulation is:  Given a nondirected network,partition its nodes into a minimal number of subsets such that no two members of the same subsetare connected by anarc.  An obvious lower limit to this number is the size of the largest strongly connectedsubgraph.  Kirchgassner proved that an upper limit is this size plus one.  One logical extension ofthe previous work is the introduction of variable length examinations where W(I) is the number of periodsfor exam I.  The object of this paper is to generalize the definition of largest strongly connected subgraphto include the weighting of nodes, to present an approximate algorithm which usually finds the largeststrongly connected subgraph, and to discuss the application of this algorithm to the solution ofschool scheduling and exam scheduling problems. | Salazar, A.Oakford, R. V..Kscheduling, school scheduling, examination scheduling,nondirected network, graph, subgraph, strongly connected subgraph.C3.51 3.52
2569 | Computer Generation of Gamma Random Variateswith Non-integral Shape Parameters | When the shape parameter, a, is integral,generating gamma random variables with a digital computer is straightforward.  There is no simple methodfor generating gamma random variates with non-integral shape parameters.  A common procedure is to approximatelygenerate such random variables by use of the so-called probability switch method.  Another procedure,which is exact, is due to Johnk.  This paper presents a rejection method for exactly generatinggamma random variables when a is greater than 1.  The efficiency of the rejection method is shown tobe better than the efficiency of Johnk's method.  The paper concludes that when a is non-integral the followingmix of procedures yields the best combination of accuracy and efficiency: (1) when a is less than1, use Johnk's method; (2) when 1 is less than a and a is less than 5, use the rejection method; (3) whena is greater than 5, use the probability switch method. | Wallace, N. D..Ksimulation, gamma random variables,probability distribution, random numbers.C5.5 8.1
2570 | A Comparison of List Schedules for Parallel Processing Systems | The problem of scheduling two or more processorsto minimize the execution time of a program which consists of a set of partially ordered tasksis studied.  Cases where task execution times are deterministic and others in which execution times arerandom variables are analyzed.  It is shown that different algorithms suggested in the literature vary significantlyin execution time and that the B-schedule of Coffman and Graham is near-optimal.  A dynamic programmingsolution for the case in which execution times are random variables is presented. | Adam, T. L.Chandy, K. M.Dickson, J. R..Kparallel processing, precedence graphs, scheduling,list scheduling, optimization, dynamic programming.C4.3 4.32 4.34 4.35 5.3 5.32 5.4 5.42 8.1
2571 | An Analytic Model of the Hasp Execution Task Monitor | The HASP Execution Task Monitor periodicallyrearranges the OS/360 dispatching chain to give tasks preemptive execution priority in inverse order tothat of their cpu utilization history.  The effect is to keep the I/O bound tasks active and to preventcpu bound tasks from locking out other tasks.  This paper develops a simple model of the Execution TaskMonitor and employs it to study the effectiveness of the monitor in improving system performance.  Amodified strategy monitor control is investigated for the case of task execution in a memory hierarchy of varying speeds. | Strauss, J. C..KHasp, OS/360, dispatching, scheduling, modeling, performance evaluation.C4.32 8.1
2572 | Arguments for a Moratorium on the Constructionof a Community Information Utility | In this article the author urges a prudentand decentralized approach to the question of the design and desirability of computerized community informationutilities.  Before accepting the inevitability and desirability of this or any technology, we should:(1) be sure of the feasibility (internally and externally) of what is proposed; (2) project and perhapswait for changes in complementary techniques; (3) evaluate current and projected supplementary techniques;(4) establish the existence of demand for what is proposed; (5) take steps to involve a representativegroup of ultimate users in systems design, and (6) carefully think through possible side effectson man and his world view.  Current proposals for community information utilities are examined in thisframework, and the conclusion is drawn that society is not yet in a position to justify either the constructionof an information utility in a prototype community or the acceptance of a policy infavor of its widespread implementation. | Press, L. I..Kcommunity information utilities, social implications, public policy.C2.1 2.3
2573 | Computer Programming as an Art | Knuth, D. E.
2574 | Multiple Exists from a Loop Using Neither GO TO nor Labels | Evans, R. V..Kgoto free programming, control structures,multiple exists from loops, exit statement.C4.20 4.22
2575 | The Best-Match Problem in Document Retrieval | Van Rijsbergen, C. J..Kdocument retrieval, best match, clustering, filesearching, matching, dissimilarity, hierarchy, classification.C3.73 3.74 3.79 5.30
2576 | A Simple Technique for Representing Strings in Fortran IV | Hanson, D. R..Kstring processing, Fortran IV, string representation,structuredprogramming, data structures.C3.70 4.0 4.19 4.9
2577 | An On-Site Data Management System Application in Field Archaeology | Brown, J. A.Werner, B..KAPL-PLUS, archaeology, Koster prehistoricsite data management, retrieval systems.C3.36 3.70 3.73 3.89
2578 | Self-stabilizing Systems in Spite of Distributed Control | Dijkstra, E. W..Kmultiprocessing, networks, self-stabilization, synchronization,mutual exclusion, robustness, sharing, error recovery, distributed control, harmonious cooperation, self-repair.C4.32
2579 | Register Allocation Via Usage Counts | This paper introduces the notion of usage counts,shows how usage counts can be developed by algorithms that eliminate redundant computations, anddescribes how usage counts can provide the basis for register allocation.  The paper compares registerallocation based on usage counts to other commonly used register allocation techniques, and presents evidencewhich shows that the usage count technique is significantly better than these other techniques. | Freiburghouse, R. A..Koptimization, redundant computations, common subexpressions,register allocation, compilers, programming languages, virtual memory, demand paging.C4.12 4.2 4.39
2580 | A Method for Composing Simple Traditional Music by Computer | A method is described for composing musicalrounds by computer.  This method uses some music theory plus additional heuristics.  Fundamental to themethod is a set of productions together with sets of applicability rules and weight rules which operateon the productions deciding when and to what extent they are available for use.  Several rounds generatedby the computer implementation of the method are presented.  Generally, the resultant music sounds mediocreto the professional although usually pleasing to the layman.  It appears that full-blown music theoryis not needed for rounds--all the hardware required for structural levels is not necessary for these pieces. The author has tried to address both musicians and computer scientists. | Rader, G. M..Kartificial intelligence, heuristic programming,models of cognitive processes, computer music, computer composition, music theory, formal languages, probabilistic grammars.C3.44 3.65 5.23
2581 | A Locally-Organized Parser for Spoken Input | This paper describes LPARS, a locally-organizedparsing system, designed for use in a continuous speech recognizer.  LPARS processes a string of phonemeswhich contains ambiguity and error. The system is locally-organized in the sense that it builds localparse structures from reliable word candidates recognized anywhere in an input utterance.  These localstructures are used as "islands of reliability" to guide the search for more highly garbledwords which might complete the utterance.   | Miller, P. L..Kparsing, speech recognition, speech understanding,augmented transition network, local parsing.C3.42 3.65 3.69
2582 | Improving Locality by Critical Working Sets | A new approach to program locality improvementvia restructuring is described.  The method is particularly suited to those systems where primary memoryis managed according to a working set strategy.  It is based on the concept of critical working set, aworking set which does not contain the next memory reference.  The data the method operates upon are extracted froma trace of the program to be restructured.  It is shown that, except in some special cases, themethod is not optimum.  However, the experimental results obtained by using the method to restructure aninteractive text editor and the file system module of an operating system have shown its substantial superiorityover the other methods proposed in the literature. | Ferrari, D..Kprogram restructuring, program segmentation, localityimprovement, memory hierarchies, virtual memory, multiprogramming, restructuring techniques, staticrestructuring, dynamic restructuring, working set strategy, critical working set.C4.32 4.39 4.43 4.49 4.9
2583 | Guidelines for Humanizing Computerized InformationSystems: A Report from Stanley House | Sterling, T. D..Khumanization, social implication, management, informationsystems, regulations, social and behavioral sciences, philosophy.C1.5 2 3.3 3.4 3.5
2584 | Enumerating Full-Time Programmers | Data from the 1970 Census and the Departmentof Labor's Area Wage Surveys are used to derive estimates of the number of full-time programmers employedduring the years 1969 through 1973.  The 1973 figure of 180,000 is considerably less than suggested inearlier reports.  It is recommended that educational administrators consider whether the many courses aimedat training programmers are justified on a vocational basis. | Gilchrist, B.Weber, R. E..Kprogrammer, employment, 1970 Census, Area Wage Survey.C1.50 2.2 2.42
2585 | Efficient Implementation of a Variable ProjectionAlgorithm for Nonlinear Least Squares Problems (Errata) | Krogh, F. T.
2586 | Adapting Optimal Code Generation for ArithmeticExpressions to the Instruction Sets Available on Present-Day Computers (Errata) | Stockhausen, P. F.
2587 | On the Construction of a Representative Synthetic Workload (Errata) | Sreenivarsan, K.Kleinman, A. J.
2588 | Rosenbrock Function Minimization (Algorithm R450) | Klemes, J.Klemsa, J.
2589 | A Computer Routine for Quadratic and LinearProgramming Problems (Algorithm R431) | Proll, L. G.
2590 | Hypergeometric (Algorithm C191) | Kopelaar, H.
2591 | Numerical Inversion of Laplace Transform (Algorithm A486) | Veillon, F..KLaplace transform inversion.C5.16
2592 | On Generation of Test Problems for Linear Programming Codes | Users of linear programming computer codes haverealized the necessity of evaluating the capacity, effectiveness, and accuracy of the solutions providedby such codes.  Large scale linear programming codes at most installations are assumed to be generating correctsolutions without ever having been "bench-marked" by test problems with known solutions.  The reason forthis failure to adequately test the codes is that rarely are there large problems with known solutions readilyavailable.  This paper presents a theoretical justification and an illustrative implementation of a methodfor generating linear programming test problems with known solutions.  The method permits the generationof test problems that are of arbitrary size and have a wide range of numerical characteristics. | Charnes, A.Raike, W. M.Stutz, J. D.Walters, A. S..Klinear programming, test problem generation,LP program evaluation, LP program validation.C5.41
2593 | A Back-end Computer for Data Base Management | It is proposed that the data base managementfunction be placed on a dedicated back-end computer which accepts commands (in a relatively high level languagesuch as the CODASYL Data Base Task Group, April 1971 Report) from a host computer, accesses thedata base on secondary storage, and returns results.  The advantages of such a configuration are discussed.  Anexperimental implementation, called the experimental Data Management System, XDMS, is described and certainconclusions about the back-end approach are drawn from this implementation. | Canaday, R. H.Harrison, R. D.Ivie, E. L.Ryder, J. L.Wehr, L. A..Kdata base management, information retrieval, computerconfigurations, computer networks, Data Base Task Group Language, data base protection,data base portability, back-end computer.C3.79 4.22 4.33 4.35
2594 | Structured Data Structures | Programming systems which permit arbitrarylinked list structures enable the user to create complicated structures without sufficient protection. Deletions can result in unreachable data elements, and there is no guarantee that additions will be performedproperly.  To remedy this situation, this paper proposes a gauge which provides for the creationof a restricted class of data structures but ensures the correctness of the program.  This is accomplishedby an explicit structure declaration facility, a restriction on the permissible operations, and execution-time checks. | Shneiderman, B.Scheuermann, P..Kstructured programming, data structures, data base management system.C3.50 3.51 3.72 3.73 3.79 4.20 4.22
2595 | A Note on the Calculation Working Set Size | Finite-length reference string of arbitrarystructure are considered, and an exact expression for average working set size in terms of "corrected"interreference interval statistics is derived.  An example is discussed; upper and lower bounds are obtained;and the average working set size function is shown to be efficiently obtained for a set of pagesizes, in a single pass of the reference string.  This work follows the developments of a paper by Denningand Schwartz, who consider infinite-length reference strings which satisfy certain statisticalproperties and who derive an expression relating the asymptotic average working set size to the asymptoticmissing page rate function under working set replacement. | Slutz, D. R.Traiger, I. L..Kworking-set model, paging, program behavior.C4.3
2596 | A Weighted Buddy Method for Dynamic Storage Allocation | An extension of the buddy method, called the weightedbuddy method, for dynamic storage allocation is presented.  The weighted buddy method allows blocksizes of 2^k and 3(2^k), whereas the original buddy method allowed only block sizes of 2^k. This extensionis achieved at an additional cost of only two bits per block.  Simulation results are presented whichcompare this method with the buddy method.  These results indicate that for a uniform request distribution,the buddy system has less total memory fragmentation than the weighted buddy algorithm.  However, the totalfragmentation is smaller for the weighted buddy method when the requests are for exponentially distributed block sizes. | Shen, K. K.Peterson, J. L..Kweighted buddy algorithm, buddy systems,memory allocation, dynamic storage allocation.C3.89 4.32 4.39
2597 | Monitors: An Operating System Structuring Concept | This paper develops Brinch-Hansen's concept ofa monitor as a method of structuring an operating system.  It introduces a form of synchronization, describesa possible method of implementation in terms of semaphores and gives a suitable proof rule.  Illustrativeexamples include a single resource scheduler, a bounded buffer, an alarm clock, a buffer pool, adisk head optimizer, and a version of the problem of readers and writers. | Hoare, C. A. R..Kmonitors, operating systems, scheduling, mutualexclusion, synchronization, system implementation languages, structured multiprogramming.C4.31 4.22
2598 | Extending the Information Theory Approach to ConvertingLimited-Entry Decision Tables to Computer Programs | This paper modifies an earlier algorithm forconverting decision tables into flowcharts which minimize subsequent execution time when compiled intoa computer program.  The algorithms considered in this paper perform limited search and, accordingly,do not necessarily result in globally optimal solutions.  However, the greater search effort neededto obtain a globally optimal solution for complex decision tables is usually not justified by sufficientsavings in execution time.  There is an analogy between the problem of converting decision tables intoefficient flowcharts and the well-understood problem in information theory of noiseless coding.  The resultsof the noiseless coding literature are used to explore the limitations of algorithms used to solvethe decision table problem.  The analogy between the two problems is also used to develop improvementsto the information algorithm in extending the depth of search under certain conditions and in proposingadditional conditions to be added to the decision table.  Finally, the information algorithm is comparedwith an algorithm proposed in a recent paper by Verhelst. | Shwayder, K..Kcoding, decision tables, flowcharting, informationtheory, noiseless channel, sorting.C3.50 5.31
2599 |  First Order Approximation to the Optimum Checkpoint Interval | Young, J. W..Kcheckpoint, job failure, operations, programmingcheckpoint, random failure, operations, programming.C2.43 4.0
2600 | Computation of g-Splines via a FactorizationMethod [E2] (Algorithm A485) | Eidson, H. D.Schumaker, L. L..Kapproximation, spline approximation.C5.13
2601 | Evaluation of the Modified Bessel Functions K0(Z)and K1(Z) for Complex Arguments [S17] (Algorithm A484) | Burrell, K. H..KBessel functions, Hankel functions, modifiedBessel functions, Gauss-Hermite quadrature.C5.12
2602 | Masked Three-Dimensional Plot Programwith Rotations [J6] (Algorithm A483) | Watkins, S. L..Kplotting, three-dimensional plotting.C4.41
2603 | The Equivalence of Reducing TransitionLanguages and Deterministic Languages | The class of reducing transition languagesintroduced by Eickel, Paul, Bauer, and Samelson was shown by Morris to be a proper superclass of thesimple precedence languages.  In this paper this result is extended, showing that, in fact, the first classis equivalent to the class of deterministic context free languages. | Schkolnick, M..Kreducing transition languages, syntax controlledgenerators, deterministic context-free grammars.C4.12 5.23
2604 | An Interactive Graphic Display for RegionPartitioning by Linear Programming | Using linear programming, an interactive graphicdisplay system has been implemented to solve the region design problem of partitioning a region intoN nonoverlapping subregions in such a way that their areas are in specified proportions and that thetotal cost of servicing them is a minimum.  In a conversational manner, a user can easily obtain differentpartitionings by specifying and modifying the boundary, the service centers' locations, the areaproportions, and the cost functions.  Examples are included. | Cheung, T..Kinteractive graphic display, region partitioning,area specification, linear programming.C5.41 8.2 8.3
2605 | A Precise Numerical Analysis Program | A description is given of a program for computingthe solution to a small number of standard numerical analysis problems to any specified accuracy,up to a limit of 2000 correct decimal places.  Each computed number is bounded in an interval with amultiple precision midpoint.  Arithmetic operations involving these numbers are executed according to intervalarithmetic concepts, with non-significant digits automatically discarded.  Details are suppliedof problem specification and problem computation. | Aberth, O..Kinterval arithmetic, multiple precision, list structure, error control.C4.49 5.10 5.11 5.12 5.14 5.19
2606 | A New Integration Algorithm for Ordinary DifferentialEquations Based on Continued Fraction Approximations | A new integration algorithm is found, and animplementation is compared with other programmed algorithms.  The new algorithm is a step-by-step procedurefor solving the initial value problem in ordinary differential equations.  It is designed to approximatepoles of small integer order in the solutions of the differential equations by continued fractions obtainedby manipulating the sums of truncated Taylor series expansions.  The new method is compared withGragg-Bulirsh-Stoer, and the Taylor series method.  The Taylor series method and the new method are shownto be superior in speed and accuracy, while the new method is shown to be most superior when the solutionis required near a singularity.  The new method can finally be seen to pass automatically through singularitieswhere all the other methods which are discussed will have failed. | Willers, I. M..Kordinary differential equations, initial value problem,integration, Taylor series, singularities, continued fractions, program comparison.C5.17
2607 | A Problem-List of Issues Concerning Computers and Public Policy | ACM Committee.Keconomic and sociological effects, the public and computers.C2.11 2.12
2608 | Recurrence Relations for the Fresnel Integral and Similar Integrals | Acton, F. S..Krecurrence relations, Fresnel integral, exponential integral.C5.12
2609 | Interpolation with Rounded Ramp Functions | A new interpolation function is introduced. It has infinitely many continuous derivatives and is a composition of ramp functions with smoothed bendscalled Rounded Ramp Functions.  How the interpolation function can be extended to more than one variable isshown.  An efficient Fortran program is given by which the interpolation function can be obtained for a given point set. | Lagerlof, R. O. E..Kinterpolation, approximation, smooth interpolation,multi variable interpolation, interpolation function, approximation function, spline-like function.C5.13
2610 | Gauss Harmonic Interpolation Formulas | Let R be an open, bounded, simply connectedregion in the (x,y)-plane and let (x*,y*) be a point in R.  Assuming R is starlike with respect to(x*,y*), we discuss a method for computing Gauss harmonic interpolation formulas for R and the point (x*,y*). Such formulas approximate a harmonic function at (x*,y*) in terms of a linear combination of itsvalues at certain selected points on the boundary of R.  Such formulas are useful for approximatingthe solution of the Dirichlet problem for R. | Stroud, A. H..Kinterpolation, quadrature, harmonic interpolation,harmonic quadrature, Dirichlet problem.C5.13 5.16 5.17
2611 | The Complex Method for Constrained Optimization (Algorithm R454) | Shere, K. D.
2612 | Rosenbrock Function Minimization (Algorithm R450) | Bultheel, A.
2613 | Transitivity Sets [G7] (Algorithm A482) | McKay, J.Regener, E..Ktransitivity, sets.C5.39
2614 | Arrow to Precedence Network Transformation [H] (Algorithm A481) | Crandall, K. C..Kcritical path, networks, precedence networks.C3.23 5.40
2615 | Procedures for computing Smoothing and InterpolatingNatural Splines [E1] (Algorithm A480) | Lyche, T.Schumaker, L. L..Kapproximation, interpolation, spline, natural spline, spline smoothing.C5.13
2616 | On the Conversion of Programs to Decision Tables: Method and Objectives | The problems of converting programs to decisiontables are investigated.  Objectives of these conversions are mainly program debugging and optimizationin practice.  Extensions to the theory of computation and computability are suggested. | Cavouras, J. C..Kdecision tables, program optimization, debugging,semantics, theory of programming, systems analysis.C4.19 4.42 4.43 5.21 5.29
2617 | A Note on Subexpression Ordering inthe Evaluation of Arithmetic Expressions | Denning, P. J.Graham, G. S.
2618 | A New Solution of Dijkstra's Concurrent Programming Problem | A simple solution to the mutual exclusion problemis presented which allows the system to continue to operate despite the failure of any individual component. | Lamport, L..Kcritical section, concurrent programming, multiprocessing, semaphores.C4.32
2619 | Graph Coloring Conditions for the Existenceof Solutions to the Timetable Problem | A necessary and sufficient condition is presentedfor the existence of a solution to the Gotlieb class-teacher timetable problem.  Several relationshipsare established between the class-teacher timetable problem and graphs with preconditions.  These preconditionsplace additional restrictions on the coloration of a graph.  The preconditions correspond to the unavailabilityconstraints and preassigned meetings in the class-teacher timetable problem.  Using some recentresults that convert graphs with preconditions to graphs without them, it is shown that the existenceof a coloration of a graph is the required necessary and sufficient condition. | Neufeld, G. A.Tartar, J..Kgraphs, coloration, preassignment, preventionof assignment, class-teacher timetables.C3.9 5.30 5.32 5.59
2620 | Execution Time Requirements for Encipherment Programs | Although encipherment has often been discussedas a means to protect computer data, its costs are not well established.  Five experiments were conductedto measure the cpu time on a CDC 6400 required by additive ciphers programmed both in assembly languageand in Fortran: a "null transformation" to measure the time to move data without encipherment; enciphermentwith one-word key; encipherment with a 125-word key; double key encipherment; and encipherment usinga pseudo random key.  The results were analyzed for consistency over 100 runs, and the effects of constantand intermittent errors were considered.  Timing rates for assembly language encipherment rangedfrom 498,800 characters per second for a pseudo random key cipher to 2,092,000 characters per secondfor a constant one-word key cipher.  The latter is almost equivalent to the rate required simply to movedata without encipherment.  Fortran tests required over four times as much cpu time.  This paper introducesthe idea on enciphering time coefficient the ratio of enciphering time to the time taken tofetch and store data without encipherment. | Friedman, T. D.offman, L. J..Kencipherment, ciphers, security, privacy transformations,protection, cryptography, cryptology.C2.12 2.43 3.70 3.81 4.32 4.39
2621 | A High Security Log-in Procedure | The protection of time sharing systems fromunauthorized users is often achieved by the use of passwords.  By using one-way ciphers to code the passwords,the risks involved with storing the passwords in the computer can be avoided.  We discuss the selectionof a suitable one-way cipher and suggest that for this purpose polynomials over a prime modulus aresuperior to one-way ciphers derived from Sannon codes. | Purdy, G. B..Koperating systems, time sharing systems, security, cryptography.C4.35
2622 | A User Authentication Scheme Not Requiring Secrecy in the Computer | In many computer operating systems a user authenticateshimself by entering a secret password known solely to himself and the system.  The system comparesthis password with one recorded in a Password Table which is available to only the authenticationprogram.  The integrity of the system depends on keeping the table secret.  In this paper a passwordscheme is presented which does not require secrecy in the computer.    All aspects of the system, includingall relevant code and data bases, may be known by anyone attempting to intrude.  The scheme is basedon using a function H which the would-be intruder is unable to invert.  This function is applied to theuser's password and the result compared to a table entry, a match being interpreted as authentication ofthe user.  The intruder may know all about H and have access to the table, but he can penetrate the systemonly if he can invert H to determine an input that produces a given output.  This paper discussesissues surrounding selection of a suitable H.  Two different plausible arguments are given that penetrationwould be exceedingly difficult, and it is then argued that more rigorous results are unlikely.  Finally,some human engineering problems relating to the scheme are discussed. | Evans, A. Jr.Kantrowitz, W.Weiss, E..Koperating system security, security, authentication,passwords, one-way encryption, cryptology.C4.39 5.39
2623 | A New Technique for Compression and Storage of Data | The widespread tendency toward storage oflarge programs and blocks off text has produced a need for efficient methods of compressing and storingdata.  This paper describes techniques that can, in most cases, decrease storage size by a factor offrom two to four.  The techniques involve special handling of leading and trailing blanks, and the encodingof other symbols in groups of fixed size as unique fixed point numbers.  The efficiency of thesystem is considered and pertinent statistics are given and compared with statistics for other information coding techniques. | Hahn, B..Kfile maintenance, information retrieval, utilityprograms, text compression, coding techniques, data storage, data management.C3.70 3.73 4.49
2624 | Formal Requirements for Virtualizable Third Generation Architectures | Virtual machine systems have been implementedon a limited number of third generation computer systems, e.g. CP-67 on the IBM 360/67.  From previousempirical studies, it is known that certain third generation computer systems, e.g. the DEC PDP-10, cannotsupport a virtual machine system.  In this paper, model of a third-generation-like computer system isdeveloped.  Formal techniques are used to derive precise sufficient conditions to test whether suchan architecture can support virtual machines. | Popek, G. J.Goldberg, R. P..Koperating system, third generation architecture,sensitive instruction, formal requirements, abstract model, proof, virtual machine, virtual memory,hypervisor, virtual machine monitor.C4.32 4.35 5.21 5.22
2625 | Capability-Based Addressing | Various addressing schemes making use of segmenttables are examined.  The inadequacies of these schemes when dealing with shared addresses areexplained. These inadequacies are traced to the lack of an efficient absolute address for objects inthese systems.  The direct use of a capability as an address is shown to overcome these difficultiesbecause it provides the needed absolute address.  Implementation of capability-based addressing is discussed. It is predicted that the use of tags to identify capabilities will dominate.  A hardware addresstranslation scheme which never requires the modification of the representation of capabilities issuggested. The scheme uses a main memory hash table for obtaining a segment's location in main memory givenits unique code.  The hash table is avoided forrecently accessed segments by means of a set of associativeregisters.  A computer using capability-based addressing may be substantially superior to presentsystems on the basis of protection, simplicity of programming conventions, and efficient implementation. | Fabry, R. S..Kaddressing, capabilities, addressing hardware,protection, protection hardware, shared addresses, information sharing, operating systems, computerutility, segmentation, tagged architecture.C4.30 4.32 4.34 6.21
2626 | Protection and the Control of Information Sharing in Multics | The design of mechanisms to control the sharingof information in the Multics system is described.  Five design principles help provide insight into thetradeoffs among different possible designs.  The key mechanisms described include access control lists,hierarchical control of access specifications, identification and authentication of users, and primarymemory protection.  The paper ends with a discussion of several known weaknesses in the current protection mechanism design. | Saltzer, J. H..KMultics, protection, security, privacy, access control,authentication, computer utilities, time-sharing systems, proprietary programs, protected subsystems, virtual memory, descriptors.C3.70 4.30 6.2
2627 | Scheduling Independent Tasks to Reduce Mean Finishing Time | Sequencing to minimize mean finishing time(or mean time in system) is not only desirable to the user, but it also tends to minimize at each pointin time the storage required to hold incomplete tasks.  In this paper a deterministic model of independenttasks is introduced and new results are derived which extend and generalize the algorithms known forminimizing mean finishing time.  In addition to presenting and analyzing new algorithms it is shownthat the most general mean-finishing-time problem for independent tasks is polynomial complete, and hence unlikelyto admit of a non-enumerative solution | Bruno, J.Coffman, E. G. Jr.Sethi, R..Kminimizing mean finishing time, minimizing mean flowtime, sequencing algorithms, optimal scheduling algorithms, deterministic scheduling models.C4.32 5.39
2628 | Minimal-Total-Processing Time Drum and Disk Scheduling Disciplines | This article investigates the application ofminimal-total-processing-time (MTPT) scheduling disciplines to rotating storage units when random arrivalof requests is allowed.  Fixed-head drum and moving-head drum and moving-head disk storage units areconsidered, and emphasis is placed on the relative merits of the MTPT scheduling discipline with respectto the shortest-latency-time-first (SLTF) scheduling discipline.  The results of the simulation studiespresented show that neither scheduling discipline is unconditionally superior to the other.  For mostfixed-head drum applications, the SLTF discipline is preferable to MTPT, but for intra-cylinder disk schedulingthe MTPT discipline offers a distinct advantage over the SLTF discipline.  The computational requirementsof an algorithm that implements the MTPT scheduling discipline are shown to be comparable to SLTF algorithms.In both cases, the sorting procedure is the most time-consuming phase of the algorithm. | Fuller, S. H..Kdrum scheduling, disk scheduling, shortest-latency-time-first(SLTF), minimal-total-processing-time (MTPT), rotating storage units.C4.31 4.41 6.34 6.35
2629 | The UNIX Time-Sharing system  | UNIX is a general-purpose, multi-user, interactiveoperating system for the Digital Equipment Corporation PDP-11/40 and 11/45 computers.  It offersa number of features seldom found even in larger operating systems, including: (1) a hierarchical file systemincorporating demountable volumes; (2) compatible file, device, and inter-process I/O; (3) the ability toinitiate asynchronous processes; (4) system command language selectable on a per-user basis; and (5) over100 subsystems including a dozen languages.This paper discusses the nature and implementation of thefile system and of the user command interface. | Ritchie, D. M.Thompson, K..Ktime-sharing, operating system, file system, command language, PDP-11.C4.30 4.32
2630 | On Computing Sets of Shortest Paths in a Graph | Two algorithms are presented that constructthe k shortest paths between every pair of vertices in a directed graph.  These algorithms generalize the Floydalgorithm and the Dantzig algorithm for finding the shortest path between every pair of vertices in a directed graph. | Minieka, E..Kgraph, network, shortest path, algorithm.C5.32
2631 | An Information-Theoretic Approach toText Searching in Direct Access Systems | Using direct access computer files of bibliographicinformation, an attempt is made to overcome one of the problems often associated with informationretrieval, namely, the maintenance and use of large dictionaries, the greater part of which is used onlyinfrequently.  A novel method is presented, which maps the hyperbolic frequency distribution.  This ismore suited to implementation on storage devices.  This method treats text as a string of characters ratherthan words bounded by spaces, and chooses subsets of strings such that their frequencies of occurrence aremore even than those of word types.  The members of this subset are then used as index keys for retrieval.The rectangular distribution of key frequencies results in a much simplified file organizationand promises considerable cost advantages. | Barton, I. J.Creasey, S. E.Lynch, M. F.Snell, M. J..Ktext searching, information theory, file organization,direct access, information retrieval, character string, bit vector.C3.42 3.70 3.73 3.74 5.6
2632 | HYDRA: The Kernel of a Multiprocessor Operating System | This paper describes the design philosophy ofHYDRA-the kernel of an operating system for C.mmp, the Carnegie-Mellon Multi-Mini-Processor.  This philosophyis realized through the introduction of a generalized notion of "resource", both physical and virtual,called an "object".  Mechanisms are presented for dealing with objects, including the creation of newtypes, specification of new operations applicable to a given type, sharing, and protection of any referenceto a given object against improper application of any of the operations defined with respect to thattype of object.  The mechanisms provide a coherent basis for extension of the system in two directions: theintroduction of new facilities, and the creation of highly secure systems.  | Wulf, W.Cohen, E.Corwin, W.Jones, A.Levin, R.Pierson, C.Pollack, F..Koperating system, kernel, nucleus, protection, security.C4.3 6.2
2633 | Compact Representation of Contour Plots for Phone Line Transmission | Methods for the compact representation of contourplots are described and tested.  These are intended to reduce the cost of transmitting contour plotsover phone lines.  We feel some of these methods could be used to transmit contour plots over voice grade phone lines. | Adams, J.Gary, J..Kcontour plotting, data transmission, remote terminal, data compaction.C4.41 5.13
2634 | An Evaluation of Statistical Software in the Social Sciences  | Several hundred college and university computerinstallations now offer various types of statistical packages for general use.  Among those most widely availableare OSIRIS, SPSS, BMD, DATA-TEXT, and TSAR.  In order to provide users with a basis for selectionand use, tests were made for each of these systems, and the results are summarized as to cost and performance. | Slysz, W. D..Kstatistical computation, statistical software,descriptive statistics, bivariate tables, Pearson correlation, regression, factor analysis, one-way analysis of variance.C1.3 3.30 4.19 4.22 4.49 5.5
2635 | Exact Probabilities for R X C Contingency Tables (Algorithm R434) | Boulton, D. M.
2636 | Generation of Random Correlated Normal Variables (Algorithm R425) | Page, R. L.
2637 | Hidden-Line Plotting Program (Algorithm R420) | Ellis, T. M. R.
2638 | Hidden-Line Plotting Program (Algorithm R420) | Gaither, B.
2639 | Calculation of Fourier Integrals (Algorithm R418) | Piessens, R.
2640 | Modified Havie Integration (Algorithm R400) | Piessens, R.
2641 | A Minimal Spanning Tree clustering Method [Z] (Algorithm A479) | Page, R. L..Kclustering, pattern recognition, featureselection, minimal spanning trees.C3.63 5.39 5.5
2642 | Solution of an Overdetermined System of Equationsin the L1 Norm [F4] (Algorithm A478) | Barrodale, I.Roberts, F. D. K..KL1 approximation, L1 norm, overdetermined systemof equations, linear programming, simplex method .C5.13 5.41
2643 | The Minimization of Spatially-Multiplexed Character Sets | The paper describes a technique for compactingcharacter sets in a digital computer while retaining fast access to individual bits.  It considers the problemof minimizing the storage needed to contain such tables.  Reduction techniques are developed, andthe problem is shown to reduce to a covering problem. | Gimpel, J. F..Kparsing, lexical analysis,scanning,string processing, spatial multiplexing.C4.9
2644 | A Theorem-Proving Language for Experimentation | Because of the large number of strategiesand inference rules presently under consideration in automated theorem proving, there is a need for developinga language especially oriented toward automated theorem proving.  This paper discusses some of the featuresand instructions of this language.  The use of this language permits easy extension of automatedtheorem-proving programs to include new strategies and/or new inference rules.  Such extend ability willpermit general experimentation with the various alternative systems. | Henschen, L.Overbeek, R.Wos, L..Ktheorem proving, resolution, factoring,paramodulation, programming languages.C3.60 4.22 5.21
2645 | Two Languages for Estimating Program Efficiency | Two languages enabling their users to estimatethe efficiency of computer programs are presented.  The program whose efficiency one wishes to estimate is writtenin the first language, a go-to-less programming language which includes most of the features of Algol60.  The second language consists of interactive commands enabling its users to provide additional informationabout the program written in the first language and to output results estimating its efficiency. Processors for the two languages are also described.  The first processor is a syntax-directedtranslator which compiles a program into a symbolic formula representing the execution time for that program. The sound processor is a set of procedures for that program.  The second processor is a set ofprocedures for algebraic manipulation which can be called by the user to operate on the formula producedby the first processor.  Examples of the usage of the two languages are included.  The limitations ofthe present system, its relation to Knuth's work on the analysis of algorithms, and some of the directionsfor further research are also discussed. | CCohen, J.Zuckerman, C..Kprogramming languages, syntax-directed translation,symbolic manipulation, program efficiency, analysis of algorithms.C4.12 4.20 5.24 5.25
2646 | A Model for Masking Rotational Latency by Dynamic Disk Allocation | This paper presents the background and algorithmsfor masking the rotational latency of a disk or drum.  It discusses the anticipatory input and outputof blocks of data to buffer and primary memories for a mono-programmed computer system.  A basic permutationalgorithm and several variations are given.   Because of the anticipatory nature of the I/O scheduling,these algorithms are restricted to classes of programs with predictable behavior.  While the methodsare not restricted to numerical computations, matrix and partial differential equation methods aretypical examples of their use.  It is shown that latency may be masked using a small amount of buffermemory.  The methods discussed are independent of the overall size of the data base being considered. | Gold, D. E.Kuck, D. J..Kbuffer memory, memory hierarchy, permutation algorithm,rotational latency, staging, storage allocation.C4.41 6.20
2647 | More on Algorithms that Reveal Propertiesof Floating Point Arithmetic Units | Gentleman, W. M.Marovich, S. B..Kfloating-point arithmetic, high-levellanguages, philosophy of language design.C4.9 5.19
2648 | A Design for a Number Theory Packagewith an Optimized Trial Division routine | A number theory package is described which usesdoubly linked list structures for storing multiprecise integers.  The package has been coded in IBM's BasicAssembly Language and makes heavy use of the macro language and conditional assembly.  An optimally codedtrial division routine is also described which can be used to determine the unique factorization of large integers. | Wunderlich, M. C.Selfridge, J. L..Knumber theory package, trial division, multiprecisearithmetic, factorization, doubly linked lists, pseudoprime.C3.15
2649 | On the Distributions of Significant Digits and Roundoff Errors | Generalized logarithmic law is derived forthe distribution of the first t significant digits of a random digital integer.  This result is then usedto determine the distribution of the roundoff errors in floating-point operations, which is a mixtureof uniform and reciprocal distributions. | Tsao, N..Ksignificant digits, floating-point operations,roundoff errors, uniform distribution, reciprocal distribution, variance, mean valve.C5.10 5.11
2650 | Order-n Correction for Regular Languages | A method is presented for calculating a stringB, belonging to a given regular language L, which is "nearest" (in number of edit operations) to agiven input string a.  B is viewed as a reasonable "correction" for the possibly erroneous string a, wherea was originally intended to be a string of L.  The calculation of B by the method presented requirestime proportional to |a|, the number of characters in a.  The method should find applications in informationretrieval, artificial intelligence, and spelling correction systems. | Wagner, R. A..Kerror correction, regular languages, regular events,finite state automata, compiler error recovery, spelling correction, string best match problem, correction,corrector, errors, nondeterministic finite-state automata.C4.12 4.20 5.22 5.23 5.42
2651 | The Treatment of Data Types in EL1 | In constructing a general purpose programminglanguage, a key issue is providing a sufficient set of data types and associated operations in a mannerthat permits both natural problem-oriented notation and efficient implementation.  The EL1 language containsa number of features specifically designed to simultaneously satisfy both requirements.  The resultingtreatment of data types includes provision for programmer-defined data types data types and genericroutines, programmer control over type conversion, and very flexible data type behavior, in a context thatallows efficient compiled code and compact data representation. | Wegbreit, B..Kdata types, modes, mode unions, type conversion,coercion, generic functions, extensible languages, data type definition, data description language, compilation.C4.12 4.13 4.22
2652 | Reduction of Compilation Costs Through Language Contraction | Programming languages tailored to particulargroups of users can often be constructed by removingunwanted features from a general purpose language.  Thispaper describes the use of simulation techniques to predict the savings in compilation cost achievableby such an approach.  The results suggest a function which describes the effect of changes in the power ofa language on the compilation cost of an algorithm expressed in that language: when features not actuallyused by the algorithm are removed from the language, the cost of compiling the algorithm decreases moderately,but when features that are needed are removed, the compilation cost increases sharply. | Shaw, M..Kdesign of programming languages, language contraction,compiler design, compilation cost, Algol.C4.12 4.20
2653 | Solution of the Transcendental Equation w*exp(x)=x (Algorithm R443) | Einarsson, B.
2654 | Generator of Set-Partitions to Exactly R Subsets [G7] (Algorithm A477) | Ehrich, G..Kpartitions, subset generation, permutations.C5.39
2655 | Six Subprograms for Curve Fitting UsingSplines Under Tension [E2] (Algorithm A476) | Cline, A. K..Kinterpolation, splines, contouring, curve fitting.C5.13 8.2
2656 | Scalar- and Planar- Valued Curve Fitting Using Splines Under Tension | The spline under tension was introduced bySchweikert in an attempt to imitate cubic splines but avoid the spurious critical points they induce. The defining equations are presented here, together with an efficient method for determining the necessaryparameters and computing the resultant spline.  The standard scalar-valued curve fitting problem is discussed,as well as the fitting of open and closed curves in the plane.  The use of these curves and theimportance of the tension in the fitting of contour lines are mentioned as application. | Cline, A. K..Kinterpolation, splines, contouring, curve fitting.C5.13 8.2
2657 | An Improved Program-Synthesizing Algorithm and Its Correctness | An improved program-synthesizing algorithmbased on the algorithm proposed by Waldinger and Lee in 1969 is given.  In the old algorithm, the program-synthesizingproblem is translated into a theorem-proving problem, and a program is obtained by analyzing a proof. For the improved algorithm, the analysis is not necessary, and a program is obtained as soon asthe proof is completed.  This is achieved by using a modified variable tracing mechanism invented by Greenin 1969.  The correctness of the improved algorithm is also proved; i.e. the program thus obtainedalways satisfies the specification. | Lee, R. C. T.Chang, C. L.Waldinger, R. J..Kprogram-synthesizing algorithms, theorem proving,consequence finding, primitive resolutions.C3.60 3.64 4.20 4.42 5.21 5.22 5.24
2658 | An Alternative Approach to Mutual Recursionin Algol 60 Using Restricted Compilers | Balfour, A..KAlgol 60, mutual recursion, compiler restrictions.C4.12 4.22
2659 | Some Remarks on Lookup of Structured Variables | Abrahams, P. W..KPL/1, symbol table, structured variables,qualified references, compilers .C4.12 4.22
2660 | Addendum to M. L. Patrick Paper | Simmons, G. C..Kparallelism, polynomial root finding, real zeros.C5.15
2661 | Ideal Teaching Machines-A Solution to the Pedagogic Language Problem | Sterling, T. D.Pollack, S. V..Keducation, programming languages, simulators.C1.52 4.2
2662 | Graduate Education: The Ph.D. Glut: Response and Rebuttal | Freeman, P.Malcolm, M. A.Payne, W. H..Kgraduate education, Ph.D. production, accreditation.C1.5 2.2 2.3
2663 | A Study of Computer Use in a Graduate School of Business | Lucas, H. C. Jr.Montgomery, D. B.Larreche, J. C..Keducation, management, business schools.C1.50 1.52
2664 | Parallelism in Tape-Sorting | Two methods for employing parallelism in tape-sortingare presented.  Method A is the natural way to use parallelism. Method B is new.  Both approximatelyachieve the goal of reducing the processing time by a divisor which is the number of processors. | Even, S..Ktape sorting, parallelism, external sorting, queues, stacks.C5.31 6.22
2665 | Copying List Structures Using Bounded Workspace | Two new algorithms are presented for list structurecopying using bounded workspace.  The first, of primarily theoretical interest, shows that withoutcell tag bits the task can be performed in time n^2.  The second algorithm, assuming one tag bit ineach cell, delivers attractive practical speed.  Any noncyclic structure is copied in linear speed, whilecyclic structures are copied in average time less than nlogn.  No foreknowledge of cycle absenceis necessary to achieve linear speed.  A variation of the second algorithm solves an open problem concerninglist structure marking.  That result demonstrates that marking can be done in average time nlogn withoutthe aid of supplemental tag bits or stacks. | Lindstrom, G..Klist processing, copying, marking, space complexity.C4.34 5.25
2666 | On Lions' Counter Example for Gotlieb's Methodfor the Construction of School Timetables | The timetable problem is an essentially discreteproblem. Although the discrete problem may have no feasible solution, there may exist a solutionto the equivalent continuous problem.  An example is given, for which the nondiscrete solution can beinterpreted as a set of timetables, differing from week to week, which together satisfy the long-termrequirements of the timetable problem. | Smith, G.Sefton, I. M..Kcombinatorial, multi-index problem, necessaryconditions, schedule, school timetable, timetable.C3.51 5.39
2667 | Execution Characteristics of Programs in a Page-on-Demand System | Data are presented which show the execution characteristicsof two types of commonly used programs in a large-scale, time-shared computer system.  A softwaremonitoring facility built into the supervisor was used for data collection during normal system operation. These data were analyzed, and results of this analysis are presented for a Fortran compilerand an interactive line file editor.  Probability distribution functions and other data are given forsuch things as CPU intervals, I/O intervals, and the number of such intervals during execution.  Empiricaldistributions are compared with simple theoretical distributions (exponential, hyperexponential, and geometric). Other data show paging characteristics of tasks as a function of the number of pages those tasks have in core. | Boyse, J. W..Kprogram behavior, virtual memory, paging, demand paging,software monitor, program execution characteristics, compiler execution behavior, editor execution behavior.C4.12 4.19 4.32 4.39 4.9 8.1
2668 | Computation of Page Fault Probability from Program Transition Diagram | An algorithm is given for calculating page faultprobability in a virtual memory system operating under demand paging with various memory sizes and replacementrules.  A first order Markov model of program behavior is assumed, and a representation of the systembased on memory states, control states, and memory substates is presented.  The algorithm is general inthe sense that the page fault probabilities can be calculated for nonpredictive replacement rules appliedto any program represented by a one-step Markov chain.  A detailed example is given to illustrate thealgorithm for Random and Least Recently Used (LRU) replacement rules. | Franklin, M. A.Gupta, R. K..Kvirtual memory, demand paging, replacement rule,program model, program behavior, Markov model, page fault, page fault probability.C4.30 6.20
2669 | A Simple Linear Model of Demand Paging Performance | Predicting the performance of a proposed automaticallymanaged multilevel memory system requires a model of the patterns by which programs refer to theinformation stored in the memory.  Some recent experimental measurements on the Multics virtual memorysuggest that, for rough approximations, a remarkably simple program reference model will suffice.  The simplemodel combines the effect of the information reference pattern with the effect of the automatic managementalgorithm to produce a single, composite statement: the mean number of memory references betweenpaging exceptions increases linearly with the size of the paging memory.  The resulting model is easyto manipulate, and is applicable to such diverse problems as choosing an optimum size for a paging memory,arranging for reproducible memory usage charges, and estimating the amount of core memory sharing. | Saltzer, J. H..Kpaging, demand paging, memory models, program models,performance measurement, multilevel memory systems, virtual memory, associative memory, memory usage accounting, Multics.C3.79 4.30 4.32
2670 | Efficient Implementation of a Variable ProjectionAlgorithm for Nonlinear Least Squares Problems | Nonlinear least squares frequently arise for whichthe variables to be solved for can be separated into a linear and a nonlinear part.  A variable projectionalgorithm has been developed recently which is designed to take advantage of the structure of a problemwhose variables separate in this way.  This paper gives a slightly more efficient and slightly moregeneral version of this algorithm than has appeared earlier. | Krogh, F. T..Knonlinear least squares, parameter estimation, variable projection.C5.14 5.15
2671 | A Note on a Combinatorial Problem of Burnett and Coffman | Stone, H. S..Kmemories, interleaving, derangements, rencontres, combinatorial analysis.C5.39 6.34
2672 | Emotional Content Considered Dangerous | Smoliar, S. W..Kartificial intelligence, heuristic programming, modelsof cognitive processes, computer music, computer composition, music theory.C3.44 3.65
2673 | Quadratic Search for Hash Tables of Size p^n | Ackerman, A. F..Khashing, quadratic search.C4.10
2674 | Scan Conversion Algorithms for a Cell Organized Raster Display | Raster scan computer graphics with "real time"character generators have previously been limited to alphanumeric characters.  A display has been describedwhich extends the capabilities of this organization to include general graphics.  Two fundamentally differentscan conversion algorithms which have been developed to support this display are presented.  Oneis most suitable to non-interactive applications and the other to interactive applications.  The algorithmswere implemented in Fortran on the CDC 6400 computer.  Results obtained from the implementations showthat the noninteractive algorithms can significantly reduce display file storage requirements at little costin execution time over that of a conventional raster display.  The interactive algorithm can improveresponse time and reduce storage requirements. | Barrett, R. C.Fordan, B. W. Jr..Kgraphics, scan conversion, raster display, linedrawing, discrete image, dot generation, matrixdisplays.C4.41 6.35 8.2
2675 | A Computer Routine for Quadratic and LinearProgramming Problems (Algorithm R431) | Ravindran, A.
2676 | Zeros of a Complex Polynomial (Algorithm R419) | Withers, D. H.
2677 | Incomplete Beta Ratio (Algorithm R179) | Bosten, N. E.Battiste, E. L.
2678 | Visible Surface Plotting Program [J6] (Algorithm A475) | Wright, T..Khidden line problem, computer graphics, contour surface.C3.65 4.41 8.2
2679 | Some Performance Tests of "quicksort" and Descendants | Detailed performance evaluations are presentedfor six ACM algorithms: quicksort (No. 64), Shellsort (No. 201), stringsort (No. 207), "TREESORT3"(No. 245), quickersort (No. 271), and qsort (No. 402).  Algorithms 271 and 402 are refinements of algorithm64, and all three are discussed in some detail.  The evidence given here demonstrates that qsort (No.402) requires many more comparisons than its author claims.  Of all these algorithms, quickersort requiresthe fewest comparisons to sort random arrays. | Loeser, R..Ksorting, in-place sorting, sorting efficiency,sorting performance tests, quicksort, quickersort, qsort, Shellsort, stringsort, TREESORT3,utility sortalgorithm, general-purpose sort algorithm, sorting algorithm documentation.C4.49 5.31
2680 | Optimal Space Allocation on Disk Storage Devices | When the amount of space required for file storageexceeds the amount which can be kept on-line, decisions must be made as to which files are to be permanentlyresident and which mountable.  These decisions will affect the number of mount requests issued to theoperators.  This is often a bottleneck in a computing facility, and reducing the number of mounts thus decreasesturnaround time.  An optimization model for the assignment of files to disk packs, and packs to eitherresident or nonresident status is presented.  Heuristics are suggested for those cases in whichit is inefficient to compute the actual optimum. | Morgan, H. L..Kdisk analysis, disk optimization, disk files,filesystems, file scheduling, space allocation, memory hierarchy.C3.72 3.73 4.39
2681 | Dynamic Memory Repacking | A probabilistic model of a multiprogramming systemis exercised in order to determine the conditions under which the dynamic repacking of main memory is beneficial. An expression is derived for the maximum interference that a repacking process may introducebefore the original performance of the system is degraded.  Alternative approaches to repacking are discussed,and the operating conditions that lead to improved system throughput through repacking are delineated. | Balkovich, E.Chiu, W.Presser, L.Wood, R..Kdynamic memory repacking, memory compaction,storagefragmentation, multiprogramming system model, probabilistic model, central processor productivity,resource utilization, system throughput.C4.32 5.5 6.20
2682 | On the Construction of a Representative Synthetic Workload | A general method of constructing a drive workloadrepresentative of a real workload is described. The real workload is characterized by its demands on thevarious system resources.  These characteristics of the real workload are obtained from the system accountingdata. The characteristics of the drive workload are determined by matching the joint probability densityof the real workload with that of the drive workload.  The drive workload is realized by using asynthetic program in which the characteristics can be varied by varying the appropriate parameters. Calibrationexperiments are conducted to determine expressions relating the synthetic program parameters with the workloadcharacteristics.  The general method is applied to the case of two variables, cpu seconds and numberof I/O activities; and synthetic workload with 88 jobs is constructed to represent a month'sworkload consisting of about 6000 jobs. | Sreenivasan, K.Kleinman, A. J..Kbenchmarks, calibration, drive workload, input tosimulation, probability distribution, representative workload, synthetic workload, workload characteristics.C5.5 5.9 8.1
2683 | The Synthesis of Loop Predicates | Current methods for mechanical program verificationrequire a complete predicate specification on each loop.  Because this is tedious and error prone,producing a program with complete, correct predicates is reasonably difficult and would be facilitated by machineassistance.  This paper discusses techniques for mechanically synthesizing loop predicates.  Two classesof techniques are considered: (1) heuristic methods which derive loop predicates from boundary conditionsand/or partially specified inductive assertions: (2) extraction methods which use input predicates andappropriate weak interpretations to obtain certain classes of loop predicates by an evaluation on the weak interpretation. | Wegbreit, B..Kprogram verification, loop predicates, inductiveassertions, synthesis of loop predicates, weak interpretations, well-founded sets, property extraction, theorem proving.C3.64 4.19 4.22 5.24
2684 | Production Systems: or Can We Do Better than BNF? | Since the development of BNF, the definitionof the syntax of programming languages has been almost universally associated with context-free requirements. Yet numerous interesting and difficult issues in syntax stem from the context-sensitive requirements,notably the compatibility between the declaration of an identifier and its uses, the correspondencebetween actual and formal parameters, and issues arising from block structure.  This paper exploresthe use of a formal notation called Production Systems in providing a readable and complete formal definitionof syntax.  As a practical illustration, a small but significant subset of PL/I is considered.  Amore detailed presentation, as well as the application to define abstract syntax and translations between languages,is given in a previous paper by the author. | Ledgard, H. F..Ksyntax, translation, context-sensitive grammars,compilers, formal definition, PL/I standards.C4.2 5.21 5.23
2685 | The Parallel Execution of DO Loops | Methods are developed for the parallel executionof different iterations of a DO loop.  Both asynchronous multiprocessor computers and array computersare considered.  Practical application to the design of compilers for such computers is discussed. | Lamport, L..Kparallel computing, multiprocessor computers,array computers, vector computers, loops.C4.12 5.24
2686 | An Approximate Method for Generating Asymmetric Random Variables | Tukey's lambda distribution is generalizedto provide an algorithm for generating values of unimodal asymmetric random variables.  This algorithmhas the same advantages as the symmetric random variable generator previously given by the authors, exceptthat the addition of another parameter complicatesthe problem of finding the parameter values to fit a distribution. | Ramberg, J. S.Schmeiser,B. W..Ksimulation, Monte Carlo, probability, statistics,approximations, random variables, random numbers, moments, distribution.C5.5 8.1
2687 | A Cell Organized Raster Display for Line Drawings | Raster scan computer graphics displays with"real time" character generators have previously been limited to alphanumeric characters.  A display isdescribed which extends the capabilities of this organization to include general graphics.  The feasibilityof such a display is shown by deriving the minimum number of patterns required in the read onlymemory of the character generator to synthesize an arbitrary line.  The synthesis process does not compromisepicture quality since the resulting dot patterns are identical with those of a conventionalraster display.  Furthermore, the time constraints of a raster display are shown to be satisfied fora typical design for very complex line drawings. | Jordan, B. W. Jr.Barrett, R. C..Kgraphics, raster display, line drawing, discreteimage, dot generation, matrix displays.C4.41 6.35 8.2
2688 | Attribute Based File Organization in a Paged Memory Environment | The high cost of page accessing implies a needfor more careful data organization in a paged memory than is typical of most inverted file and similarapproaches to multi-key retrieval.  This article analyses that cost and proposes a method called multiplekey hashing which attempts to minimize it.  Since this approach is not always preferable to inversion,a combined method is described.  The exact specifications of this combination for a file with givendata and traffic characteristics is formulated as a mathematical program.  The proposed heuristic solutionto this program can often improve on a simple inversion technique by a factor of 2 or 3. | Rothnie, J. B. Jr.Lozano, T..Kfile organization, paging, retrieval algorithm,inverted file, multiple key hashing.C3.70 3.73 3.74 3.79
2689 | A CRT Report Generating System | Lucas, H. C. Jr..Kreport generation, automated systems design, data processing, management.C3.50 4.12 4.22
2690 | A Numbering Systems for Combinations | Knott, G. D..Kcombinatorics, coding system, storage mapping function.C4.9 5.30
2691 | Comments on the Algorithms of Verhelst for theConversion of Limited-Entry Decision Tables to Flowcharts | King, P. J. H.Johnson, R. G..Kdecision table, flowcharting, preprocessor, optimal programs, search .C3.50 3.59 4.19 4.29 4.49 5.31
2692 | Reentrant Polygon Clipping | A new family of clipping algorithms is described. These algorithms are able to clip polygons against irregular convex plane-faced volumes in threedimensions, removing the parts of the polygon which lie outside the volume.  In two dimensions the algorithmspermit clipping against irregular convex windows.  Polygons to be clipped are represented as an orderedsequence of vertices without repetition of first and last, in marked contrast to representation as acollection of edges as was heretofore the common procedure.  Output polygons have an identical format,with new vertices introduced in sequence to describe any newly-cut edge or edges.  The algorithms easily handlethe particularly difficult problem of detecting that a new vertex may be required at a corner of theclipping window.  The algorithms described achieve considerable simplicity by clipping separately againsteach clipping plane or window boundary.  Code capable of clipping the polygon against a single boundaryis reentered to clip against subsequent boundaries.  Each such reentrant stage of clipping need store onlytwo vertex values and may begin its processing as soon as the first output vertex from the proceedingstage is ready.  Because the same code is reentered for clipping against subsequent boundaries, clippingagainst very complex window shapes is practical.  For perspective applications in three dimentions, a six-planetruncated pyramid is chosen as the clipping volume.  The two additional planes parallel to the projectionscreen serve to limit the range of depth preserved through the projection.  A perspective projectionmethod which provides for arbitrary view angles and depth of field in spite of simple fixed clippingplanes is described.  This method is ideal for subsequent hidden-surface computations. | Sutherland, I. E.Hodgman, G. W..Kcomputer graphics, hidden-surface, clipping.C5.31 6.32 6.35
2693 | Bivariate Interpolation and Smooth Surface FittingBased on Local Procedures [E2] (Algorithm A474) | Akima, H..Kbivariate interpolation, interpolation, partialderivative, polynomial, smooth surface fitting.C5.13
2694 | Computation of Legendre Series Coefficients [C6] (Algorithm A473) | Piessens, R..KLegendre series, Chebyshev series.C5.13
2695 | Tridiagonalization by Permutations | Tridiagonalizing a matrix by similarity transformationsis an important computational tool in numerical linear algebra. Consider the class of sparsematrices which can be tridiagonalized using only row and corresponding column permutations.  Theadvantages of using such a transformation include the absence of round-off errors and improved computation timewhen compared with standard transformations.  A graph theoretic algorithm which examines an arbitraryn x n matrix and determines whether or not it can be permuted into tridiagonal form is given.  Thealgorithm requires no arithmetic while the number of comparisons, the number of assignments, and the numberof increments are linear in n.  This compares very favorably with standard transformation methods. If the matrix is permutable into tridiagonal form, the algorithm gives the explicit tridiagonal form. Otherwise, early rejection will occur. | Gibbs, N. E.Poole, W. G. Jr..Ktridiagonal matrix, permutation, algorithm,eigenvalues, graph, bandwidth, sparse matrix.C5.14 5.32
2696 | A Method of Bivariate Interpolation and SmoothSurface Fitting Based on Local Procedures | A method is designed for interpolating valuesgiven at points of a rectangular grid in a plane by a smooth bivariate function z=z(x,Y).  The interpolatingfunction is a bicubic polynomial in each cell of the rectangular grid.  Emphasis is an avoidingexcessive undulation between given grid points. The proposed method is an extension of the method ofunivariate interpolation developed earlier by the author and is likewise based on local procedures. | Akima, H..Kbivariate interpolation, interpolation, partialderivative, polynomial, smooth surface fitting.C5.13
2697 | A Fast Method for Solving a Class of Tridiagonal Linear Systems | The solution of linear systems having real, symmetric,diagonally dominant,tridiagonal coefficient matrices with constant diagonals is considered.  It isproved that the diagonals of the LU decomposition converges when floating-point precision.  It is alsoproved that the computed LU decomposition converges when floating-point arithmetic is used and that the limitsof the LU diagonals using floating point are roughly within machine precision of the limits usingreal arithmetic.  This fact is exploited to reduce the number of floating-point operations required tosolve a linear system from 8n-7 to 5n+2k-3, where k is much less than n, the order of the matrix.  If theelements of the subdiagonals and superdiagonals are 1, then only 4n+2k-3 operations are needed.  Theentire LU decomposition takes k words of storage, and considerable savings in array subscripting are achieved. Upper and lower bounds on k are obtained in terms of the ratio of the coefficient matrix diagonalconstants and parameters of the floating-point number system.  Various generalizations of these results are discussed. | Malcolm, M. A.Palmer, J..Knumerical linear algebra, linear systems,Toeplitz matrices, tridiagonal matrices.C5 5.1 5.11 5.14 5.17
2698 | Syntax-Directed Least-Errors Analysis forContext-Free Languages: A Practical Approach | A least-errors recognizer is developed informallyusing the well-known recognizer of Earley, along with elements of Bellman's dynamic programming. The analyzer takes a general class of context-free grammars as drivers, and any finite string as input. Recognition consists of a least-errors count for a corrected version of the input relative to the drivergrammar. The algorithm design emphasizes practical aspects which help in programming it. | Lyon, G..Karbitrary input strings, context-free grammars,parsing, dynamic programming, stored subanalyses, separability, state merging, least-errors correction.C4.12 5.23 5.42
2699 | Automatic Data Structure Choice in a Language of Very High Level | SETL is a set-theoretically oriented languageof very high level whose repertoire of semantic objects includes finite sets, ordered n-tuples, andsets of ordered n-tuples usable as mappings.  This paper describes the structure of an optimizer for thislanguage.  Among other methods of interest, the optimizer uses techniques which allow relations of inclusionand membership to be established, the domains and ranges of (tabulated) mappings to be estimated fromabove and below, and the single-valuedness of (tabulated) mappings to be proved.  Once facts of thiskind have been established, automatic choice of data structures becomes possible. The methods employedare based upon, and extend, known techniques of data flow analysis. | Schwartz, J. T..Kprogram optimization, automatic programming, high-levellanguages, set-theoretic languages, data structure choice.C4.12 4.20 4.22
2700 | Reduction: A Method of Proving Properties of Parallel Programs | When proving that a parallel program has agiven property it is often convenient to assume that a statement is indivisible, i.e. that the statementcannot be interleaved with the rest of the program.  Here sufficient conditions are obtained to show thatthe assumption that a statement is indivisible can be relaxed and still preserve properties such ashalting.  Thus correctness proofs of a parallel system can often be greatly simplified. | Lipton, R. J..Kdeadlock free, reduction, interruptible, indivisible,parallel program, semaphore, verification method, process, computation sequence.C4.32 4.35 5.24
2701 | A Fast and Usually Linear Algorithm for GlobalFlow Analysis (Abstract only--Complete paper JACM 23,1 January, 1976) | A new algorithm for global flow analysis onreducible graphs is presented. The algorithm is shown to treat a very general class of function spaces. For a graph of e edges, the algorithm has a worst case time bound of O(e log e) function operations. It is also shown that in programming terms, the number of operations is proportional to e plus thenumber of exits from program loops.  Consequently a restriction to one-entry one-exit control structureslinearity.  The algorithm can be extended to yet larger classes of function spaces and graphs by relaxingthe time bound.  Examples are given of code improvement problems which can be solved using the algorithm. | Graham, S. L.Wegman, M..Kglobal flow analysis, data flow, code optimization,common subexpression elimination, live-dead analysis, information propagation, flow graph, reducibility,go-to-less programming, depth-first search, path compression.C4.12 5.24 5.25 5.32
2702 | On the Complexity of LR(k) Testing | The problem of determining whether an arbitrarycontext-free grammar is a member of some easily parsed subclass of grammars such as the LR(k) grammarsis considered.  The time complexity of this problem is analyzed both when k is considered to be a fixedinteger and when k is considered to be a parameter of the test.  In the first case, it is shown that forevery k there exists an O(n(k+2)) algorithm for testing the LR(k) property, where n is the size of thegrammar in question.  On the other hand, if both k and the subject grammar are problem parameters, thenthe complexity of the problem depends very strongly on the representation chosen for k.  More specifically,it is shown that this problem is NP-complete when k is expressed in unary.  When k is expressed inbinary the problem is complete for nondeterministic exponential time.  These results carry over to manyother parameterized classes of grammars, such as the LL(k), strong LL(k), SLR(k), LC(k), and strong LC(k) grammars. | Hunt, H. B. IIISzymanski, T. G.Ullman, J. D..Kcomputational complexity, context-free grammars,parsing, LR(k) grammars, NP-complete problems.C4.12 5.23 5.25
2703 | The Intrinsically Exponential Complexity ofthe Circularity Problem for Attribute Grammars | Attribute grammars are an extension of context-freegrammars devised by Knuth as a mechanism for including the semantics of a context-free languagewith the syntax of the language.  The circularity problem for a grammar is to determine whether the semanticsfor all possible sentences (programs) in fact will be well defined.  It is proved that this problemis, in general, computationally intractable.  Specifically, it is shown that any deterministic algorithmwhich solves the problem must for infinitely many cases use an exponential amount of time.An improvedversion of Knuth's circularity testing algorithm is also given, which actually solves the problem within exponential time. | Jazayeri, M.Ogden, W. F.Rounds, W. C..Kattribute grammars, circularity problem, context-freegrammars, computational complexity, exponential time, semantics.C4.12 5.25
2704 | Exception Handling: Issues and a Proposed Notation | This paper defines exception conditions, discussesthe requirements exception handling language features must satisfy, and proposes some new languagefeatures for dealing with exceptions in an orderly and reliable way.  The proposed language features serveto highlight exception handling issues by showing how deficiencies in current approaches can be remedied. | Goodenough, J. B..Kmultilevel exit, goto statement, error conditions,structured programming, ON conditions, programming languages.C4.22
2705 | Programming Languages, Natural Languages, and Mathematics | Some social aspects of programming are illuminatedthrough analogies with similar aspects of mathematics and natural languages.  The split betweenpure and applied mathematics is found similarly in programming. The development of natural languages towardflexion less, word-order based language types speaks for programming language design based on general,abstract constructs.  By analogy with incidents of the history of artificial, auxiliary languages itis suggested that Fortran and Cobol will remain dominant for a long time to come.  The most promisingavenues for further work of wide influence are seen to be high quality program literature (i.e. programs)of general utility and studies of questions related to program style. | Naur, P..Kanalogies related to social aspects,pure and appliedmathematics, language quality, language development, artificial auxiliary languages, literature, style,descriptive and prescriptive attitudes.C4.20
2706 | A Note on the Set Basis Problem Relatedto the Compaction of Character Sets | This note discusses the reduction of theset basis problem to the clique cover problem. | Kou, L. T.Wong, C. K..Kcompaction of character sets, set basis, set covering,computational complexity, polynomial completeness, clique cover .C4.9 5.25 5.39
2707 | Backtrack Programming Techniques | The purpose of this paper is twofold.  First,a brief exposition of the general backtrack technique and its history is given.  Second, it is shown how the useof macros can considerably shorten the computation time in many cases.  In particular, this technique has allowedthe solution of two previously open combinatorial problems, the computation of new terms in a well-knownseries, and the substantial reduction in computation time for the solution to another combinatorial problem. | Bitner, J. R.Reingold, E. M..Kbacktrack, depth-first search, exhaustive search,macros, combinatorial computing, non-attacking queen's problem, difference-preserving codes, pentominoes,tiling problems, squaring the square.C5.30
2708 | Practical Syntactic Error Recovery | This paper describes a recovery scheme for syntaxerrors which provides automatically-generated high quality recovery with good diagnostic informationat relatively low cost. Previous recovery techniques are summarized and empirical comparisons are made.  Suggestionsfor further research on this topic conclude the paper. | Graham, S. L.Rhodes, S. P..Ksyntax errors, error recovery, error correction,parsing, simple precedence, compilers, debugging.C4.12 4.42 5.23
2709 | A Genealogy of Control Structures | The issue of program control structures hashad a history of heated controversy.  To put this issue on a solid footing, this paper reviews numerous theoreticalresults on control structures and explores their practical implications.  The classic result ofBohm and Jacopini on the theoretical completeness of if-then-else and while-do is discussed. Several recentideas on control structures are then explored.  These include a review of various other control structures,results on time/space limitations, and theorems relating the relative power of control structures undernotions of equivalence.  In conclusion, the impact of theoretical results on the practicing programmer andthe importance of one-in, one-out control structures as operational abstractions are discussed.  It is arguedfurther that there is insufficient evidence to warrant more than if-then-else, while-do, and their variants. | Ledgard, H. F.Marcotty, M..Kstructured programming, control structures,goto statements, language design, PASCAL.C4.2 5.24
2710 | Specifying Queries as Relational Expressions:The SQUARE Data Sublanguage | This paper presents a data sublanguage calledSQUARE, intended for use in ad hoc, interactive problem solving by non-computer specialists. SQUAREis based on the relational model of data, and is shown to be relationally complete; however, it avoidsthe quantifiers and bound variables required by languages based on the relational calculus.  Facilitiesfor query, insertion, deletion, and update on tabular data bases are described.  A syntax is given,and suggestions are made for alternative syntaxes, including a syntax based on English key words forusers with limited mathematical background. | Boyce, R. FChamberlin, D. D.King, W. F. III.Kdatabase, data sublanguages, relations, query languages,casual user, relational data model, tabular data, interactive problem solving, nonprocedurallanguages, relational completeness.C3.50 3.70 4.20
2711 | A Vector Space Model for Automatic Indexing | In a document retrieval, or other pattern matchingenvironment where stored entities (documents) are compared with each other or with incoming patterns(search requests), it appears that the best indexing (property) space is one where each entity lies as far awayfrom the others as possible; in these circumstances the value of an indexing system may be expressibleas a function of the density of the object space; in particular, retrieval performance may correlate inverselywith space density.  An approach based on space density computations is used to choose an optimumindexing vocabulary for a collection of documents.  Typical evaluation results are shown, demonstratingthe usefulness of the model. | Salton, G.Wong, A.Yang, C. S..Kautomatic information retrieval, automaticindexing, content analysis, document space.C3.71 3.73 3.74 3.75
2712 | Horner's Rule for the Evaluation of General Closed Queueing Networks | The solution of separable closed queueing networksrequires the evaluation of homogeneous multinomial expressions.  The number of terms in those expressionsgrows combinatorially with the size of the network such that a direct summation may become impractical.  Analgorithm is given which does not show a combinatorial operation count.  The algorithm is based on a generalizationof Horner's rule for polynomials.  It is also shown how mean queue size and throughput an be obtainedat negligible extra cost once the normalization constant is evaluated. | Reiser, M.Kobayashi, H..KQueueing networks, queueing theory Horner's rule,evaluation of multinomial sums, load-dependent service rate.C5.12 5.5 8.1 8.3
2713 | Remark on Stably Updating Mean andStandard Deviation of Data (Corrigendum) | Cotton, I.
2714 | Merging with Parallel Processors | Consider two linearly ordered sets A, B, |A|=m,|B|=n, m<=n, and p, p<=m, parallel processors working synchronously.  The paper presents an algorithmfor merging A and B with the p parallel processors, which requires at most 2[log2 (2m+1)]+[3m/p] + [m/p][log2(n/m)] steps.  If n = (2^B)m (B an integer), the algorithm requires at most 2[log2 (m+1)] + [m/p](2+B)steps.  In the case where m and n are of the same order of magnitude, i.e. n=km with k being a constant,the algorithm requires 2[log2 (m+1)] + [m/p](3+k) steps.  These performances compare very favorably withthe previous best parallel merging algorithm, Batcher's algorithm, which requires n/p + ((m+n)/2p)log2 msteps in the general case and km/p + ((k+1)/2)(m/p)log2 m in the special case where n=km. | Gavril, F..Kparallel processing, parallel merging, parallel binary insertion.C5.31
2715 | Implementation of a Structured English Query Language | The relational model of data, the XRM RelationalMemory System, and the SEQUEL language have been covered in previous papers and are reviewed. SEQUEL is a relational data sublanguages intended for the ad hoc interactive problem solving by non-computerspecialists.  A version of SEQUEL that has been implemented in a prototype interpreter is described. The interpreter is designed to minimize the data accessing operations required to respond to an arbitraryquery.  The optimization algorithms designed for this purpose are described. | Astrahan, M. M.Chamberlin,D. D..Krelational model, query language, nonprocedural language,database, data structure, data organization.C3.74 3.75 4.22 4.33 4.34
2716 | Optimizing the Performance of a Relational Algebra Database Interface | An approach for implementing a "smart" interfaceto support a relational view of data is proposed.  The basic idea is to employ automatic programming techniquesso that the interface analyzes and efficiently refines the high level query specification supplied bythe user.  A relational algebra interface, called SQUIRAL, which was designed using this approach, is describedin detail. SQUIRAL seeks to minimize query response time and space utilization by: (1) performingglobal query optimization, (2) exploiting disjoint and pipelined concurrency, (3) coordinating sort ordersin temporary relations, (4) employing directory analysis, and (5) maintaining locality in page references. Algorithms for implementing the operators of E. F. Codd's relational algebra are presented, anda methodology for composing them to optimize the performance of a particular user query is described. | Smith, J. M.Yen-Tang Chang, P..Krelational database, database optimization, invertedfile, automatic programming, query language, data manipulation language, very high level language.C3.70 4.13 4.33
2717 | CONVERT: A High Level TranslationDefinition Language for Data Conversion | This paper describes a high level and nonproceduraltranslation definition language, CONVERT, which provides very powerful and highly flexible datarestructuring capabilities. Its design is based on the simple underlying concept of a form which enablesthe users to visualize the translation processes, and thus makes data translation a much simpler task. "CONVERT" has been chosen for conveying the purpose of the language and should not be confused with anyother language or program bearing the same name. | Shu, N. C.Housel, B. C.Lum, V. Y..Kdata conversion, data restructuring, data translation,database reorganization, translation definition, utility program, programming languages, nonprocedural languages.C3.50 3.75 4.29 4.4 4.9
2718 | A Preliminary System for the Design of DBTG Data Structures | The functional approach to database design isintroduced.  In this approach the goal of design is to derive a data structure which is capable of supportinga set of anticipated queries rather than a structure which "models the business" in some otherway. An operational computer program is described which utilizers the functional approach to design datastructures conforming to the Data Base Task Group specifications.  The automatic programming technologyutilized by this program, although typically used to generate procedure, is here used to generate declaratives. | Gerritsen, R..Knetwork model of databases, Data Base Task Group, databasedesign, data structure, automatic programming, translation, nonprocedural languages.C3.5 3.64 3.7 4.2 5.23
2719 | Mechanical Program Analysis | One means of analyzing program performanceis by deriving closed-form expressions for their execution behavior.  This paper discusses the mechanizationof such analysis, and describes a system, Metric, which is able to analyze simple Lisp programsand produce, for example, closed-form expressionsfor their running time expressed in terms of size of input. This paper presents the reasons for mechanizing program analysis, describes the operation of Metric, explainsits implementation, and discusses its limitations. | Wegbreit, B..Kanalysis of programs, performance analysis, executiontime, execution behavior, difference equations, generating functions, list processing, Lisp, algebraicmanipulation, programming languages, analysis of algorithms.C3.69 4.22 5.24 5.25
2720 | Optimal Balancing of I/O Requests to Disks | Determining a policy for efficient allocationand utilization of a set of disk drives with differing operational characteristics is examined usinganalytical techniques.  Using standard queueing theory, each disk drive is characterized by a queueingmodel with service time of a disk drive represented by the probability density function of the sum of twouniform distributions. Total response time of the set of disk models is then minimized under varyingload conditions. The results indicate that faster devices should have higher utilization factors and thatthe number of different device types utilized tends to decrease with decreasing load.  Specific examplesusing 2314 and 3330 combinations are examined. | Piepmeier, W. F..Kdisk drive hierarchies, system evaluation, input/output,modeling, queueing theory, balancing, scheduling, device assignment.C2.44 4.35 5.15 5.5 6.35 8.1 8.3
2721 | The Digital Simulation of River Plankton Population Dynamics | This paper deals with the development of amathematical model for and the digital simulation in Fortran IV of phytoplankton and zooplankton populationdensities in a river using previously developed rate expressions.  In order to study the relationshipsbetween the ecological mechanisms involved, the simulation parameters were varied illustrating theresponse of the ecosystem to different conditions, including those corresponding to certain types of chemicaland thermal pollution.  As an investigation of the accuracy of the simulation methods, a simulationof the actual population dynamics of Asterionella in the Columbia River was made based on approximationsof conditions in that river. Although not totally accurate, the simulation was found to predict the generalannual pattern of plankton growth fairly well and, specifically, revealed the importance of the annualvelocity cycle in determining such patterns.  In addition, the study demonstrates the usefulness ofdigital simulations in the examinations of certain aquatic ecosystems, as well as in environmentalplanning involving such examinations. | Claudson, R. M..Kdigital simulation, mathematical modeling, planktonpopulation dynamics, phytoplankton, zooplankton, river ecosystems, ecological mechanisms, environmental simulation,modeling ecosystems, pollution, environmental impact, environmental planning.C3.12 3.19
2722 | Multidimensional Binary Search Trees Used for Associative Searching | This paper develops the multidimensional binarysearch tree (or k-d tree, where k is the dimensionality of the search space) as a data structure for storage ofinformation to be retrieved by associative searches. The k-d tree is defined and examples are given. Itis shown to be quite in its storage requirements.  A significant advantage of this structure is that a singledata structure can handle many types of queries very efficiently.  Various utility algorithms are developed;their proven average running times in an n record file are: insertion, O (log n); deletion ofthe root, O (n^(k-1)/k); deletion of a random node, O (log n); and optimization (guarantees logarithmic performanceof searches), O (n log n).  Search algorithms are given for partial match queries with t keys specified[proven maximum running time of O (n^(k-t)/k)] and for nearest neighbor queries [empirically observed averagerunning time of O (log n).]  These performances far surpass the best currently known algorithms forthese tasks.  An algorithm is presented to handle any general intersection query. The main focus of thispaper theoretical.  It is felt, however, that k-d trees could be quite useful in many applications,and examples of potential uses are given. | Bently, J. L..Kassociative retrieval, binary search trees, key,attribute, information retrieval system, nearest neighbor queries, partial match queries, intersectionqueries, binary tree insertion.C3.63 3.70 3.74 4.49
2723 | Multiprocessing Compactifying Garbage Collection | Algorithms for a multiprocessing compactifyinggarbage collector are presented and discussed.  The simple case of two processors, one performing LISP-likelist operations and the other performing garbage collection continuously, is thoroughly examined.The necessary capabilities of each processor are defined, as well as interprocessor communicationand interlocks. Complete procedures for garbage collection and for standard list processing primitivesare presented and thoroughly explained.  Particular attention is given to the problems of marking and relocatinglist cells while another processor may be operating on them.  The primary aim throughout is toallow the list processor to run unimpeded while the other processor reclaims list storage.  The morecomplex cases involving several list processors and one or more garbage collection processors are also briefly discussed. | Steele, G. L. Jr..Kgarbage collection, storage reclamation, reclaimer,storage allocation, multiprocessing, synchronization, semaphores, parallel processing, compactification, relocation,LISP, list processing, free storage, pointers, data structures, gc processor.C4.19 4.32 4.40 4.49 4.9
2724 | The Lemniscate Constants (Corrigendum) | Todd, J.
2725 | A Comparison of Simulation Event List Algorithms (Corrigendum) | Vaucher, J. C.Duval, P.
2726 | Combining Decision Rules in a Decision Table | The techniques for minimizing logic circuitsare applied to the simplification of decision tables by the combining of decision rules. This methodis logically equivalent to the Quien-McCluskey method for finding prime implicants.  If some of thedecision rules implied in the ELSE Rule occur with low frequency, then the ELSE Rule can be used to furthersimplify the decision table.  Several objectives merit consideration in optimizing a decision table:(1)reducing machine execution time; (2) reducing preprocessing time; (3) reducing required machine memory;(4) reducing the number of decision rules.  (This often improves the clarity of the decision tableto a human reader.)  It will be shown that objectives (3) and (4) can be furthered with the above methods. Objective (1) is also attained if overspecified decision rules are not combined.  Objective (2) must becompared against the potential benefits of objectives (1), (3), and (4) in deciding whether to use the above methods. | Shwayder, K..Kthe Quine-McCluskey method, prime implicants, minimization,maximization, logic circuit, boolean method, coding, decision tables, flowcharting, sorting.C3.5 3.74 4.12 5.31 5.6
2727 | Multiple Byte Processing with Full-Word Instructions | A method is described which allows parallelprocessing of packed data items using only ordinary full-word computer instructions, even though the processingrequires operations whose execution is contingent upon the value of a datum.  It provides a useful techniquefor processing small data items such as alphanumeric characters. | Lamport, L..Kbyte processing, character processing, packed data.C4.9
2728 | Consecutive Storage of Relevant Records with Redundancy | This paper studies the properties of a newclass of file organizations (CRWR) where records relevant to every query are stored in consecutive storagelocations but the organizations contain redundancy. Some theorems which provide tools for reducing redundancyin CRWR organizations have been also developed. Redundancies obtained by the application of these theoremsare compared with that of query-inverted file organizations.  Some CRWR organization with minimum redundancyhave also been developed for queries which specify sets of keys. | Ghosh, S. P..Kconsecutive, retrieval, storage, file, records, query, redundancy, key.C3.70 3.73 3.74
2729 | Comments on a Paper by T. C. Chen and I. T. Ho | Smith, A. J..Kbinary coded decimal digits, decimal data storage,data compression, Huffman codes, variable length codes.C6.32 6.34
2730 | Interactive Consulting via Natural Language | Interactive programming systems often containhelp commands to give the programmer on-line instruction regarding the use of the various systemscommands.  It is argued that it would be relatively easy to make these help commands significantly morehelpful by having them accept requests in natural language.  As a demonstration, Weizenbaum's ELIZA programhas been provided with a script that turns it into a natural language system consultant. | Sharo, S. C.Kwasny, S. C..Kinteractive programming, time-sharing systems, naturallanguage processing, computer assisted instruction.C3.32 3.42 3.79 4.49
2731 | Remark on Stably Updating Mean and Standard Deviation of Data | Cotton, I. W..Kmean, standard deviation.C5.5 5.19
2732 | Guarded Commands, Nondeterminacy and Formal Derivation of Programs | So-called "guarded commands" are introducedas a building block for alternative and repetitive constructs that allow nondeterministic program componentsfor which at least the activity evoked, but possible even the final state, is not necessarily uniquelydetermined by the initial state.  For the formal derivation of programs expressed in termsof these constructs, a calculus will be shown. | Dijkstra, E. W..Kprogramming languages, sequencing primitives, programsemantics, programming language semantics, nondeterminacy, case-construction, repetition, termination,correctness proof, derivation of programs, programming methodology.C4.20 4.22
2733 | Deterministic Parsing of Ambiguous Grammars | Methods of describing the syntax of programminglanguages in ways that are more flexible and natural than conventional BNF descriptions are considered. These methods involve the use of ambiguous context-free grammars together with rules to resolvesyntactic ambiguities.  It is shown how efficient LR and LL parsers can be constructed directly fromcertain classes of these specifications.   | Aho, A. V.Johnson, S. C.Ullman, J. D..Kprogramming language specification, parser generation,translator writing systems, syntax analysis, LR parsing, LL parsing, ambiguous grammars.C4.12 4.22 5.23
2734 | On the External Storage Fragmentation Producedby First-Fit and Best-Fit Allocation Strategies | Published comparisons of the external fragmentationproduced by first-fit and best-fit memory allocation have not been consistent.  Through simulation,a series of experiments were performed in order to obtain better data on the relative performance offirst-fit and best-fit and a better understanding of the reasons underlying observed differences. Thetime-memory-product efficiencies of first-fit and best-fit were generally within 1 to 3 percent of eachother.  Except for small populations, the size of the request population had little effect on allocationefficiency.  For exponential and hyperexponential distributions of requests, first-fit outperformed best-fit;but for normal and uniform distributions, and for exponential distributions distorted in variousways, best-fit outperformed first-fit.  It is hypothesized that when first-fit outperforms best-fit,it does so because first-fit, by preferentially allocating toward one end of memory, encourages large blocksto grow at the other end.  Sufficient contiguous space is thereby more likely to be available for relativelylarge requests.  Results of simulation experiments supported this hypothesis and showed that the relativeperformance of first-fit and best-fit depends on the frequency of request.  When the coefficient ofvariation of the request distribution is greater than or approximately equal to unity, first-fit outperformed best-fit. | Shore, J. E..Kstorage fragmentation, dynamic memory allocation, first-fit, best-fit.C3.73 4.32 4.35
2735 | Discrimination in the Employment of Women in the Computer Industry | Weber, R. E.Gilchrist, B..Kdiscrimination against women, salaries, employment,programmers, systems analysis, keypunch operators, machine operators.C2.40 2.41 2.42
2736 | A Note on Hash Linking | Bobrow, D. G..Khash search, address space extension,implicit pointers, monitor conditions.C3.7 3.73 4.1
2737 | Determining the Minimum-Area EncasingRectangle for an Arbitrary Closed Curve | This paper describes a method for finding therectangle of minimum area in which a given arbitrary plane curve can be contained.  The method is of interestin certain packing and optimum layout problems.  It consists of first determining the minimal-perimeterconvex polygon that encloses the given curve and then selecting the rectangle of minimum area capableof containing this polygon.  Three theorems are introduced to show that one side of the minimum-arearectangle must be colinear with an edge of the enclosed polygon and that the minimum-area encasing rectanglefor the convex polygon is also the minimum-area rectangle for the curve. | Freeman, H.Shapira, R..Kenclosed curve, optimum layout, optimumpacking, minimum-area encasing rectangle.C5.19 5.49
2738 | Use of the Concept of Transparency in theDesign of Hierarchically Structured Systems | This paper deals with the design of hierarchicallystructured programming systems.  It develops a method for evaluating the cost of requiring programmersto work with an abstraction of a real machine.  A number of examples from hardware and softwareare given as illustrations of the method. | Parnas, D. L.Siewiorek, D. P..Khierarchical systems, bottom up design, levelsof abstraction, synchronization primitives.C4.20 4.30 6.1 6.20
2739 | The Restriction Language for Computer Grammars of Natural Language | Over the past few years, a number of systemsfor the computer analysis of natural language sentences have been based on augmented context-freegrammars: a context-free grammar which defines a set of parse trees for a sentence, plus a group of restrictionsto which a tree must conform in order to be a valid sentence analysis.  As the coverage of thegrammar is increased, an efficient representation becomes essential for further development.  This paperpresents a programming language designed specifically for the compact and perspicuous statement of restrictionsof a natural language grammar.  It is based on ten years' experience parsing text sentences withthe comprehensive English grammar of the N.Y.U. Linguistic String Project, and embodies in its syntaxand routines the relations which were found to be useful and adequate for computerized natural languageanalysis.  The language is used in the current implementation of the Linguistic String Parser. | Sager, N.Grishman, R..Knatural language, parsing, grammar, programming languages.C3.42 3.79 4.22
2740 | A Large Semaphore Based Operating System | The paper describes the internal structure ofa large operating system as a set of cooperating sequential processes.  The processes synchronize bymeans of semaphores and extended semaphores (queue semaphores).  The number of parallel processes is carefullyjustified, and the various semaphore constructions are explained.  The system is proved to be free of "deadlyembrace" (deadlock).  The design principle is an alternative to Dijkstra's hierarchical structuringof operating systems.  The project management and the performance are discussed, too.  The operatingsystem is the first large one using the RC 4000 multiprogramming system. | Lauesen, S..Kcooperating processes, operating system, semaphores,semaphore applications, queue semaphores, deadlock, deadly embrace, hierarchical structuring, multiprogramming,operating system structure, asynchronous structuring, buffering, parallel processes, synchronizingprimitives, reentrant code, RC 4000, project management, time schedule, debugging, project planning,project scheduling, reliability, program proving, coroutines, correctness, program maintenance, software paging.C4.30 4.31 4.32 4.42 4.43 5.24
2741 | Decomposability, Instabilities, andSaturation in Multiprogramming Systems | A step-by-step approach to model the dynamicbehavior and evaluate the performance of computing systems is proposed.  It is based on a technique of variableaggregation and the concept of nearly decomposable system, both borrowed from Econometrics.  This approachis taken in order to identify in multiprogramming paging systems (i) unstable regimes of operations and (ii)critical computing loads which bring the system into states of saturation.  This analysis leads to amore complete definition of the circumstances in which "thrashing" can set in. | Courtois, P. J..Kmultiprogramming, paging, performance evaluation,saturation, instabilities, thrashing, aggregation, system levels, hierarchy,networks of queues.C4.31 4.32 8.1 8.2
2742 | Improved Event-Scanning Mechanisms for Discrete Event Simulation | Simulation models of large, complex "real-world"applications have occasionally earned the reputation of eating up hours of computer time.  Thisproblem may be attributed in part to difficulties such as slow stochastic convergence.  However, an additionalproblem lies in the fact that a significant amount of bookkeeping time is required to keep future eventsin their proper sequence.  This paper presents a method for significantly reducing the time spent scanningfuture event lists in discrete event simulations.  There models are presented, all of which improve in effectivenessas the events-list scan problem becomes more burdensome. | Wyman, F. P..Kdiscrete event simulation, simulation, event scanning mechanisms.C4.34 5.5 8.1
2743 | Sorting X + Y | Harper, L. H.Payne, T. H.Savage, J. E.Straus, E..Kmerge sorting, computational complexity, datamodeling, computing models, binary comparisons.C5.25 5.31
2744 | Addition in an Arbitrary Base Without Radix Conversion | This paper presents a generalization of anold programming technique; using it,one may add and subtract numbers represented in any radix, includinga mixed radix, and stored one digit per byte in bytes of sufficient size.  Radix conversion is unnecessary,no looping is required, and numbers may even be stored in a display (I/O) format.  Applicationsto Cobol, MIX, and hexadecimal sums are discussed.  | Soule, S..Kaddition, subtraction, decimal arithmetic, arbitraryradix arithmetic, radix conversion, MIX arithmetic, Cobol display arithmetic, mixed radix arithmetic.C4.49 4.9 5.9
2745 | A Linear Space Algorithm for Computing Maximal Common Subsequences | The problem of finding a longest common subsequenceof two strings has been solved in quadratic time and space.  An algorithm is presented which willsolve this problem in quadratic time and in linear space. | Hirschberg, D. S..Ksubsequence, longest common subsequence, string correction, editing.C3.63 3.73 3.79 4.22 5.25
2746 | Efficient String Matching: An Aid to Bibliographic Search | This paper describes a simple, efficient algorithmto locate all occurrences of any of a finite number of keywords in a string of text.  The algorithmconsists of constructing a finite state pattern matching machine from the keywords and then using thepattern matching machine to process the text string in a single pass.  Construction of the pattern matchingmachine takes time proportional to the sum of the lengths of the keywords.  The number of state transitionsmade by the pattern matching machine in processing the text string is independent of the numberof keywords.  The algorithm has been used to improve the speed of a library bibliographicsearch program by a factor of 5 to 10. | Aho, A. V.Corasick, M. J..Kkeywords and phrases, string pattern matching, bibliographicsearch, information retrieval, text-editing, finite state machines, computational complexity..C3.74 3.71 5.22 5.25
2747 | A Simplified Recombination Scheme for the Fibonacci Buddy System | A simplified recombination scheme for the Fibonaccibuddy system which requires neither tables nor repetitive calculations and uses only twoadditional bits per buffer is presented. | Cranston, B.Thomas, R..KFibonacci buddy system, dynamic storage allocation, buddy system.C3.89 4.32 4.39
2748 | Indirect Threaded Code | An efficient arrangement for interpretive codeis described.  It is related to Bell's notion of threaded code but requires less space and is moreamenable to machine independent implementations. | Dewar, R. B. K..Kthreaded code, SNOBOL4, interpretors, code generation.C4.12 4.13
2749 | Significant Event Simulation | This paper compares a new method of simulationorganization, called the significant event method, with an old one, called the clock pulse method, usingas examples two automobile traffic models.  The significant event method is found to be more efficientthan the clock pulse method at low levels of system interaction and less efficient at high levels.  A simplemathematical model for the trade-off in the relative running time of the two methods is developed. The model aids in choosing between the two simulation methods for a particular experiment.  It is concludedthat the significant event method can be of value in the simulation of some systems when computationalefficiency is of sufficient importance. | Babich, A. F.Grason, J.Parnas, D. L..Ksimulation organization, event simulation, clockpulse simulation, significant event simulation..C8.1
2750 | A Cost Oriented Algorithm for Data Set Allocation in Storage Hierarchies | Data set allocation in today's multilevelstorage systems is usually based on qualitative, ad hoc decisions.  While it would be desirable to obtainan optimal solution to this allocation problem, it is clear that the number of parameters involved makesit intractable to straight-forward solution.  In such a situation, we must find a set of assumptionswhich simplify the problem greatly, but which still provide a basis for considering all significantcost elements. This paper presents such a first, quantitative allocation step.  It considers many of thesignificant detailed costs of system utilization, data storage, data staging, and data migration.  Althoughmany avenues of further improvement are available, the present algorithm seems to be usefully accurate.As such, it can aid in quantifying the problems of data set allocation, storage system configuration, and new device designs. | Lum, V. Y.Senko, M. EWang, C. P.Ling, H..Kdata set allocation, hierarchical storage, storagesystem configuration, data staging, data migration, storage allocation analysis.C3.5 3.9 6.2
2751 | Illumination for Computer Generated Pictures | The quality of computer generated images ofthree-dimensional scenes depends on the shading technique used to paint the objects on the cathode-raytube screen.  The shading algorithm itself depends in part on the method for modeling the object, whichalso determines the hidden surface algorithm.  The various methods of object modeling, shading, and hiddensurface removal are thus strongly interconnected.  Several shading techniques corresponding to differentmethods of object modeling and the related hidden surface algorithms are presented here.  Human visualperception and the fundamental laws of optics are considered in the development of a shading rule thatprovides better quality and increased realism in generated images. | Phong, B. T..Kcomputer graphics, graphic display, hidden surface removal..C3.26 3.41 8.2
2752 | Generation of All the Cycles of a Graph froma Set of Basic Cycles [H] (Algorithm 492)  | Gibbs, N. E..Kbasic cycle, cycle, graph.C5.32 3.24
2753 | A Heuristic Problem Solving Design Systemfor Equipment or Furniture Layouts | The Designer Problem Solver (DPS) demonstratesthat the computer can perform simple design tasks.  In particular, it designs furniture and equipmentlayouts.  This task was chosen because it is simple, well defined, and characteristic of many designtasks in architecture, engineering, urban planning, and natural resource management.  These space planningtasks usually involve manipulating two-dimensional representations of objects to create feasible or optimalsolutions for problems involving topological and metric spatial constraints.  The paper describesextensive tests performed on the program.  DPS is a heuristic problem solver with a planning phase prefixedto it.  It uses the planning process to give it a sense of direction, diagnostic procedures to locatedifficulties, and remedial actions to recover from difficulties.  It uses a convex polygon representationto accurately describe the objects and the layout.  This representation allows topological andmetric constraints to be tested and the design to be easily updated.  DPS has been applied to 50 problems. While it is slow and limited in scope, the ideas behind it are general.  It demonstrates the needfor selectivity in controlling search and the methods used to achieve it: task-specific information,planning, diagnostic procedures, remedial actions, and selective alternative generators. | Pfefferkorn, C. E..Kartificial intelligence, computer-aided design,design synthesis, diagnostic search, heuristics, planning, problem solving, representations, search strategies,space planning, spatial representations.C3.20 3.25 3.64 3.66
2754 | A Syntactic Algorithm for Peak Detectionin Waveforms with Applications to Cardiography | Peaks in a digitized waveform are detected by analgorithm incorporating piecewise linear approximation and tabular parsing techniques.  Several parameters serveto identify the waveform context enabling accurate measurement of peak amplitude, duration, and shape.  Thealgorithm is of sufficient speed to allow on-line real-time processing.  An example of its applicationis demonstrated on an electrocardiogram. | Horowitz, S. L..Kpeak detection, digitized waveform, piecewise linearapproximation, context-free grammar, bottom-up parsing, electrocardiogram..C3.12 3.24 3.34 3.63 4.19 5.13 5.23
2755 | The New Math of Computer Programming (Corrigendum) | Mills, H. D.
2756 | A Problem-List of Public Policy IssuesConcerning Computers and Health Care | Wasserman, A. I..Keconomic and social implications, the publicand computing, medicine and health care.C2.11 2.12 3.34
2757 | More on kth Shortest Paths | Fox, B.L..Knetworks, kth shortest paths.C5.32
2758 | A Note on the LU Factorization of a Symmetric Matrix | Evans, D. J.Hatzopoulos, M..Ksymmetric matrices, factorization, test matrices,matrix inversion, separable systems.C5.14
2759 | Solution of an Overdetermined System ofEquations in the L1 Norm (Algorithm R478) | Fritsch, F. N.Hindmarsh, A. C.
2760 | Visible Surface Plotting Program (Algorithm R475) | Doran, C. J.
2761 | Visible Surface Plotting Program (Algorithm R475) | Mashburn, R. G.
2762 | Ten Subroutines for the Manipulationof Chebyshev Series (Algorithm R446, C446) | Piessens, R.Mertens, I.
2763 | Basic Cycle Generation [H] (Algorithm 491) | Gibbs, N. E..KGraph, basic cycles,fundamental cycle,spanning tree, vertex adjacency matrix.C5.32 3.24
2764 | An Intelligent Analyzer and Understander of English | The paper describes a working analysis and generationprogram for natural language, which handles paragraph length input.  Its core is a system of preferentialchoice between deep semantic patterns, based on what we call "semantic density."  The systemis contrasted: (1) with syntax oriented linguistic approaches, and (2) with theorem provingapproaches to the understanding problem. | Wilks, Y..Kartificial intelligence, computational linguistics,template, paraplate, stereotype, machine translation, understanding, natural language processing,semantic preference, semantic density.C3.36 3.42 3.63
2765 | Analysis and performance of Inverted Data Base Structures | The need to envision and architecture data basesystems in a hierarchical level by level framework is stressed. The inverted data base (file) organizationis then analyzed, considering implementation oriented aspects.  The inverted directory is viewed realisticallyas another large data base which itself is subjected to inversion.  Formulations are derivedto estimate average access time (read only) and storage requirements, formalizing the interaction of database content characteristics, logical complexity of queries, and machine timing and blocking specificationsidentified as having a first-order effect on performance.  The formulations presented are necessaryto be used in conjunction with any index selection criteria to determine the optimum set of index keys. | Cardenas, A. F..Kdata base architecture, inverted file organization,data base performance and measurement, secondary index organization, information storage and retrieval, query answering.C3.70 3.71 3.72 3.74 3.79 4.0
2766 | Copying Cyclic List Structures in Linear Time Using Bounded Workspace | A bounded workspace copying algorithm for arbitrarylist structures is given.  This algorithm operates in linear time and does not require tag bits. The best previous bounded workspace copying algorithms achieved n^2 time without tag bits and n log n time withone tag.  The only restriction on the algorithm given here is that the copy must be placed into a contiguoussection of memory.  The method is applicable to fixed or variable size nodes. | Fisher, D. A..Klist processing, copying, linear time, space complexity.C4.49 5.25
2767 | A Comparison of Simulation Event List Algorithms | Four algorithms are considered which can be usedto schedule events in a general purpose discrete simulation system.  Two of the algorithms are new, oneis based on an end-order tree structure for event notices, and another uses an indexed linear list. The algorithmsare tested with a set of typical stochastic scheduling distributions especially chosen to showthe advantages and limitations of the algorithms.  The end-order tree algorithm is shown to be an advantageous,immediate replacement for the algorithm in use with current simulation languages.  The mostpromising algorithm uses the indexed list concept.  It will require an adaptive routine before it canbe employed in general purpose simulators,but its performance is such that further study would be fruitful. | Vaucher, J. G.Duval, P..Ksimulation, time flow mechanisms, event list algorithm,simulation, time flow mechanisms, event list algorithm, simulation executive, event schedulingroutine, discrete system simulation, sorting.C3.74 4.22 8.1
2768 | An Algorithm for Locating Adjacent Storage Blocks in the Buddy System | A simple scheme for the determination of thelocation of a block of storage relative to other blocks is described.  This scheme is applicableto the buddy type storage allocation systems. | Hinds, J. A..Kdynamic storage allocation, buddy system, generalized Fibonacci sequences.C3.89 4.32 4.39
2769 | A Modification of Warshall's Algorithm forthe Transitive Closure of Binary Relations | An algorithm is given for computing the transitiveclosure of a binary relation that is represented by a Boolean matrix. The algorithm is similar to Warshall'salthough it executes faster for sparse matriceson most computers, particularly in a paging environment. | Warren, H. S. Jr..KWarshall's algorithm, transitive closure, reachabilitymatrix, directed graph, digraph, Boolean matrix, binary relation.C5.30 5.32
2770 | The Quadratic Hash Method When the Table Size Is Not a Prime Number | Previous work on quadratic hash methods islimited mainly to the case where the table size is a prime number.  Here, certain results are derived forcomposite numbers.  It is shown that all composite numbers containing at least the square of one of the componentprimes have full-period integer-coefficient quadratic hash functions. | Batagelj, V..Kquadratic search, hash code, scatter storage, table size.C3.74 4.10
2771 | The Synthesis of Solids Bounded by Many Faces | A technique is presented which allows a classof solid objects to be synthesized and stored using a computer.  Synthesis begins with primitive solidslike a cube, wedge, or cylinder.  Any solid can be moved, scaled, or rotated.  Solids may also beadded together or subtracted.  Two algorithms to perform addition are described.  For practical designers,the technique has the advantage that operations are concise, readily composed, and are given in termsof easily imagined solids.Quite short sequences of operations suffice to build up complex solids bounded by many faces. | Braid, I. C..Kcomputational geometry, computer-aided design,graphics, machined components, polyhedra, shape synthesis, three-dimensional modeling.C3.2 8.2
2772 | On Maintenance of the Opportunity Listfor Class-Teacher Timetable Problems | One of the principal components of proceduresfor the solution of class-teacher timetable problems is that for maintenance of the opportunity list.  Opportunitylist maintenance methods are based on necessary conditions for the existence of a solution. A generalframework for necessary conditions, together with four specific sets of necessary conditions, is given. | Smith, G..Kcombinatorial, necessary conditions, opportunitylist, schedule,school timetable, timetable.C3.51 5.39
2773 | A Weighted Buddy Method for Dynamic Storage Allocation (Corrigendum) | Shen, K. K.Peterson, J. L.
2774 | Remark on Algorithm 475 | Frederick, L. W.
2775 | The Dilogarithm Function of a Real Argument [S22] (Algorithm 490) | Ginsberg, E. S.Zaborowski, D..Kdilogarithm.C5.12
2776 | Computer Networks in Higher Education: Socio-Economic-Political Factors | This study presents the results of a nationwidesurvey of computer networks in higher education conducted during 1971-73.  Five major and 18 minor networkswere identified.  The five major networks included: the ARPA Net, the California State College network,the University of Iowa/Iowa State University network, the Michigan Educational Research Information Triad,Inc., and the Triangle Universities Computation Center network in North Carolina. In-depth studies wereconducted of the latter two nets.  Based on the experiences of these operating networks, a number of factorsare identified for consideration in developing networks.  Finally, recommendations are advanced regardingthe development of networks in higher education in the future. | Chambers, J. A.Poore, R. V..Knetworks, higher education.C1.3 2.45
2777 | On a Solution to the Cigarette Smoker'sProblem (Without Conditional Statements) | This report discusses a problem first introducedby Patil, who has claimed that the cigarette smoker's problem cannot be solved using the P and V operationsintroduced by Dijkstra unless conditional statements are used.  An examination of Patil's proofshows that he has established this claim only under strong restrictions on the use of P and V.  These restrictionseliminate programming techniques used by Dijkstra and others since the first introductionof the semaphore concept.  This paper contains a solution to the problem.  It also discusses the needfor the generalized operators suggested by Patil. | Parnas, D. L..Koperating systems, co-operating processes,processsynchronization primitives.C4.3
2778 | Perturbations of Eigenvalues of Non-normal Matrices (Corrigendum) | Sluis, A.
2779 | Discrete Least Squares Polynomial Fits | The recurrence relation between orthogonal polynomialsis widely used for discrete least squares data fitting.  A variant of the classical algorithmwhich has better numerical properties is presented and the reason for its improved performance is explained. | Shampine, L. F..Korthogonal polynomials, data fitting, least squares,recurrence relation between orthogonal polynomials, residual.C5.11 5.13
2780 | On Computing Certain Elements of the Inverse of a Sparse Matrix | A recursive algorithm for computing the inverseof a matrix from the LU factors based on relationships in Takahashi, et al., is examined.  The formulas for thealgorithm are given; the dependency relationships are derived; the computational costs are developed; and somegeneral comments on application and stability are made. | Erisman, E. M.Tinney, W. F..Ksparse matrices, triangular factorization, elementsof inverse, tridiagonal matrix, sensitivities.C3.24 5.14
2781 | The Algorithm Sequential Access Method:An Alternative to Index Sequential | Whitt, J. D.Sullenberger, A. G..Kkeys, direct access method, sequential accessmethod, randomizing information retrieval.C3.7
2782 | A Reply to Gentleman and Marovich | Karp, R. A..Khigh-level languages, philosophy of language design.C4.22 5.19
2783 | The Algorithm SELECT-for Finding the ithSmallest of n Elements [M1] (Algorithm 489) | Floyd, R. W.Rivest, R. L..Kselection, medians, quantiles.C5.30 5.39
2784 | Expected Time Bounds for Selection | A new selection algorithm is presented whichis shown to be very efficient on the average, both theoretically and practically.  The number of comparisonsused to select the ith smallest of n numbers is n+min(i,n-i)+o(n).  A lower bound within 9percent of the above formula is also derived. | Floyd, R. W.Rivest, R. L..Kselection, computational complexity, medians, tournaments, quantiles.C5.30 5.39
2785 | Glypnir-A Programming Language for Illiac IV | GLYPNIR is one of the earliest existing languagesdesigned for programming the Illiac IV computer. The syntax of the language is based on ALGOL 60, but hasbeen extended to allow the programmer explicitly to specify the parallelism of his algorithm in terms of 64-wordvectors.  This paper describes the characteristics, goals and philosophy of the language, and discusses someof the problems associated with parallel computer architectures. | Lawrie, D. H.Layman, T.Baer, D.Randal, J. M..KGLYPNIR, Illiac IV, Programming language,parallel computation, parallel architecture.C4.2 4.21 4.22
2786 | A System for Typesetting Mathematics | This paper describes the design and implementationof a system for typesetting mathematics.  The language has been designed to be easy to learnand to use by people (for example, secretaries and mathematical typists) who know neither mathematics nortypesetting.  Experience indicates that the language can be learned in an hour or so, for it has few rulesand fewer exceptions.  For typical expressions, the size and font changes, positioning, line drawing, andthe like necessary to print according to mathematical conventions are all done automatically.  For example,the input sum from i=o to infinity x sub i=pi over 2 produces (formula).  The syntax of the language is specifiedby a small context-free grammar; a compiler-compiler is used to make a compiler that translates this languageinto typesetting commands.  Output maybe produced on either a phototypesetter or on a terminal with forwardand reverse half-line motions.  The system interfaces directly with text formatting programs, somixtures of text and mathematics may be handled simply.  This paper was typeset by the authors using the system described  | Kernighan, B. W.Cherry, L. L..Ktypesetting, photocomposition,compiler-compiler,graphics, printing, text processing..C4.12 4.22 8.2
2787 | Matrix Reduction-An Efficient Method | The paper describes an efficient method forreduction of the binary matrices which arise in some school time-tabling problems.  It is a developmentof that described by John Lions.  It has been generalized and adapted to fit into the complete timetablingprocess; to use a more compact data representation and more efficient processing techniques; to take fulleradvantage of possible available previous knowledge about the matrix.  And it is designed as a structuredprogram, which can readily be coded by the reader in the high level or low level programming languageof his choice.  Practical tests of the method have shown it to be a good basis for a realistic timetabling algorithm. | Johnston, H. C.Hoare, C. A. R..Kbinary matrices, matrix reduction, tight set, schooltimetable construction, structured programming.C3.51 4.9 5.39
2788 | Finding Circles by an Array of Accumulators | Kimme, C.Balard, D.Sklansky, J..Kpicture processing, pattern recognition, curve detection,line fitting.C3.63
2789 | A Minimal Spanning Tree Clustering Method (Algorithm R479) | Magnuski, H. S.
2790 | The Elementary Circuits of a Graph (Algorithm R459) | Syslo, M. M.
2791 | Exact Probabilities for R x C Contingency Tables (Algorithm R434) | Hancock, T. W.
2792 | Jacobi Polynomials (Algorithm R332) | Skovgaard, O.
2793 | Chi-Square Quantiles (Algorithm C451) | Knight,W.
2794 | State-Space, Problem-Reduction, and Theorem Proving-Some Relationships | This paper suggests a bidirectional relationshipbetween state-space and problem-reduction representations. It presents a formalism based on multiple-inputand multiple-output operators which provides a basis for viewing the two types of representationsin this manner.  A representation of the language recognition problem which is based on the Cockeparsing algorithm is used as an illustration.  A method for representing problems in first-order logicin such a way that the inference system employed by a resolution-based theorem prover determines whetherthe set of clauses is interpreted in the state-spacer mode or in the problem-reduction mode is presented. The analogous concepts in problem-reduction and theorem proving, and the terminology used to refer to them,are noted.  The relationship between problem-reduction, input resolution, and linear resolution is discussed. | VanderBrug, G. J.Minker, J..Kartificial intelligence, state-space representation,problem-reduction representation, theorem proving, language recognition.C3.64
2795 | Sentence Paraphrasing from a Conceptual Base | A model of natural language based on an underlyinglanguage-free representation of meaning is described.  A program based on this model is ableto produce sentence paraphrases which demonstrate understanding with respect to a given context.  Thisgenerator operates in conjunction with a natural language analyzer and a combined memory and inference model. In generating sentences from meaning structures, the program employs both the information retrieval anddeduction capabilities of the memory model.  The model encompasses several diverse classes of linguisticknowledge, which include: (1) executable tests of conceptual properties stored in discrimination nets;(2) information relating conceptual to syntactic roles, stored in a word-sense dictionary, and (3) surfacegrammatical knowledge, stored in a formal grammar. | Goldman, N. M..Kartificial intelligence, natural language processing,language generation, models of cognitive processes, semantic representation.C3.42 3.60 3.65
2796 | Monitors: An Operating System Structuring Concept (Corrigendum) | Hoare, C. A. R. 
2797 | A First Order Approximation to the OptimalCheckpoint Interval (Corrigendum) | Young, J. W.
2798 | Analysis of Interleaved Memory Systems Using Blockage Buffers | A model of interleaved memory systems is presented,and the analysis of the model by Monte Carlo simulation is discussed.  The simulations investigatethe performance of various system structures, i.e. schemes for sending instruction and data requeststo the memory system.  Performance is measured by determining the distribution of the number of memorymodules in operation during a memory cycle.  An important observation from these investigations is thatseparately grouping instruction and data requests for memory can substantially increase the average numberof memory modules in operation during a memory cycle.  Results of the simulations and an analyticalstudy are displayed for various system structures. | Burnett, G. J.Coffman, E. G. Jr..Kinterleaved memory systems, modular memory systems,memory performance analysis, blockage buffer, conflict buffer, simulation, Monte Carolo simulation.C5.5 6.34
2799 | Stably Updating Mean and Standard Deviation of Data | By considering the (sample) mean of a set ofdata as a fit to this data by a constant function, a computational method is given based on a matrix formulationand Givens transformations. The (sample) mean and standard deviation can be updated as dataaccumulates.  The procedure is numerically stable and does not require storage of the data.  Methods fordealing with weighted data and data removal are presented.  When updating the mean and square of thestandard deviation, the process requires no square roots. | Hanson, R. J..Kmean, standard deviation, least squares, Givenstransformation, updating estimates, removing data.C5.5 5.19
2800 | Connections Between Accuracy and StabilityProperties of Linear Multistep Formulas | This paper is concerned with stability and accuracyof families of linear k-step formulas depending on parameters, with particular emphasis on the numericalsolution of stiff ordinary differential equations.  An upper bound, p=k, is derived for the order of accuracyof A(inf)-stable formulas.  Three criteria are given for A(0)-stability.  It is shown that (1) forp=k, k arbitrary, A(inf)-stability implies certain necessary conditions for A(0)-stability and for strictstability (meaning that the extraneous roots of p(psi) satisfy |psi|<1); (2) for p=k=2,3,4,and 5, A(inf)-stability(for k=5 together with another constraint) implies strict stability; and (3) for certain one-parameterclasses of formulas with p=k=3,4,and/or 5, A(inf)-stability implies A(0)-stability. | Liniger, W..Kstiff equations, parametrized linear multistep formulas,order of accuracy, A(0)-stability, A(inf)-stability, strict stability.C5.17
2801 | Storage-Efficient Representation of Decimal Data | Usually n decimal digits are represented by4n bits in computers.  Actually, two BCD digits can be compressed optimally and reversibly into 7 bits,and three digits into 10 bits, by a very simple algorithm based on the fixed-length combination of twovariable field-length encodings.  In over half of the cases the compressed code results from the conventionalBCD code by simple removal of redundant 0 bits.  A long decimal message can be subdivided intothree-digit blocks, and separately compressed; the result differs from the asymptotic minimum lengthby only 0.34 percent.  The hardware requirement is small, and the mappings can be done manually. | Chi Chen, T.Ho, I. T..Kbinary-coded decimal digits, decimal data storage.C6.32 6.34
2802 | The New Math of Computer Programming | Structured programming has proved to be an importantmethodology for systematic program design and development.  Structured programs are identifiedas compound function expressions in the algebra of functions. The algebraic properties of these functionexpressions permit the reformulation (expansion as well as reduction) of a nested subexpression independentlyof its environment, thus modeling what is known as stepwise program refinement as well as programexecution.  Finally, structured programming is characterized in terms of the selection and solutionof certain elementary equations defined in the algebra of functions.  These solutions can be given ingeneral formulas, each involving a single parameter, which display the entire freedom availablein creating correct structured programs. | Mills, H. D..Kstructured programming, algebra of functions,stepwise refinement, program correctness.C4.6 5.21 5.24
2803 | Pseudoinverses and Conjugate Gradients | This paper is devoted to the study of connectionsbetween pseudoinverses of matrices and conjugate gradients and conjugate direction routines. | Hestenes, M. R..Kpseudoinverse, conjugate gradients, hermitian matrix, minimization.C5.14
2804 | Elementary Divisors of Tensor Products | The elementary divisors of a tensor productof linear transformations have been known for 40 years.  This paper provides a short, easily accessibleproof of these results, and points out an interesting combinatorial consequence of the proof. | Marcus, M.Robinson, H..Kelementary divisors, tensor products, linear transformations.C5.14
2805 | Perturbations of Eigenvalues of Non-normal Matrices | The problem considered is to give bounds for finiteperturbations of simple and multiple eigenvalues of nonnormal matrices, where these bounds are in termsof the eigenvalues, the departure from normality, and the Frobenius norm of the perturbation matrix, butnot in terms of the eigen system.  The bounds which are derived are shown to be almost attainable for any set of matrices.  | van der Sluis, A..Kperturbation of eigenvalues, non-normal matrices,departure from normality, Gershgorin circles.C5.14
2806 | Two Hadamard Numbers for Matrices | A discussion is given of two functions of the entriesof a square matrix, both related to Hadamard's determinant theorem, which have some merits as alternativesto norm-bound "condition numbers."  One (for linear systems) is known; the other (for eigen systems) seems to be new. | Birkhoff, G..Kmatrices, eigenvalues, norms, condition numbers,error analysis, Gram-Schmidt orthogonalization.C5.11 5.14
2807 | On the Stability of Gauss-Jordan Elimination with Pivoting | The stability of the Gauss-Jordan algorithmwith partial pivoting for the solution of general systems of linear equations is commonly regarded as suspect. It is shown that in many respects suspicions are unfounded, and in general the absolute error in the solutionis strictly comparable with that corresponding to Gaussian elimination with partial pivoting plus backsubstitution.  However, when A is ill conditioned, the residual corresponding to the Gauss-Jordan solutionwill often be much greater than that corresponding to the Gaussian elimination solution. | Peters, G.Wilkinson, J. H..KGauss-Jordan algorithm, Gaussian elimination, back-substitution,backward error analysis, bounds for error in solution, bound for residual .C5.11 5.14
2808 | The Lemniscate Constants | The lemniscate constants, and indeed someof the methods used for actually computing them, have played an enormous part in the development ofmathematics.  An account is given here of some of the methods used-most of the derivations can be madeby elementary methods.  This material can be used for teaching purposes, and there is much relevant andinteresting historical material.  The acceleration methods developed for the purpose of evaluatingthese constants are useful in other problems. | Todd, J..Klemniscate, acceleration, elliptic functions, Euler transformation.C1.2 5.0
2809 | Positivity and Norms | Following some lines of joint work with A.S. Householder, the character and use of algebraic methods in the theory of norms is demonstrated.  New resultsconcerning norms with values in an Archimedian vector lattice (not necessarily being totally ordered)are given, in particular for the generalization of order unit norms, L-norms and M-norms.  An exampleof application to operator norms is given concerning contraction properties of positive operators. | Bauer, F. L..Kmatrices, norms, positivity, numerical range, positivitycones, vector lattice,absolute, monotonic.C5.11 5.14
2810 | Professionalism in the Computing Field | The term professional means different thingsto different people; nevertheless, there are certain general technical and social standards normally associatedwith a professional.  Further, the term is more generally applied to the practitioner rather thanto the researcher.  But within the rather broad definition specified, the computing practitioner is,as yet, not regarded as a professional.  Each of the four types of institutions-academic, industry, government,and the professional society- that educate,employ, regulate, and mold the practitioner contributesto the "nonprofessional" status of the computing practitioner.  The roles of these institutions are examined,various shortcomings are noted, and recommended changes are suggested.  In the last analysis, professionalstatus is not bestowed; it is earned.  However, universities and industry, specifically, can make certain improvements to help the computing practitioner achieve professional status. | Finerman, A..Kprofessional aspects, educational programs, industryattitudes, professional societies, licensing and certification.C1.50 2.10 2.2
2811 | Structural Pattern Recognition Of Carotid PulseWaves Using A General Waveform Parsing System | A general waveform parsing system with applicationto structural pattern recognition of carotid pulse waves is described.  The carotid arterial pulsewave is of medical importance because of variation in its structure induced by arterial aging and cardiovasculardisease.  The syntax-driven waveform analysis system has been applied with good results to these pulsewaves to detect and measure structural variations.  The waveform parsing system is modeled on a compiler-compilersystem and allows the user to enter application specific information as data.  It is thus generalenough to be applicable to other waveforms. | Stockman, G.Kanal, L.Kyle, M. C..Kstructural pattern recognition, parsing, waveform analysis, pulse waves.C3.12 3.34 3.63 4.12
2812 | Computer-Aided Analysis and Design of Information Systems | This paper describes the use of computer-aidedanalysis for the design and development of an integrated financial management system by the Navy MaterialCommand Support Activity (NMCSA).  Computer-aided analysis consists of a set of procedures and computerprograms specifically designed to aid in the process of applications software design, computer selectionand performance evaluation.  There are four major components: Problem Statement Language, Problem StatementAnalyzer, Generator of Alternative Designs, and Performance Evaluator. The statement of requirementswas written in ADS (Accurately Defined Systems) and analyzed by a Problem Statement Analyzer for ADS. The ADS problem definition was supplemented with additional information in order to create a completeproblem definition.  The analyzed problem statement was translated to the form necessary for use by theSODA (Systems Optimization and Design Algorithm)program for the generation of alternative specificationsof program modules and logical database structures. | Nunamaker, J. F. Jr.Konsynski, B. R. Jr.Ho, T.Singer, C..Kcomputer-aided analysis, information systems, logicalsystem design, problem statement language, problem statement analyzer, physical system design,accurately defined systems, systems optimization and design algorithm.C2.44 3.50 4.33 4.9 8.1
2813 | The Computer Science and Engineering Research Study (COSERS) | The Computer Science and Engineering ResearchStudy (COSERS) is briefly described.  The motivation, organization, and schedule for this NSF supported studyare given.  For possible further reference, the subject area panel chairmen and the membersof the Steering Committee are identified. | Arden, B..Kcomputer science research, computer engineeringresearch, national research study.C1.0 1.52
2814 | Roster of Programming Languages for 1974-75  | Sammet, J. E.
2815 | High-Level Binding with Low-Level Linkers | An easy to implement scheme is described bywhich a compiler can enforce agreement between complex data types in separately compiled modules. The scheme is designed to work with any existing link editor or linking loader, no matter how deficient. Obscure run-time errors caused by inconsistent usages are forestalled by static errors detected at linking time. | Hamlet, R. G..Kseparate compilation, binding, linking, strong typing.C4.10 4.22
2816 | Optimal Reorganization of Distributed Space Disk Files | In most database organizations, the cost of accessingthe database will increase due to structural changes caused by updates and insertions.  By reorganizingthe database,the access costs can be reduced.  A basic problem is to establish the proper tradeoff betweenperformance, storage costs, and reorganization costs.  This paper considers the optimum points at whichto reorganize a database.  A disk file organization which allows for distributed free space is described. A cost function describing the excess costs due to physical disorganization is defined, and this functionis minimized to obtain the optimum reorganization points.  Numerical examples based on the characteristicsof existing disk storage devices are given. | Maruyama, K.Smith, S. E..Kdisk file, free space,retrieval, insertion, deterioration, reorganization.C3.70 3.73
2817 | The Notions of Consistency and Predicate Locks in a Database System | In database systems, users access shared dataunder the assumption that the data satisfies certain consistency constraints.  This paper defines theconcepts of transaction, consistency and schedule and shows that consistency requires that a transactioncannot request new locks after releasing a lock.  Then it is argued that a transaction needs to lock a logicalrather than a physical subset of the database.  These subsets may be specified by predicates.  Animplementation of predicate locks which satisfies the consistency condition is suggested. | Eswarran, K..Gray, J..Lorie, R..Traiger, I. L..Kconsistency, lock, database, concurrency, transaction.C4.32 4.33
2818 | Interference in Multiprocessor ComputerSystems with Interleaved Memory (Corrigendum) | Baskett, F.Smith, A. J.
2819 | Experiments in Text File Compression | A system for the compression of data files,viewed as strings of characters, is presented.  The method is general, and applies equally well toEnglish, to PL/I, or to digital data.  The system consists of an encoder, an analysis program, and a decoder.  Two algorithms for encoding a string differ slightly from earlier proposals.  The analysis program attemptsto find an optimal set of codes for representing substrings of the file.  Four new algorithms for thisoperation are described and compared.  Various parameters in the algorithms are optimized to obtaina high degree of compression for sample texts. | Rubin, F..Ktext compression, data file compaction, Huffmancodes, N-gram encoding, comparison of algorithms.C3.7 3.73 4.33
2820 | The Design and Implementation of a Table Driven,Interactive Diagnostic Programming System | CAPS is a highly interactive diagnostic compiler/interpreterthat allows beginning programmers to prepare, debug, and execute fairly simple programsat a graphics display terminal.  Complete syntax checking and most semantic analysis is performed asthe program is entered and as it is subsequentlyedited.  Analysis is performed character by character. The most remarkable feature of CAPS is its ability to automatically diagnose errors both at compile timeand at run time.  Errors are not automatically corrected.  Instead, CAPS interacts with the student to helphim find the cause of his error.  Most components of CAPS are table driven, both to reduce the space neededfor implementation and to increase the flexibility of the multilingual system.  Over 500 students have usedCAPS to learn Fortran, PL/I, or Cobolin conjunction with a computer assisted course on introductory computer science. | Wilcox, T. R.Davis, A. M.Tindall, M. H..Kinteractive programming, table driven compilers,error correction, interpreters, debugging, computer assisted instruction, computer science education.C1.5 4.12 4.13 4.42 8.2
2821 | Cobol Under Control | A sample set of Cobol programming standardsis offered.  These standards constrain code to be developed in a "structured" form for both data andcontrol structures.  They do not require syntax beyond the existing Cobol language and in fact utilizea typical limited subset of the 1974 ANS Cobol standard.  These standards have proved extremely valuablein practice and have reduced the cost and time to produce and maintain large software systems that havebeen deployed in live multiple customer environments. | Ledgard, H. F.Cave, W. C..KCobol, structured programming,software development, program standards.C3.5 4.22 4.43
2822 | Homilies for Humble Standards | Copyright 1976, Association for ComputingMachinery, Inc. General permission to republish, but not for profit, all or part of this material is grantedprovided that ACM's copyright notice is given and that reference is made to the publication, to itsdata of issue, and to the fact that reprinting privileges were granted by permission ofthe Association for Computing Machinery. | Ross, D. T..Kstandards, CASE Standards criteria for standards, standardization.C1.3 2.1 2.3
2823 | The Status of Women and Minorities in Academic Computer Science | The results of a survey concerning women andminority students and faculty in computer science during the years 1971 to 1975 are presented.  Analysisof the data indicated that effective affirmative action programs for recruitment into graduate degreeprograms are needed to enlarge the number of women and minorities qualified for later employment in computerscience.  Also, possible discrimination in employment of women and minority graduate students was revealed.  | Montanelli, R. G. Jr.Mamrak, S. A..Kdiscrimination against women, discrimination againstminorities, graduate students, undergraduate students, academic employment, faculty, computer sciencedegree programs, affirmative action, Title VII, Title IX.C1.52 1.53 2.2 2.3
2824 | An Improvement to Martin's Algorithm forComputation of Linear Precedence Functions | Duong-Kien, C.Hoffmann, H. J.Muth, D..Ksyntax analysis, precedence functions, Boolean matrices.C4.12
2825 | The BMD and BMDP Series of Statistical Computer Programs | Frane, J. W..Kanalysis of variance, cluster analysis, contingencytables, data analysis, discriminant analysis, factor analysis, graphics, outliers, regression, time series, transformations.C1.3 3.3 4.0 5.5
2826 | Interactive Skeleton Techniques for EnhancingMotion Dynamics in Key Frame Animation | A significant increase in the capability forcontrolling motion dynamics in key frame animation is achieved through skeleton control.  This techniqueallows an animator to develop a complex motion sequence by animating a stick figure representationof an image.  This control sequence is then used to drive an image sequence through the same movement. The simplicity of the stick figure image encourages a high level of interaction during the design stage. Its compatibility with the basic key frame animation technique permits skeleton control to be applied selectivelyto only those components of a composite image sequence that require enhancement. | Burtnyk, N.Wein, M..Kinteractive graphics, computer generated animation,key frame animation, interactive skeleton control, stick figure animation.C3.41 3.49 4.9 8.2
2827 | A Parametric Algorithm for Drawing Picturesof Solid Objects Composed of Quadric Surfaces | An algorithm for drawing pictures of three-dimensionalobjects, with surfaces made up of patches of quadric surfaces, is described.  The emphasis ofthis algorithm is on calculating the intersections of quadric surfaces. A parameterization scheme is used. Each quadric surface intersection curve (QSIC) is represented as a set of coefficients and parameterlimits.  Each value of the parameter represents at most two points, and these may easily be distinguished. This scheme can find the coordinates of points of even quartic (fourth-order) intersection curves, usingequations of no more than second order.  Methods of parameterization for each type of OSIC are discussed,as well as surface bounding and hidden surface removal. | Levin, J..Kcomputer graphics, hidden surface removal,quadric surface intersection curves.C3.41 5.12 5.13 5.19 8.2
2828 | Hierarchical Geometric Models for Visible Surface Algorithms | The geometric structure inherent in the definitionof the shapes of three-dimensional objects and environments is used not just to define their relativemotion and placement, but also to assist in solving many other problems of systems for producingpictures by computer.  By using an extension of traditional structure information, or a geometric hierarchy,five significant improvements to current techniques are possible.  First, the range of complexityof an environment is greatly increased while the visible complexity of any given scene is kept withina fixed upper limit.  Second, a meaningful way is provided to vary the amount of detail presented ina scene.  Third, "clipping" becomes a very fast logarithmic search for the resolvable parts of the environmentwithin the field of view.  Fourth, frame to frame coherence and clipping define a graphical"working set," or fraction of the total structure that should be present in primary store for immediateaccess by the visible surface algorithm.  Finally, the geometric structure suggests a recursive descent,visible surface algorithm in which the computation time potentially grows linearly with the visible complexity of the scene. | Clark, J. H..Kvisible surface algorithms, hidden surface algorithms,hierarchical data structures, geometric models.C5.31 8.2
2829 | Texture and Reflection in Computer Generated Images | In 1974 Catmull developed a new algorithmfor rendering images of bivariate surface patches.  This paper describes extensions of this algorithm inthe areas of texture simulation and lighting models.  The parameterization of a patch defines a coordinatesystem which is used as a key for mapping patterns onto the surface.  The intensity of the pattern at eachpicture element is computed as a weighted average of regions of the pattern definition function. The shapeand size of this weighting function are chosen using digital signal processing theory.  The patch renderingalgorithm allows accurate computation of the surface normal to the patch at each picture element,permitting the simulation of the mirror reflections.  The amount of light coming from a given direction ismodeled in a similar manner to the texture mapping and then added to the intensity obtained from the texturemapping.  Several examples of images synthesized using these new techniques are included. | Blinn, J. F.Newell, M. E..Kcomputer graphics, graphic display, shading, hidden surface removal.C3.41 5.12 5.15 8.2
2830 | A Practitioner's Guide to Addressing Algorithms (Corrigendum) | Severance, D. G.Duhne, R. A.
2831 | Analysis of the PFF Replacement Algorithmvia a Semi-Markov Model (Corrigendum) | Chu, W. W.Opderbeck, H.
2832 | Faster Retrieval from Context Trees (Corrigendum) | Context trees provide a convenient way ofstoring data which is to be viewed as a hierarchy of contexts.  This note presents an algorithm which improveson previous context tree retrieval algorithms. It is based on the observation that in typical uses contextchanges are infrequent relative to retrievals, so that data can be cached to speed up retrieval.  A retrievalis started from the position of the previous retrieval and auxiliary structures are built up to makethe search rapid.  Algorithms for addition and deletion of data and for garbage collection are outlined. | Wegbreit, B..Kcontext trees, frame problem, variable bindings, data structures.C3.69 3.74 4.10
2833 | An Efficient, Incremental, Automatic Garbage Collector | This paper describes a new way of solvingthe storage reclamation problem for a system such as Lisp that allocates storage automatically from aheap, and does not require the programmer to give any indication that particular items are no longer usefulor accessible.  A reference count scheme for reclaiming non-self-referential structures, and a linearizing,compacting, copying scheme to reorganize all storage at the users discretion are proposed.  Thealgorithms are designed to work well in systems which use multiple levels of storage, and large virtualaddress space.  They depend on the fact that most cells are referenced exactly once, and that referencecounts need only be accurate when storage is about to be reclaimed.  A transaction file stores changesto reference counts, and a multiple reference table stores the count for items which are referenced more than once. | Deutsch, L. P.Bobrow, D. G..Kstorage management, garbage collection, Lisp.C4.19
2834 | Efficient Generation of the BinaryReflected Gray Code and Its Applications | Algorithms are presented to generate the n-bitbinary reflected Gray code and codewords of fixed weight in that code.  Both algorithms are efficientin that the time required to generate the next element from the current one is constant.  Applicationsto the generation of the combinations of n thingstaken k at a time, the compositions of integers, andthe permutations of a multiset are discussed. | Bitner, J. R.Ehrlich, G.Reingold, E. M..KGray code, combinations, subsets, compositions, combinatorial computing.C5.39
2835 | Recursion Analysis for Compiler Optimization | A relatively simple method for the detectionof recursive use of procedures is presented for use in compiler optimization.  Implementation considerationsare discussed, and a modification of the algorithm is given to further improve optimization. This analysis can also be used to determine what possible subset of values could be assumed by variableswhich can only take on a relatively small discrete set of values.  The most common are parameters of variablesassuming values of label, procedure, or Pascal's enumerated type. | Walter, K. G..Krecursion, compiler optimization.C4.12
2836 | Weighted Derivation Trees | The nodes of a weighted derivation tree are associatedwith weighting functions over the vocabulary of a context-free grammar.  An algorithm is presentedfor constructing the optimal derivation tree having the same structure as a given weighted derivation tree. In addition, the correctness of the algorithm is established.  The method may be applied to problemsinvolving probabilistic parsing or combinatorial optimization. | Loui, M. C..Kderivation tree, parse tree, probabilistic grammar,structural ambiguity, combinatorial optimization.C5.23 5.49
2837 | New Upper Bounds for Selection | The worst-case minimum number of comparisonscomplexity Vi(n) of the i-th selection problem is considered.  A new upper bound for Vi(n) improves thebound given by the standard Hadian-Sobel algorithm by a generalization of the Kirkpatrick-Hadian-Sobelalgorithm, and extends Kirkpatrick's method to a much wider range of application.  This generalizationcompares favorably with a recent algorithm by Hyafil. | Yap, C. K..Kselection problem, algorithms, comparison problems,concrete computational complexity, upper bounds, worst-case analysis.C5.25 5.31
2838 | Analysis of an Algorithm for Real Time Garbage Collection | A real time garbage collection system avoidssuspending the operations of a list processor for the long times that garbage collection normally requiresby performing garbage collection on a second processor in parallel with list processing operations,or on a single processor time-shared with them.  Algorithms for recovering discarded list structures inthis manner are presented and analyzed to determine sufficient conditions under which the list processor neverneeds to wait on the collector.  These techniques are shown to require at most twice as much processingpower as regular garbage collectors, if they are used efficiently.  The average behavior of the programis shown to be very nearly equal to the worst-case performance, so that the sufficient conditions are alsosuitable for measuring the typical behavior of the algorithm. | Wadler, P. L..Kgarbage collection, storage reclamation, listprocessing, Lisp, time-sharing, multiprocessing, parallel processing, real time, data structures, analysis of algorithms.C3.69 3.89 4.19 4.29 4.32 4.34 4.9 5.25
2839 | An Insertion Technique for One-Sided Height-Balanced Trees | A restriction on height-balanced binary treesis presented.  It is seen that this restriction reduces the extra memory requirements by half (fromtwo extra bits per node to one) and maintains fast search capabilities at a cost of increasedtime requirements for inserting new nodes. | Hirschberg, D. S..Kbalanced, binary, search, trees.C3.73 3.74 4.34 5.25 5.31
2840 | Protection in Operating Systems | A model of protection mechanisms in computingsystems is presented and its appropriateness is argued.  The "safety" problem for protection systemsunder this model is to determine in a given situation whether a subject can acquire a particular right toan object.   In restricted cases, it can be shown that this problem is decidable, i.e. there is an algorithmto determine whether a system in a particular configuration is safe.  In general, and under surprisinglyweak assumptions, it cannot be decided if a situation is safe. Various implications of this fact are discussed. | Harrison, M. A.Ruzzo, W. L.Ullman, J. D..Kprotection, protection system, operatingsystem, decidability, Turing machine.C4.30 4.31 5.24
2841 | Designing Surfaces in 3-D | An experimental system for computer-aideddesign of free-form surfaces in three dimensions is described. The surfaces are represented in the systemas parametric basis splines. The principal features of the system are: (1) the surfaces are rendered as isoparametricline drawings on a head-mounted display, and they are designed with the aid of a three-dimensional"wand," which allows 3-D movements of the points controlling the shapes of the surfaces, (2) all of theinteractions with the surfaces are in real-time, and (3) the mathematical formulations used assume noknowledge of them by the user of the system.  Also examined are some of the features that should be partof a practical 3-D system for designing space-forms. | Clark, J. H..Kreal-time graphics, computer-aided design,picture processing, B-splines, 3-D displays.C3.80 6.22 8.2
2842 | The Denotational Semantics of Programming Languages | This paper is a tutorial introduction to thetheory of programming language semantics developed by D. Scott and C. Strachey.  The application of the theoryto formal language specification is demonstrated and other applications are surveyed. The first languageconsidered, LOOP, is very elementary and its definition merely introduces the notation and methodologyof the approach.  Then the semantic conceptsof environments, stores, and continuations are introducedto model classes of programming language features and the underlying mathematical theory of computationdue to Scott is motivated and outlined.  Finally, the paper presents a formal definition of the language GEDANKEN. | Tennent, R. D..Ksemantics, programming language, applicative, imperative,environment, store, continuation, theory of computation, higher-order function, recursive definition, LOOP, GEDANKEN.C4.22 5.24
2843 | Tools and Philosophy for Software Education  | This paper describes a set of tools and a philosophyfor teaching software that have been found very useful in course at MIT over the past seven years. The tools include programs such as simulators, graders, compilers, and monitor.  These allow the instructorto augment the basic concepts with relevant, exciting, and economical student project activities.  | Donovan, J. J..Ksoftware education, simulators, grading programs, student assignments.C1.5 4.0
2844 | Heaps Applied to Event Driven Mechanisms | Gonnet, G. H..Kdiscrete event simulation, event-scanningmechanisms, priority queues, heaps.C4.34 8.1
2845 | A Buddy System Variation for Disk Storage Allocation | A generalization of the buddy system for storageallocation is described. The set of permitted block sizes {SIZE(i)}, i=0,n, must satisfy the conditionSIZE(i)=SIZE(i-1)+SIZE(i-k(i)) where k may be any meaningful integral-valued function.  This makes itpossible to force logical storage blocks to coincide with physical storage blocks, such as tracks and cylinders. | Burton, W..Kbuddy system, dynamic storage allocation.C3.89 4.32 4.39
2846 | Compressed Tries | This paper presents a new data structure,called a compressed trie or C-trie, to be used in information retrieval systems.  It has the same underlyingm-ary tree structure as a trie, where m is a parameter of the trie, but whereas the fields of thenodes in a trie have to be large enough to hold a key or at least a pointer, the fields in a C-trie areonly one bit long.  In the analysis part of the paper it will be shown that for a collection of n keys theretrieval time, measured in terms of bit inspections of one key, is of the order logm(n) and the storagerequirement of the order n*(m+log2 n) bits.  This improvement in storage requirements and retrieval timeis achieved at the cost of decreasing the flexibility of the structure, and therefore updating costs are increased. First the C-trie is analyzed as a data structure, and then several methods of its usefor relatively static databases are discussed. | Maly, K..Kdata structure, database, m-ary tree, trie,retrieval time, storage requirement, keys.C3.70 3.74 3.75
2847 | Sampling from the Gamma Distribution on a Computer | This paper describes a method of generatinggamma variates that appears to be less costly than Wallace's recently suggested method.  For large shape parameter(a); the cost of computation is proportional to (a), whereas Wallace's method is proportional to (a). Experimentation by Robinson and Lewis indicates that for small (a) the method suggested here also dominatesmethods recently suggested by Dieter and Ahrens, albeit those methods dominate for large (a).  Themethod suggested here uses the rejection technique. | Fishman, G. S..Kgamma variates, reflection method, sampling.C5.5 8.1 8.3
2848 | Synthesis of Decision Rules | Decision tables can be used as an effectivetool during an interview to record the logic of processes to be automated.  The result of such an interviewis not a structure of complete decision tables but rather sets of decision rules.  The purpose of thispaper is to provide a procedure for synthesizing the decision rules and thus provide an aid in developinga structure of complete decision tables. | Cheng, C.Rabin, J..Kdecision rules, decision tables, logical tables,logical design, system design, specification language.C3.50 4.33
2849 | Ethernet: Distributed Packet Switching for Local Computer Networks | Ethernet is a branching broadcast communicationsystem for carrying digital data packets among locally distributed computing stations. The packettransport mechanism provided by Ethernet has been used to build systems which can be viewed as either localcomputer networks or loosely coupled multiprocessors.  An Ethernet's shared communication facility, its Ether,is a passive broadcast medium with no central control.  Coordination of access to the Ether for packetbroadcasts is distributed among the contending transmitting stations using controlled statistical arbitration. Switching of packets to their destinations on the Ether is distributed among the receiving stationsusing packet address recognition.  Design principles and implementation are described, based on experiencewith an operating Ethernet of 100 nodes along a kilometer of coaxial cable.  A model for estimating performanceunder heavy loads and a packet protocol for error controlled communication are included for completeness. | Metcalfe, R. M.Boggs, D. R..Kcomputer networks, packet switching, multiprocessing,distributed control, distributed computing, broadcast communication, statistical arbitration.C3.81 4.32 6.35
2850 | Symbolic Execution and Program Testing | This paper describes the symbolic execution ofprograms.  Instead of supplying the normal inputs to a program (e.g. numbers) one supplies symbols representingarbitrary values.  The execution proceeds as in a normal execution except that values may be symbolicformulas over the input symbols.  The difficult, yet interesting issues arise during the symbolic executionof conditional branch type statements.  A particular system called EFFIGY which provides symbolicexecution for program testing and debugging is also described.  It interpretively executes programs writtenin a simple PL/I style programming language.  It includes many standard debugging features, the abilityto manage and to prove things about symbolic expressions, a simple program testing manager, and a programverifier.  A brief discussion of the relationship between symbolic execution and program proving is also included. | King, J. C..Ksymbolic execution, program testing, program debugging,program proving, program verification, symbolic interpretation.C4.13 5.21 5.24
2851 | Formal Verification of Parallel Programs | Two formal models for parallel computationare presented: an abstract conceptual model and a parallel-program model.  The former model does notdistinguish between control and data states.  The latter model includes the capability for the representationof an infinite set of control states by allowing there to be arbitrarily many instruction pointers (orprocesses) executing the program.  An induction principle is presented which treats the control anddata state sets on the same ground.  Through the use of "place variables," it is observed that certaincorrectness conditions can be expressed without enumeration of the set of all possible control states. Examples are presented in which the induction principle is used to demonstrate proofs of mutual exclusion. It is shown that assertions-oriented proof methods are special cases of the induction principle.A special case of the assertions method, which is called parallel place assertions, is shown to beincomplete.  A formalization of "deadlock" is then presented. The concept of a "norm" is introduced, whichyields an extension, to the deadlock problem, of Floyd's technique for proving termination.  Also discussedis an extension of the program model which allows each process to have its own local variablesand permits shared global variables.  Correctness of certain forms of implementation is also discussed. An Appendix is included which relates this work to previous work on the satisfiability of certain logical formulas. | Keller, R. M..Kparallel program, correctness, verification,assertions, deadlock, mutual exclusion, Petrinet.C4.6 5.2 6.9 8.1
2852 | The Technology of Computer Center Management: AProposed Course for Graduate Professional Programs in Computer Science or in Information Systems | McFarlan and Nolan have made a strong case foradding a course on information systems administration to the 13 courses proposed by the ACM Curriculum Committeeon Computer Education for Management for Graduate Professional Programs in Information Systems.  This paperis a report on a course entitled, "The Technology of Computer Center Management," which has been offeredat Purdue for the past four years.  The course is suitable either for graduate professional programsin information systems or for graduate professional programs in computer science. | Conte, S. D.Halstead, M. H..Keducation, information systems administration, computercenter management, computer system performance.C1.52 2.4 3.51 4.6
2853 | A Numbering System for Permutations of Combinations | Knott, G. D..Kcombinatorics,coding systems, storage mapping functions.C4.9 5.30
2854 | Multiprocessing Compactifying Garbage Collection (Corrigendum) | Steele, G. L. Jr.
2855 | An Efficient List-Moving Algorithm Using Constant Workspace | An efficient algorithm is presented for movingarbitrary list structures, using no storage (apart from program variables) other than that requiredto hold the original list and the copy.  The original list is destroyed as it is moved.  No markbits are necessary, but pointers to the copy must be distinguishable from pointers to the original.  Thealgorithm is superior in execution speed to previous algorithms for the same problem.  Some variationsand extensions of the algorithm are discussed. | Clark, D. W..Klist moving, list copying, LISP, space complexity, constant workspace.C4.34 4.49 5.25
2856 | The Synthetic Approach to Decision Table Conversion | Previous approaches to the problem of automaticallyconverting decision tables to computer programs have been based on decomposition.  At anystage, one condition is selected for testing, and two smaller problems (decision tables with one lesscondition) are created.  An optimal program (with respect to average execution time or storage space, forexample) is located only through implicit enumeration of all possible decision trees using a technique suchas branch-and-bound.  The new approach described in this paper uses dynamic programming to synthesizean optimal decision tree from which a program can be created.  Using this approach, the efficiency of creatingan optimal program is increased substantially, permitting generation of optimal programs for decisiontables with as many as ten to twelve conditions. | Schumacher, H.Sevcik, K. C..Kdecision tables, decision trees, dynamic programming, optimal programs.C3.50 4.12 5.30 8.3
2857 | Referencing Lists by an Edge | An edge reference into a list structure is a pairof pointers to adjacent nodes.  Such a reference often requires little additional space, but its use canyield efficient algorithms. For instance, a circular link between the ends of a list is redundant if the listis always referenced by that edge, and list traversal is easier when that link is null.  Edge references alsoallow threading of nonrecursive lists, can replace some header cells, and enhance the famousexclusive-or-trick to double-link lists | Wise, D. S..Klist processing, circular, doubly linked, overlappingsublist, header cell, pointer, cursor.C3.73 4.10 4.22
2858 | A Process for the Determination ofAddresses in Variable Length Addressing | An algorithm is presented for the assignmentof instruction addresses and formats under the following conditions: (1) the length of the instruction variesas a function of the distance of the instruction from its target; (2) there exists an optimality criterionwhich implies some preferential choices subject to the addressing constraints.  This may be, for example,achieving the smallest number of long instructions, in which case the total code length is minimized, orminimizing the assigned address of a specified point in the program.  The algorithm is suitable for arbitraryprogram structure and a choice of optimization criteria. | Frieder, G.Saal, H. J..Kvariable length addressing, assembler, paging.C4.11 4.12
2859 | Interference in Multiprocessor Computer Systems with Interleaved Memory | This paper analyzes the memory interferencecaused by several processors simultaneously using several memory modules.  Exect results are computed fora simple model of such a system.   The limiting value is derived for the relative degree of memory interferenceas the system size increases.  The model of the limiting behavior of the system yields approximateresults for the simple model and also suggests that the results are valid for a much larger class of models,including those more nearly like real systems that the simple model are tested against some measurementsof program behavior and simulations of systems using memory references from real programs.  The modelresults provide a good indication of the performance that should be expected from real system of this type. | Baskett, F.Smith, A. J..Kmemory, memory interference, multiprocessing,interleaved memory, trace driven simulation.C4.32 6.21 6.34 8.1
2860 | A Practitioner's Guide To Addressing Algorithms | This paper consolidates a number of popularrules of thumb which have been suggested for thedesign of record addressing algorithms, and discussesthe applicability of these rules to large commercial databases.  Guidelines for selecting identifier transformations,overflow techniques, loading factors, bucket sizes, and loading order and considered.  Particularattention is focused on the reasonableness of common heuristics for determining primary or secondarybucket sizes. A mathematical model which explicitly considers storage device characteristics and time/spacecost tradeoffs is used to analyze the effect of design parameters on overall system costs.  Aspecific design example is presented and solved. | Severance, D.Duhne, R..Kdata management, file retrieval, searching, addressingtechniques, hashing functions, synonym resolution, loading factor, bucket size, heuristic design, rules of thumb.C3.50 3.72 3.74 4.33 4.34 4.41 8.1
2861 | Production and Employment of Ph.D.'s in Computer Science | Taulbee, O. E.Conte, S. D.
2862 | Analysis of the PFF Replacement Algorithm via a Semi-Markov Model | An analytical model is presented to estimatethe performance of the Page Fault Frequency (PFF) replacement algorithm.  In this model, program behavioris represented by the LRU stack distance model and the PFF replacement algorithm is represented by a semi-Markovmodel.  Using these models, such parameters as the inter-page-fault interval distribution, theprobability of the number of distinct pages being referenced during an inter-page-fault interval, etc. areable to be analytically determined.  Using these models to evaluate these parameter values permits studyof the performance of the replacement algorithm by simulating the page fault events rather than everypage reference event.  This significantly reduces the required computation time in estimatingthe performance of the PFF algorithm. | Chu, W. W.Opderbeck, H..KPFF replacement algorithm, semi-Markovmodel, simulation of replacement algorithm.C4.31 4.32
2863 | VMIN-An Optimal Variable-Space Page Replacement Algorithm | A criterion for comparing variable space pagereplacement algorithms is presented.  An optimum page replacement algorithm, called VMIN, is described andshown to be optimum with respect to this criterion. The results of simulating VMIN, Denning's working set,and the page partitioning replacement algorithms on five virtual memory programs are presented to demonstratethe improvement possible over the known realizable variable space algorithms. | Prieve, B. G.Fabry, R. S..Kdemand paging, performance measurement, multilevelmemory systems, virtual memory, working set, page replacement algorithms, optimal page replacement.C4.30 4.32
2864 | Characteristics of Program Localities | The term "locality" has been used to denote thatsubset of a program's segments which are referenced during a particular phase of its execution.  A program'sbehavior can be characterized in terms of its residence in localities of various sizes and lifetimes,and the transitions between these localities.  In this paper the concept of a locality is made more explicitthrough a formal definition of what constitutes a phase of localized reference behavior, and by a correspondingmechanism for the detection of localities in actual reference strings.  This definition providesfor the existence of a hierarchy of localities at any given time, and the reasonableness of the definitionis supported by examples taken from actual programs.  Empirical data from a sample of productionAlgol 60 programs is used to display distributions of locality sizes and lifetimes, and these results arediscussed in terms of their implications for the modeling of program behavior and memory management in virtual memory systems. | Madison, A. W.Batson, A. P..Kprogram behavior, memory management, locality.C4.22 4.35 4.6 4.9 6.21
2865 | Verifying Properties of Parallel Programs: An Axiomatic Approach | An axiomatic method for proving a numberof properties of parallel programs is presented.  Hoare has given a set of axioms for partial correctness,but they are not strong enough in most cases.  This paper defines a more powerful deductive system whichis in some sense complete for partial correctness.  A crucial axiom provides for the use of auxiliary variables,which are added to a parallel program as an aid to proving it correct.  The information in a partialcorrectness proof can be used to prove such properties as mutual exclusion, freedom from deadlock,and program termination.  Techniques for verifying these properties are presented and illustrated byapplication to the dining philosophers problem. | Owicki, S.Gries, D..Kstructured multiprogramming correctness proofs, programverification, concurrent processes, synchronization, mutual exclusion, deadlock.C4.32 4.35 5.21 5.24
2866 | Proving Monitors | Interesting scheduling and sequential propertiesof monitors can be proved by using state variables which record the monitor's history and by defining extendedproof rules for their wait and signal operations.  These two techniques are defined, discussed, and appliedto examples to prove properties such as freedom from indefinitely repeated overtaking or unnecessary waitingupper bounds on queue lengths, and historical behavior. | Howard, J.H..Kmonitors, correctness, proof rules, historical variables,concurrency, scheduling, bounded buffer, semaphores, alarm clock, disk head.C4.32 4.35 5.24
2867 | Modularization and Hierarchy in a Family of Operating Systems | This paper describes the design philosophyused in the construction of a family of operating systems. It is shown that the concepts of module andlevel do not coincide in a hierarchy of functions.  Family members can share much software as a resultof the implementation of run-time modules at the lowest system level. | Habermann,A. N.Flon, L.Cooprider, L..Kincremental machine design, module,data type, address space, virtual memory.C4.0 4.30 4.35
2868 | Reflections on an Operating System Design | The main features of a general purpose multiaccessoperating system developed for the CDC 6400 at Berkeley are presented, and its good and bad points arediscussed as they appear in retrospect.  Distinctive features of the design were the use of capabilitiesfor protection, and the organization of the system into a sequence of layers, each building on the facilitiesprovided by earlier ones and protecting itself from the malfunctions of later ones. There were seriousproblems in maintaining the protection between layers when levels were added to the memory hierarchy;these problems are discussed and a new solution is described. | Lampson, B. W.Sturgis, H. E..Koperating system, protection, capabilities,layering domains, memory hierarchy, faults.C4.35
2869 | Security Kernel Validation in Practice | A security kernel is a software and hardwaremechanism that enforces access controls within a computer system. The correctness of a security kernelon a PDP-11/45 is being proved.  This paper describes the technique used to carry out the first step of theproof: validating a formal specification of the program with respect to a axioms for a secure system. | Millen, J. K..Kvalidation, verification, correctness, securitykernel, formal specification, protection.C4.35 4.6 5.24
2870 | A Lattice Model of Secure Information Flow | This paper investigates mechanisms that guaranteesecure information flow in a computer system. These mechanisms are examined within a mathematical frameworksuitable for formulating the requirements of secure information flow among security classes. Thecentral component of the model is a lattice structure derived from the security classes and justified by the semanticsof information flow.  The lattice properties permit concise formulations of the security requirementsof different existing systems and facilitate the construction of mechanisms that enforce security. The model provides a unifying view of all systems that restrict information flow, enables a classificationof them according to security objectives, and suggests some new approaches.  It also leads to the constructionof automatic program certification mechanisms for verifying the secure flow of information through a program. | Denning, D. E..Kprotection, security, information flow, securityclass, lattice, program certification.C4.35
2871 | Logical Analysis of Programs | Most present systems for verification of computerprograms are incomplete in that intermediate inductive assertions must be provided manually by theuser, termination is not proven, and incorrect programs are not treated.  As a unified solution tothese problems, this paper suggests conducting a logical analysis of programs by using invariants whichexpress what is actually occurring in the program.  The first part of the paper is devoted to techniquesfor the automatic generation of invariants.  The second part provides criteria for using the invariantsto check simultaneously for correctness (including termination) or incorrectness.  A third part examinesthe implications of the approach for the automatic diagnosis and correction of logical errors. | Katz, S.Manna, Z..Klogical analysis, invariants, program verification,correctness, incorrectness, termination, automatic debugging.C3.66 4.42 5.24
2872 | A Counterintuitive Example of Computer Paging (Corrigendum) | Fagin, R.
2873 | LG: A Language for Analytic Geometry | A conversational programming language for analyticgeometry is described, together with some aspects of its implementation.  The language allowsthe flexible definition of geometric objects and elements, computes their parameters, and displays the results.It also provides the capability of specifying a geometric figure via a collection of parameters anddisplaying various loci corresponding to these parameters. A third characteristic consists of the possibilityof using this language to design other user oriented languages.  LG has been specifically designedfor use by nonprogrammers; it is easy to learn and very close to the natural language used in geometry. | Raymond, J..Kinteractive programming, problem oriented languages,computer graphics, interpreters, analytic geometry.C3.20 4.13 4.22 4.9
2874 | A Comparative Evaluation of Versions of BASIC | From its inception, The BASIC language hasgrown in terms of its usage, scope of usage, and its features.  This article compares ten of the currentversions of BASIC with each other, with two earlier versions, and with the proposed standard for minimalBASIC. The comparison is arranged by the features of the versions and by computational comparisonof computation and times and processing costs. | Lientz, B. P..KBASIC, interpretive language summary.C4.20 4.6
2875 | Development of an International Systemfor Legal Protection of Computer Programs | Smoot, O. R..Kcopyright of software, patenting ofsoftware, legal protection of software.C2.3 4.5
2876 | Intentional Resolution of Privacy Protection in Database Systems | Traditionally, privacy protection in databasesystems is understood to be the control over what information a given user can get from a database. This paper is concerned with another, independent, dimension of privacy protection, the control over whata user is allowed to do with a piece of information supplied to him by the database.  The ability to conditionthe supply of information on its intended use is called here "intentional resolution" of privacyprotection.  The practical importance of intentional resolution is demonstrated by several examples, and its realizationis discussed.  It is shown that intentional resolution can be achieved, but that it involves a radicalchange from the traditional approach to the process of user-database interaction.  In particular,it appears to be necessary for the database to impose a certain amount of control over the internalbehavior of users' programs which interact with it.  A model for user-database interactionwhich admits such a control is developed. | Minsky, N..Kprotection in database, protection in programminglanguages, privacy, security, intentional resolution of privacy, interaction with databases.C3.50 3.70 4.20 4.30
2877 | A Program Data Flow Analysis Procedure | The global data relationships in a programcan be exposed and codified by the static analysis methods described in this paper.  A procedure is givenwhich determines all the definitions which canpossibly "reach" each node of the control flow graphof the program and all the definitions that are "live" on each edge of the graph.  The procedure usesan "interval" ordered edge listing data structure and handles reducible and irreducible graphs indistinguishably. | Allen, J. E.Cocke, J..Kprogram optimization, data flow analysis,flow graphs, algorithms, compilers.C4.12 5.24
2878 | Joining Policies in a Multipriority Multiclass Batch Computer System | Consider a multipriority batch computer systemwhich users from several different classes may join, its toll, service, and waiting charges.  Such asystem is formulated here as a semi-Markov decision process, in which the aim of arriving users is to minimizetheir expected loss.  The optimal joining policy is one of arriving users who may join the systemat some of its queues is a control limit policy, with a single control number for any possible queueand the user's class; a newly arriving user will join a queue that is not filled up to the control numbercorresponding to this queue and the user's class.  In this paper control numbers, as well as lower and upperbounds for the control numbers and the capacities of the system's queues, are derived. | Babad, J. M.Modiano, M. M..Kpriority queues, semi-Markov process, price scheduling, operating system.C4.39 8.3
2879 | Computer Science as Empirical Inquiry: Symbols and Search | Newell, A.Simon, H. A..Ksymbols, search, science, computer science, empirical,Turing, artificial intelligence, intelligence, list processing, cognition, heuristics, problem solving.C1.0 2.1 3.3 3.6 5.7
2880 | A Fast Division Technique for Constant Divisors | A fast algorithm for division by constant divisorsis presented.  The method has proved very useful implemented as microcode ona binary machine,and can be adapted directly into hardware.  The mathematical foundations of the algorithm are presentedas well as some performance measures. | Artzy, E.Hinds, J. A.Saal, H. J..Kconstant divisors, division algorithms,bit addressable memory, microprogram.C4.13 4.49 6.32
2881 | A Counterintuitive Example of Computer Paging | A counterexample is exhibited to a natural conjectureconcerning the optimal way to group records into pages in the independent reference model of computerpaging (an organization is said to be optimal if the "least recently used" miss ratio is minimized). | Fagin, R..Kleast recently used, most likely together, independentreference model, storage organization, record allocation.C3.70 3.73 4.0 5.30
2882 | A Stochastic Evaluation Model for DatabaseOrganization in Data Retrieval Systems | Experimental work in the valuation of largescale data retrieval systems has been scarce due to its difficulty and prohibitive cost. This paperdiscusses a simulation model of a data retrieval system which has the effect of significantly reducingthe cost of experimentation and enabling research never attempted before.  The model is designed to estimatethe retrieval workload of alternative data retrieval systems.  These data retrieval systems canbe organized under several database organizations, including inverted list, threaded list, and cellularlist organizations and hybrid combinations of these systems.  Effectiveness of the methodology is demonstratedby using the model to study the effect of database organizations in data retrieval systems.  In particular,the impact of query complexity is analyzed. | Siler, K. F..Kdatabase architecture, database performance andevaluation, invented list, threaded list, cellular list, information retrieval, database organizations,query complexity, stochastic model, Monte Carlo simulation.C3.70 3.71 3.72 3.73 3.74 3.79
2883 | An Application of Heuristic Search Methods to Edge and Contour Detection | This paper presents a method for detecting edgesand contours in noisy pictures.  The properties of an edge are embedded in a figure of merit and the edgedetection problem becomes the problem of minimizing the given figure of merit.  This problem can be representedas a shortest path problem on a graph and can be solved using well-known graph search algorithms. The relations between this representation of the minimization problem and a dynamic programming approachare discussed, showing that the graph search method can lead to substantial improvements in computingtime.  Moreover, if heuristic search methods are used, the computing time will depend on the amountof noise in the picture.  Some experimental results are given; these show how various information about theshape of the contour of an object can be embeddedin the figure of merit, thus allowing the extractionof contours from noisy picture and the separation of touching objects. | Martelli, A..Kpicture processing, pattern recognition, edgedetection, contour detection, contour following, optimization problems, dynamic programming, shortestpath, heuristic search methods, problem solving methods.C3.63 3.64 3.66 5.42
2884 | Permutation Enumeration: Four New Permutation Algorithms | Classical permutation enumeration algorithms encounterspecial cases requiring additional computation every nth permutation when generating the n! permutationson n marks.  Four new algorithms have the attribute that special cases occur every n(n-1)permutations. Two of the algorithms produce the next permutation with a single exchange of two marks.  The other two algorithmsinfrequently exchange more than two marks, but the rules for generating the next permutation arevery simple.  Performance tests which have counted execution of assignment statements, comparisons, arithmeticoperations, and subscripted array references have shown superiority of the new algorithms compared toBoothroyd's implementation of M. B. Well's algorithm and Ehrlich's implementation of the Johnson-Trotter algorithm. | Ives, F. M..Kpermutations, loop-free algorithms.C5.30
2885 | On Self-Organizing Sequential Search Heuristics | This paper examines a class of heuristics formaintaining a sequential list in approximately optimal order with respect to the average time requiredto search for a specified element, assuming that each element is searched for with a fixed probabilityindependent of previous searches performed.  The "move to front" and "transposition" heuristics are shownto be optimal to within a constant factor, and the transposition rule is shown to be the more efficientof the two. Empirical evidence suggests that transposition is in fact optimal for any distribution of search probabilities. | Rivest, R..Ksearching, self-organizing, list-processing, heuristics.C3.74 5.25
2886 | Semantic Evaluation from Left to Right | This paper describes attribute grammars and theiruse for the definition of programming languages and compilers; a formal definition of attribute grammarsand a discussion of some of its important aspects are included. The paper concentrates on the evaluationof semantic attributes in a few passes from left to right over the derivation tree of a program.  Acondition for an attribute grammar is given which assures that the semantics of any program can be evaluatedin a single pass over the derivation tree, and an algorithm is discussed which decides how manypasses from left to right are in general necessary, given the attribute grammar. These notions are explainedin terms of an example grammar which describes the scope rules of Algol 60.  Practical questions, suchas the relative efficiency of different evaluation schemes, and the ease of adapting the attribute grammarof a given programming language to the left-to-right evaluation scheme are discussed. | Bochmann, G. V..Kattribute grammars, semantics of programming languages,semantic attributes, left-to-right parsing, multipass compilers, semantic evaluation, semantic conditions.C4.10 4.20 5.23 5.24
2887 | A Study of Errors, Error-Proneness, and Error Diagnosis in Cobol | This paper provides data on Cobol error frequencyfor correction of errors in student-oriented compilers, improvement of teaching, and changes in programminglanguage.  Cobol was studied because of economic importance, widespread usage, possible error-includingdesign, and lack of research.  The types of errors were identified in a pilot study; then, usingthe 132 error types found, 1,777 errors were classified in 1,4000 runs of 73 Cobol students.  Errordensity was high: 20 percent of the types contained 80 percent of the total frequency, which implies highpotential effectiveness for software based correction of Cobol.  Surprisingly, only four high-frequency errorswere error-prone, which implies minimal error inducing design. 80 percent of Cobol misspellings were classifiablein the four error categories of previous researchers, which implies that Cobol misspellingsare correctable by existent algorithms.  Reserved word usage was not error-prone, which implies minimalinterference with usage of reserved words.  Over 80 percent of error diagnosis was found to be inaccurate. Such feedback is not optimal for users, particularly for the learning user of Cobol. | Litecky, C. R.Davis, G. B..Kerrors in programming, error correction, Cobol, programminglanguage errors, error analysis, diagnostics, error-proneness, error frequency, spelling errors, syntacticerrors, learning of programming, teaching of programming.C4.22 4.2 4.6
2888 | Information Reference Coding | Items in business systems have to be identifiedby reference codes, which can later be used as data codes and file keys in an associated data processingsystem.  In business systems associated with large collections of integrated files (database)it is vital to assign codes in a methodical way so as to control future extension and changes while maintainingcorrect program action. The principles of methodical coding are discussed, and the way inwhich logical connections between data items must be reflected in the reference code framework is shownthrough a set-theoretic information model. | Florentin, J. J..Kdata, file, reference code, systemsanalysis, information modeling, database.C3.50
2889 | Performance of Height-Balanced Trees | This paper presents the results of simulationsthat investigate the performance of height-balanced (HB[k]) trees.  It is shown that the only statisticof HB[1] trees (AVL trees) that is a function of the size of the tree is the time to search for an itemin the tree.  For sufficiently large trees, the execution times of all procedures for maintaining HB[1]trees are independent of the size of the tree.  In particular, an average of .465 restructures are requiredper insertion, with an average of 2.78 nodes revisited to restore the HB[1] property; an average of .214 restructures are required per deletion, with an average of 1.91 nodes revisited to restore the HB[1]property.  Moreover,the execution times of procedures for maintaining HB[k] trees, for k>1, are also independentof the size of the tree except for the average number of nodes revisited on a delete operation inorder to restore the HB[k] property on trace back.  The cost of maintaining HB[k] trees drops sharply as theallowable imbalance (k) increases.  Both analytical and experimental results that show the cost of maintainingHB[k] trees as a function of k are discussed. | Karlton, P. L.Fuller, S. H.Scroggs, R. E.Kaehler, E. B..KHB[k] trees, balanced trees, AVL trees,information storage and retrieval, searching.C3.7 3.72 3.74 4.49 5.39
2890 | On Quadratic Adaptive Routing Algorithms | Two analytic models of a store-and-forward communicationsnetwork are constructed, one to find the optimal message routing and the other to illustratethe equilibrium (stationary state) maintained by an adaptive routing algorithm.  These models show thatadaptive routing does not satisfy the necessary conditions for an optimal routing,  Adaptive routing tendsto overuse the direct path and underuse alternate routes because it does not consider the impact of itscurrent routing decision on the future state of the network.  The form of the optimality conditions suggeststhat a modification of the adaptive algorithm will result in optimality.  The modification requiresthe substitution of a quadratic bias term instead of a linear one in the routing table maintained at eachnetwork node.  Simulation results are presented which confirm the theoretical analysis for a simple network. | Agnew, C. E..Krouting algorithms, adaptive routing, quadratic routing,alternate routing, store-and-forward network, distributed network, computer network, message switching.C3.81 8.0 8.1 8.3
2891 | An Anomaly in Disk Scheduling: A Comparison ofFCFS and SSTF Seek Scheduling Using an Empirical Model for Disk Accesses | A model for disk accesses based on publishedmeasurements is developed.  The model is used to show that under highly probable conditions, FCFSseek scheduling is superior to SSTF scheduling in the sense of having a lower mean queue length.  A simpleexample of an arrival sequence illustration this anomaly is presented. | Wilhelm, N. C..Kdisks, disk scheduling, seek scheduling.C3.72 4.35 4.41 4.6 6.35
2892 | A Study of Line Overhead in the Arpanet | The form, extent, and effect of the communication lineoverhead in the ARPANET are considered.  The source of this over head is separated into variouslevels of protocol hierarchy and the characteristics of each level are summarized.  Then the line efficiencyfor various models of system use is studied.  Some measurements of line efficiency for the ARPANET arepresented and by extrapolation these measurements are used to anticipate overhead in a heavily loaded network.Similar results are derived for a recently proposed network protocol and compared with those for the current system. | Kleinrock, L.Naylor, W. E.Opderbeck, H..KARPANET, computer communication networks, interprocesscommunication, measurement, packet switching, performance evaluation and efficiency, resource sharing.C3.81 4.39 4.6 4.9
2893 | Computers as an Innovation in American Local Governments | Computers and electronic data processing area major technological innovation in the operations of American local government. This paper establishes thatthere is substantial variation among the larger local governments in the rate at which they adopt computertechnology, in the level of financial support they provide for EDP, and in the extensiveness and sophisticationof their automated applications.  The central question addressed is: What might explain thedifferences between governments in the extent to which they adopt and use computers?  Hypotheses aretested for several streams of explanatory factors, using data from more than 500 city and county governments. The findings identify certain local government milieus which are particularly conducive to higher levelsof computer innovation.  Somewhat unexpected findings reveal the significant impact of the distributionof control over EDP decisions and the dominant political values within the government. Other importantfactors include the measured need for computer applications and the presence of external funding supportfor computing.  Finally, the paper suggests a framework for identifying the key determinantsof other technological innovations. | Danziger, J. N.Dutton, W. H..Kinnovation, technological innovation, computer utilization,computer adoption, American local government, city government computers, county government computers..C2.0 2.45 2.49 2.9
2894 | A Methodology for Interactive Computer Service Measurement | A measurement methodology applicable to in teractivecomputer service is described.  Its primary purpose is to enable external, user-oriented assessmentof computer performance, instead of the more frequently used in ternal system measurement techniques. The NBS Network Measurement System is employed as the external measurement tool.  Example data havebeen collected and analyzed.  A demonstration of the methodology, leading to a pragmatic figure-of-meritevaluation of results, is included. | Adrams, M. D..Kin teractive system, computer service, measurement,performance, external measurement, methodology, measurement model,network measurement system, measures, figure-of-merit..C2.4 4.6 6.2
2895 | A Language for Formal Problem Specification | A language for specifying the in tended behaviorof communicating parallel processes is described.  The specifications are constrain ts on the order in whichevents of a computation can occur.  The language is used to write specifications of the readers/writersproblem and the writer priority of the second readers/writers problem. | Greif, I..Kformal specifications,program correctness, parallelprocessing, synchronization, readers/writers problem.C4.22 4.32 5.24
2896 | An Exercise in Proving Parallel Programs Correct | A parallel program, Dijkstra's on-the-fly garbagecollector, is proved correct using a proof method developed by Owicki.  The fine degree of in terleavingin this program makes it especially difficult to understand, and complicates the proof greatly.  Difficultieswith proving such parallel programs correct are discussed. | Gries, D..Kgarbage collection, multiprocessing, programcorrectness for multiprocessing tasks.C4.32 4.34 4.35 4.39 5.24
2897 | A Case Study of a New Code Generation Technique for Compilers | Recent developments in optimizing techniqueshave allowed a new design for compilers to emerge.  Such a compiler translates the parsed source code intolower level code by a sequence of steps.  Each step expands higher level statements into blocks oflower level code and then performs optimizations on the result.  Each statement has only one possibleexpansion-the task of tailoring this code to take advantage of any special cases is done by the optimizations. This paper provides evidence that this strategy can indeed result in good object code.  Thetraditionally difficult PL/I concatenate statement was investigated as a detailed example.  A set of fairlysimple optimizations was identified which allow the compiler to produce good code. More elaborate optimizationscan further improve the object code.  For most contexts of the concatenate statement, the codeproduced by a compiler using the expansion-optimization strategy described above compares favorably with thecode produced by a conventional PL/I optimizing compiler. | Carter, J. L..Kcompiler structure, optimizing compiler, codegeneration, PL/I compiler, concatenation, program optimization, optimization techniques, data flow analysis.C4.12 4.13 4.22
2898 | A Conceptual Framework for a Nonprocedural Programming Language | A sequential programming language forces theprogrammer to prescribe explicitly the order in which the operations in his program have to be executed,even if the order is not relevant to the solution of his problem.  The requirement to indicate irrelevantsequencing can be removed if the language provides facilities for specifying a task in a nonproceduralmanner.  In general, a program specified in this way will allow concurrent evaluation.  This paper describesa conceptual framework for a high level programming language providing both nonprocedural and sequentialfacilities.  Within a program, nonprocedural and sequential program modules may be nested freely. | Kessels, J. L. W..Kparallel programming, descriptive programming,nonprocedural programming, definitional language, data flow programming, applicative programming.C4.20
2899 | A Survey of Computer Science Offerings In Small Liberal Arts Colleges. | Recent curricular development in computer sciencetogether with student in terest in pursuing topics in computer science beyond the usual programmingcourses have encouraged small liberal arts colleges to expand their offerings.  This paper summarizes theresults of a survey taken to determine the type of computer science programs being offered in thesecolleges.  The results indicate that over half of these colleges either have no computer scienceprogram or offer only programming courses. | Lopez, A. A.Raymond, R.Tardiff, R..Kcomputer science, education, curricula, small colleges.C1.5
2900 | Some Theorems to Aid in Solving the File Allocation Problem | The file allocation problem-i.e. the problemof finding the optimal set of network sites at which to locate copies of a file-is known to be, in general,polynomial complete.  Heuristics and other aids to finding optimal, or near-optimal, solutions aretherefore much needed.  In this paper we present three theorems which can be applied a priori to indicatethat certain sites should (or should not) be included in an optimal allocation. | Grapa, E.Belford, G. G..KFile allocation, computer networks, distributed data management.C4.33
2901 | An Encoding Method for Multifield Sorting and Indexing | Sequences of character strings with an orderrelation imposed between sequences are considered.  An encoding scheme is described which produces a single,order-preserving string from a sequence of strings.  The original sequence can be recovered fromthe encoded string, and one sequence of strings precedes another if and only if the encoding of the firstprecedes the encoding of the second.  The strings may be variable length, without a maximum length restriction,and no symbols need be reserved for control purposes.  Hence any symbol may occur in any string.  Thescheme is useful for multifield sorting, multifield indexing, and other applications where orderingon more than one field is important. | Blasgen, M. W.Casey, R. G.Eswaran, K. P..KSorting multifield indexes, lexicographic order, searching, encoding.C3.74 4.19 4.33 4.40 5.31
2902 | Dynamic Memory Allocation in Computer Simulation | This paper investigates the performance of35 dynamic memory allocation algorithms when used to service simulation programs as represented by 18test cases.  Algorithm performance was measured interms of processing time, memory usage, and external memoryfragmentation.  Algorithms main taining separate free space lists for each size of memory block usedtended to perform quite well compared with other algorithms.  Simple algorithms operating on memory orderedlists (without any free list) performed surprisingly well.  Algorithms employing power-of-two block sizeshad favorable processing requirements but generally unfavorable memory usage.  Algorithms employing LIFO, FIFO,or memory ordered free lists generally performed poorly compared with others. | Nielsen, N. R..Kalgorithm performance,dynamic memory allocation, dynamicmemory management, dynamic storage allocation, garbage collection, list processing, memory allocation,memory management, programming techniques, simulation, simulation memory management, simulation techniques,space allocation, storage allocation.C3.74 4.49 5.25 8.1
2903 | Improving Programs by the Introduction of Recursion | A new technique of program transformation,called "recursion in troduction," is described and applied to two algorithms which solve pattern matching problems. By using recursion in troduction, algorithms which manipulate a stack are first translated intorecursive algorithms in which no stack operations occur.  These algorithms are then subjected to a secondtransformation, a method of recursion elimination called "tabulation," to produce programs with a veryefficient running time.  In particular, it is shown how the fast linear pattern matching algorithm of Knuth,Morris, and Pratt can be derived in a few steps from a simple nonlinear stack algorithm. | Bird, R. S..Kprogram transformation, optimization of programs,recursion elimination, pattern matching algorithms, stacks, computational induction.C4.0 4.2 5.20 5.24 5.25
2904 | An Algorithm for Reduction of Operator Strength | A simple algorithm which uses an indexed temporarytable to perform reduction of operator strength in strongly connected regions is presented.  Several extensions,including linear function test replacement, are discussed.  These algorithms should fit well into anintegrated package of local optimization algorithms. | Cocke, J..Kcompilers, optimization of compiled code, program analysis,operator strength reduction, test replacement, strongly connected region.C4.12 5.24 5.32
2905 | Perfect Hashing Functions: A SingleProbe Retrieving Method for Static Sets | A refinement of hashing which allows retrievalof an item in a static table with a single probe is considered.  Given a set I of identifiers, two methodsare presented for building, in a mechanical way, perfect hashing functions, i.e. functions transformingthe elements of I into unique addresses.  The first method, the "quotient reduction" method, isshown to be complete in the sense that for every set I the smallest table in which the elements of Ican be stored and from which they can be retrieved by using a perfect hashing function constructed by thismethod can be found.  However, for nonuniformly distributed sets, this method can give rather sparse tables. The second method, the "remainder reduction" method, is not complete in the above sense, but it seemsto give minimal (or almost minimal) tables for every kind of set.  The two techniques are applicabledirectly to small sets.  Some methods to extend these results to larger sets are also presented.  A roughcomparison with ordinary hashing is given which shows that this method can be used convenientlyin several practical applications. | Sprugnoli, R..Khashing, hashing methods, hash coding, direct addressing,identifier-to-address transformations, perfect hashing functions, perfect hash coding, reduction, scatter storage.C3.7 3.74 4.34
2906 | A Very High Level Programming Language for Data Processing Applications | Application development today is too labor-in tensive. In recent years, very high-level languages have been increasingly explored as a solution to thisproblem.  The Business Definition Language (BDL) is such a language, one aimed at business data processingproblems.  The concepts in BDL mimic those which have evolved through the years in businesses usingmanual methods.  This results in three different sublanguages or components: one for defining the businessforms, one for describing the business organization, and one for writing calculations. | Hammer, M.owe, W. G.Kruskal, V. J.Wladawsky, I..Kvery high level language, nonprocedural language,data flow language, business application, business data processing, structured programming, modular programming,format specification, and design methodology.C3.50 4.22 4.32
2907 | The Optimal Approach to Recursive Programs | The classical fixed poin t approach toward recursiveprograms suggests choosing the "least defined fixed poin t" as the most appropriate solution to a recursiveprogram.  A new approach is described which in troduction an " optimal fixed point," which, in contrastto the least defined fixed poin t, embodies the maximal amount of valuable information embedded in theprogram.  The practical implications of this approach are discussed and techniques for proving propertiesof optimal fixed poin t are given.  The presentation is informal, with emphasis on examples. | Manna, Z.Shamir, A..Krecursive programs, fixed poin ts, least fixedpoints,optimal fixed poin ts, proof techniques.C5.24
2908 | A Note On Reflection-Free Permutation Enumeration | Roy, M. K..Kpermutations, reflection-free generation.C5.30
2909 | What Can We Do about the Unnecessary Diversityof Notation for Syntactic Definitions? | Wirth, N..Ksyntactic description language, extended BNF.C4.20
2910 | Equivalence of Hough Curve Detection to Template Matching | Stockman, G. C..Kpicture processing, pattern recognition, curvedetection, Hough transformation, template matching.C3.63 6.9
2911 | Anomalous Behavior of the Fifty-PercentRule in Dynamic Memory Allocation | This paper reports simulation data showingthat, in dynamic memory allocation, the average free-to-allocated-block ratio can differ considerablyand in both directions from the predictions of the 50 percent rule.  A new derivation is given, and itis shown that previous derivations make an assumption that may be violated frequently.  On the basis of the simulationdata and the derivation, it is hypothesized that the anomalous behavior results from the combinedeffects of systematic placement and the statistics of the release process.  Additional simulations supportthis hypothesis.  Systematic placement, which refers to the natural convention of always allocatingstorage requests against the same end of the free block selected by the allocation strategy, tends toorder blocks within contiguous groups according to their allocation time.  The degree of anomalous behaviordepends on the extent to which allocated blocks are released in the order of their allocation.  Fornon-Markovian release processes, the extent of the correlation between allocation order and release ordervaries approximately inversely with the coefficient of variation of the memory residence time distribution. The simulations show that allocation efficiency depends strongly on the residence time distribution; efficiencydecreases as the distribution's coefficient of variation increases.  Some practical implications are briefly discussed. | Shore, J. E..Kdynamic memory allocation, storage fragmentation,fifty-percent rule, first-fit, simulation.C3.73 4.32 4.34 4.35
2912 | Concurrent Reading and Writing | The problem of sharing data among asynchronousprocess is considered.  It is assumed that only one process at a time can modify the data, but concurrentreading and writing is permitted.  Two general theorems are proved, and some algorithms are presentedto illustrate their use.  These include a solution to the general problem in which a read is repeated ifit might have obtained an incorrect result, and two techniques for transmitting messages between processes. These solutions do not assume any synchronizing mechanism other than data which can be writtenby one process and read by other processes. | Lamport, L..Kasynchronous multiprocessing, multiprocess synchronization,readers/writers problem, shared data.C4.32 5.24
2913 | The Aliasing Problem in Computer-Generated Shaded Images | Certain defects, such as jagged edges anddisappearing detail, have long been an annoyance in digitally generated shaded images.  Although increasingthe resolution or defocusing the display can attenuate them, an understanding of these defects leadsto more effective methods.  This paper explains the observed defects in terms of the aliasing phenomenoninherent in sampled signals and discusses prefiltering as a recognized cure.  A method for evaluating filtersis presented, the application of prefiltering to hidden-surface algorithms is discussed, and an implementationof a filtering tiler is shown accompanied by examples of its effectiveness. | Crow, F. C..Kaliasing, computer graphics, convolutionalfiltering, hidden-surface removal, sampling.C8.2
2914 | Use of the LRU Stack Depth Distributionfor Simulation of Paging Behavior | Two families of probability distributions wereneeded for use by a virtual memory simulation model: headway between page fault distributions, andworking set size distributions.  All members of both families can be derived from the LRU stack depth distribution. Simple expressions for the computation of both kinds of distributions are given.  Finally, examplesare given of both families of distributions as computed from a published stack depth distribution. | Turner, R.Strecker, B..Kvirtual memory, paging, LRU stack, working set, headwaybetween page faults, computer system simulation.C4.35 4.6 8.1
2915 | Considerations for Future Programming Language Standards Activities | This paper reviews the current state of programminglanguage standards activities with respect to the anomalies which exist between the various publishedand proposed standards for Fortran, Cobol, PL/I, and Basic.  Proposals are made for the inclusionof formalisms within future standards and the extension of the standards to include additional itemssuch as error conditions and documentation. | Lee, J. A. N..Kprogramming languages, standards, formalisms,formal descriptions, Fortran, Cobol, PL/I, Basic, Vienna Definition Language (VDL).C2.4 4.2 4.29 4.6 5.23
2916 | A Fast String Searching Algorithm | An algorithm is presented that searches forthe location, "i," of the first occurrence of a character string, "pat," in another string, "string." During the search operation, the characters of pat are matched starting with the last character ofpat.  The information gained by starting the match at the end of the pattern often allows the algorithmto proceed in large jumps through the text being searched.  Thus the algorithm has the unusual property that,in most cases, not all of the first i characters of string are inspected.  The number of characters actuallyinspected (on the average) decreases as a function of the length of pat.  For a random Englishpattern of length 5, the algorithm will typically inspect i/4 characters of string before finding a match ati.  Furthermore, the algorithm has been implemented so that (on the average) fewer than i+patlen machineinstructions are executed.  These conclusions are supported with empirical evidence and a theoreticalanalysis of the average behavior of the algorithm.  The worst case behavior of the algorithm is linear ini+patlen, assuming the availability of array space for tables linear in patlen plus the size of the alphabet. | Boyer, R. S..Kbibliographic search, computational complexity,information retrieval, linear time bound, pattern matching, text editing.C3.74 4.40 5.25
2917 | SITAR: An Interactive Text ProcessingSystem for Small Computers (Corrigendum) | Schneider, B. R. Jr.Watts, R. M.
2918 | Multiprocessor Memory Organization and Memory Interference | The structure of shared memory in a multiprocessorcomputer system is examined with particular attention to nonin terleaved memory.  Alternative memoryorganizations are compared and it is shown that a home memory organization, in which each processoris associated with one or more memories in which its address space is concentrated, is quite effective inreducing memory in terference.  Home memory organization is shown to be particularly suited to certain specializedcomputation problems as well as to possess advantages in terms of in terference and reliability forgeneral purpose computation.  Results for in terleaved memory are drawn from previous work and are used forcomparison.  Trace-driven simulations are used to verify the conclusions of the analysis. | Smith, A. J..Kmemory in terference, interleaving, multiprocessing,trace-driven simulation, queueing theory, shared memory.C4.30 4.32 6.34
2919 | The Programmer's Workbench-A Machine for Software Development | On almost all software development projects theassumption is made that the program development function will be done on the same machine on which theeventual system will run.  It is only when this production machine is unavailable or when its programmingenvironment is totally inadequate that alternatives are considered.  In this paper it is suggested thatthere are many other situations where it would be advantageous to separate the program development andmain tenance function onto a specialized computer which is dedicated to that purpose.  Such a computeris here called a Programmer's Workbench.  The four basic sections of the paper in troduce the subject,outlinethe general concept, discuss areas where such an approach may prove beneficial, and describean operational system utilizing this concept. | Ivie, E. L..Kcomputer configurations, computer networks, softwaredevelopment, software engineering, software main tenance, UNIX.C3.2 3.5 3.7 3.8 4.0
2920 | Game Interpretation of the Deadlock Avoidance Problem | The deadlock avoidance problem may be definedinformally as the determination, from some a priori information about the processes, resources, operatingsystem, etc., of the "safe situations" which may be realized without endangering the smooth runningof the system.  When each process specifies its future needs by a flowchart of need-defined steps, a globalapproach to the phenomenon and its in terpretation as a game between the operating system and the processesallows formalization of risk and safety concepts.  The bipartite graph representation of this game maythen be used to construct explicitly the set of safe states and to study their properties. | Devillers, R..Koperating system, multiprogramming, time-sharing,resource allocation, deadlock, in terlock, deadly embrace, deadlock avoidance, flowchart.C4.30 4.32
2921 | Regular Right Part Grammars and Their Parsers | This paper in troduces an alternative to context-freegrammars called regular right part (RRP) grammars, which resemble PASCAL syntax diagrams.  Formally,RRP grammars have production right parts, which are nondeterministic finite state machines (FSMs),and, as a special case, regular expressions, since these can be converted to FSMs.  RRP grammarsdescribe the syntax of programming languages more concisely and more understandably than is possible withCF grammars.  Also in troduced is a class of parsers, RRP LR(m, k) parsers, which includes the CF LR(k) parsersand provides the same advantages.  Informally, an RRP LR(m, k) parser can determine the right end ofeach handle by considering at most k symbols to the right of the handle and the left end, after theright end has been found, by considering at most m symbols to the left of the handle.  A mechanism fordetermining the left end is required because there is no bound on the length of the handle. | LaLonde, W. R..Kfinite state machines (automata), regular expressions,syntax diagrams,LR(k) grammars, parser construction, parsing, programming languages, language generation,formal definition, compilers, translators, scanners.C4.2 5.21 5.23
2922 | Two-Level Control Structure for Nondeterministic Programming | The basic ideas of nondeterministic programmingare critically reconsidered to single out a proper attitude and programming style for language allowingdirect control of nondeterministic features.  The proposed attitude aims at retaining the purity ofthe nondeterministic formulation of search processes on one level (the attempt level), deferring the coordinationof problem solving efforts to another (the choice level).  The feasibility of recognizing these twolevels is discussed, stressing that the structure to be managed at the choice level is a free of contexts. The leaves are computational environments, each holding an alternative under inspection, whilethe other nodes are associated with choice poin ts.  According to the proposed programming style, a generativefunction is associated with each choice poin t, which expresses the desired choice strategy. The mainadvantage on this approach is the localization of the search strategies: Each nonterminal node of thetree keeps track of the state of the computation as it was when the choice poin t was last interrogated,holding at the same time the strategy to coordinate the available alternatives.  Examples are given interm of ND-Lisp, an extension of Lisp designed and implemented according to these guidelines. | Montangero, C.Pacini, G.Turini, F..Knondeterministic programming, artificial in telligence,control structures, backtracking, search strategy planning, context tree.C3.64 4.22
2923 | High-Level Data Flow Analysis | In contrast to the predominant use of low-levelin termediate text, high-level data flow analysis deals with programs essentially at source level andexploits the control flow information implicit in the parse tree.  The need for high-level flow analysisarises from several aspects of recent work on advanced methods of program certification and optimization. This paper proposes a simple general method of high-level data flow analysis that allows free useof escape and jump statements, avoids large graphs when compiling large programs, facilitates updating ofdata flow information to reflect program changes, and derives new global information helpful in solvingmany familiar global flow analysis problems.  An illustrative application to live variable analysis is presented. Many of the graphs involved are constructed and analyzed before any programs are compiled, thus avoidingcertain costs that low-level methods incur repeatedly at compile time. | Rosen, B. K..Kdata flow analysis, high-level language, controlflow graph, structured programming, escapes, exits, jumps, goto statements.C5.24 4.12 4.22
2924 | An Interactive Computer Graphics Approach to Surface Representation | An in teractive computer graphics method has beendeveloped for the rapid generation of arbitrary shaped three-dimensional surfaces.  The method is a synthesisof spline theory and algorithms, an in teractive means for man-machine communication, and software forstatic or dynamic graphics display.  The basic technique employed is a modified lofting method onwhich sectional curves are represented by uniform B-splines and the surface is in terpolated between sectionsby Cardinal splines.  Among the features of this method are algorithms which enable in teractivemodification of the B-spline representation of the sectional curves.  At all stages of the process, thespatial information is graphically displayed to the user.  Complex surfaces can be created by the combinationof a number of shapes that have been separately generated and automatically joined.  The system has beensuccessfully in terfaced to a variety of analytical routines for structural, medical and graphical applications. | Wu, Sheng-ChuanAbel, J. F.Greenberg, D. P..Kcomputer graphics, three-dimensional surface representation,splines, lofting,finite element input methods.C3.20 3.23 3.34 8.1 8.2
2925 | Optimal Surface Reconstruction from Planar Contours | In many scientific and technical endeavors,a three-dimensional solid must be reconstructed from serial sections, either to aid in the comprehensionof the object's structure or to facilitate its automatic manipulation and analysis.  This paper presentsa general solution to the problem of constructing a surface over a set of cross-sectional contours. This surface, to be composed of triangular tiles, is constructed by separately determining an optimalsurface between each pair of consecutive contours. Determining such a surface is reduced to the problemof finding certain minimum cost cycles in a directed toroidal graph.  A new fast algorithm for finding suchcycles is utilized.  Also developed is a closed-form expression, in term of the number of contour poin ts, foran upper bound on the number of operations required to execute the algorithm.  An illustrated example whichinvolves the construction of a minimum area surface describing a human head is included. | Fuchs, H.Kedem,Z. M.Uselton, S. P..Ksurface reconstruction, contour data, serial sections,three-dimensional computer graphics, minimum cost paths, continuous tone displays.C5.25 5.32 8.2
2926 | Pagination of B*-Trees with Variable-Length Records | A strategy is presented for pagination of B*-treeswith variable-length records.  If records of each length are uniformly distributed within thefile, and if a wide distribution of record lengths exists within the file, then this strategy results in shallowtrees with fast access times.  The performance of this strategy in an application is presented, comparedwith that of another strategy, and analyzed. | McCreight, E. M..KB-tree, index, database, tree storage structure, searching.C3.73 4.33 4.34
2927 | Some New Upper Bounds on the Generation of Prime Numbers | Given an integer N, what is the computationalcomplexity of finding all the primes less than N?  A modified sieve of Eratosthenes using doubly linkedlists yields an algorithm of O(N) arithmetic complexity.  This upper bound is shown to be equivalentto the theoretical lower bound for sieve methods without preprocessing.  Use of preprocessing techniquesinvolving space-time and additive-multiplicative tradeoffs reduces this upper bound to O(N/log logN)and the bit complexity to O(N logN log log logN).  A storage requirement is described using O(N logN/log logN) bits as well. | Mairson, H. G..Kcomputational complexity, sieve, prime number generation,number theory, linked list, preprocessing, balancing.C5.25 5.39
2928 | Hardware Estimation of a Process' Primary Memory Requirements | A minor hardware extension to the Honeywell6180 processor is demonstrated to allow the primary memory requirements of a process in Multics to be approximated. The additional hardware required for this estimate to be computed consists of a program accessibleregister containing the miss rate of the associative memory used for page table words.  Thisprimary memory requirement estimate was employed in an experimental version of Multics to control thelevel of multiprogramming in the system and to bill for memory usage.  The resulting system's tuning parametersdisplay configuration insensitivity, andit is conjectured that the system would also track shiftsin the referencing characteristics of its workload and keep the system in tune. | Giffor, D. K..Kprimary memory requirement, virtual memory, levelof multiprogramming, associative memory, working set, resource allocation, LRU stack model, referencing characteristics.C4.32 4.35 4.6 6.36
2929 | An Analysis of Inline Substitution for a Structured Programming Language | An optimization technique known as inline substitutionis analyzed.  The optimization consists of replacing a procedure invocation by a modified copyof the procedure body.  The general problem of using inline substitution to minimize execution timesubject to size constrain ts is formulated, and an approximate algorithmic solution is proposed.  The algorithmdepends on run-time statistics about the program to be optimized.  Preliminary results for theCLU structured programming language indicate that, in programs with a low degree of recursion, over 90percent of all procedure calls can be eliminated, with little increase in the size of compiled code and asmall savings in execution time.  Other conclusions based on these results are also presented. | Scheifler, R. W..Kinline substitution, open coding, open compilation,program optimization, compilers, structured programming languages, run-time statistics.C4.12
2930 | The GRE Advanced Test in Computer Science | This report describes the Advanced Test inComputer Science which was recently in troduced in the Graduate Record Examination Program.  The GRE programis described in general, and, the events leading to the establishment of the Advanced Computer ScienceTest are discussed.  Content specifications and their rationale are given.  A set of sample questions is included. | Austing, R. H..Keducation, computer science, graduate schooladmissions, test development examinations.C1.5
2931 | Logic and Programming Languages | Logic has been long in terested in whether answersto certain questions are computable in principle, since the outcome puts bounds on the possibilities offormalization.  More recently, precise comparisons in the efficiency of decision methods have become availablethrough the developments in complexity theory.  These, however, are applications to logic, and a big questionis whether methods of logic have significance in the other direction for the more applied parts ofcomputability theory.  Programming languages offer an obvious opportunity as their syntactic formalizationis well advanced; however, the semantical theory can hardly be said to be complete.  Though we havemany examples, we have still to give wide-ranging mathematical answers to these queries:  What is a machine? What is a computable process?  How (or how well) does a machine simulate a process?  Programs naturallyenter in giving descriptions of processes.  The definition of the precise meaning of a programthen requires us to explain what are the objects of computation (in a way, the statics of the problem)and how they are to be transformed (the dynamics).  So far the theories of automata and of nets, thoughmost in teresting for dynamics, have formalized only a portion of the field, and there has been perhaps toomuch concentration on the finite-state and algebraic aspects.  It would seem that the understanding of higher-levelprogram features involves us with infinite objects and forces us to pass through several levelsof explanation to go from the conceptual ideas to the final simulation on a real machine.  These levelscan be made mathematically exact if we can find the right abstractions to represent the necessary structures. The experience of many independent workers with the method of data types as lattices (or partialorderings) under an information content ordering, and with their continuous mappings, has demonstrated theflexibility of this approach in providing definitions and proofs, which are clean and without undue dependenceon implementations.  Nevertheless much remains to be done in showing how abstract conceptualizationscan (or cannot) be actualized before we can say we have a unified theory. | Scott, D. S..Klogic, programming languages, automata, denotationalsemantics, a-calculus models, computability, partial functions, approximation, function spaces.C1.2 4.20 5.21 5.24 5.27
2932 | Complexity of Computations | The framework for research in the theory of complexityof computations is described, emphasizing the in terrelation between seemingly diverse problemsand methods.  Illustrative examples of practical and theoretical significance are given.  Directionsfor new research are discussed. | Rabin, M. O..Kcomplexity of computations, algebraic complexity,in tractable problems, probabilistic algorithms.C5.25
2933 | Another Advantage of Keyword Notation forParameter Communication with Subprograms | Francez, N..KKeyword notation, positional notation, parameters,transmission, subprograms, readability, call by value, call by reference, call by name, compile-time errors.C4.2 4.20 4.22
2934 | Comment on Computing the k Shortest Paths in a Graph | Lawler, E. L..Kgraph, network, shortest path, algorithm, ranking.C5.32
2935 | Production and Employment of Ph.D.'sin Computer Science-1976 (Corrigendum) | Taulbee, O. E.Conte, S. D.
2936 | An Efficient Data Structure for the Simulation Event Set | Recently algorithms have been presented for therealization of event scheduling routines suitable for general purpose discrete event simulation systems. Several exhibited a performance superior to that of commonly used simple linked list algorithms.  In thispaper a new event scheduling algorithm is presented which improves on two aspects of the best of the previouslypublished algorithms.  First, the new algorithm's performance is quite insensitive to skewed distributions,and second, its worst-case complexity is O( n), where n is the number of events in the set.  Furthermore,tests conducted to estimate the average complexity showed it to be nearly independent of n. | Franta, W. R.Maly, K..Ksimulation, time flow mechanisms, eventscanning mechanisms, multilinked lists.C3.34 4.22 5.5 8.1
2937 | An Experimental Evaluation of Data Type Conventions | The language in which programs are writtencan have a substantial effect on the reliability of the resulting programs.  This paper discusses an experimentthat compares the programming reliability of subjects using a statically typed language and a "typeless"language.  Analysis of the number of errors and the number of runs containing errors shows that, atleast in one environment, the use of a statically typed language can increase programming reliability. Detailed analysis of the errors made by the subjects in programming solutions to reasonably small problemsshows that the subjects had difficulty manipulating the representation of data. | Gannon, J. D..Kdata types, experimentation, languagedesign, redundancy, reliable software.C4.22
2938 | Toward a Discipline of Real-Time Programming | Programming is divided into three major categorieswith increasing complexity of reasoning in program validation: sequential programming, multiprogramming,and real-time programming.  By adhering to a strict programming discipline and by using a suitablehigh-level language molded after this discipline, the complexity of reasoning about concurrency and executiontime constrain ts may be drastically reduced.  This may be the only practical way to make real-timesystems analytically verifiable and ultimately reliable.  A possible discipline is outlined andexpressed in terms of the language Modula. | Wirth, N..Kmultiprogramming, real-time programming, process synchronization,processor sharing, program validation, Modula.C3.80 4.22
2939 | Abstraction Mechanisms in CLU | CLU is a new programming language designed to supportthe use of abstractions in program construction.  Work in programming methodology has led to the realizationthat three kinds of abstractions-procedural, control, and especially data abstractions-are usefulin the programming process.  Of these, only the procedural abstraction is supported well by conventionallanguages, through the procedure or subroutine.  CLU provides, in addition to procedures, novel linguisticmechanisms that support the use of data and control abstractions.  This paper provides an in troductionto the abstraction mechanisms in CLU.  By means of programming examples, the utility of the threekinds of abstractions in program construction is illustrated, and it is shown how CLU programs maybe written to use and implement abstractions.  The CLU library, which permits incremental program developmentwith complete type checking performed at compile time, is also discussed. | Liskov, B.Snyder, A.Atkinson, R.Schaffert, C..Kprogramming languages, data types, data abstractions,control abstractions, programming methodology, separate compilation.C4.0 4.12 4.20 4.22
2940 | Abstraction and Verification in Alphard: Definingand Specifying Iteration and Generators | The Alphard "form" provides the programmer witha great deal of control over the implementation of abstract data types.  In this paper the abstraction techniquesare extended from simple data representation and function definition to the iteration statement, themost important poin t of interaction between data and the control structure of the language itself.  Ameans of specializing Alphard's loops to operate on abstract entities without explicit dependence on therepresentation of those entities is in troduced.  Specification and verification techniques that allowthe properties of the generators for such iterations to be expressed in the form of proof rules are developed. Results are obtained that for common special cases of these loops are essentially identical to thecorresponding constructs in other languages.  A means of showing that a generator will terminate is also provided. | Shaw, M.Wulf, W. A..Kabstraction and representation, abstract data types,assertions, control specialization, correctness, generators,invariants, iteration statements, modulardecomposition, program specifications, programming languages, programming methodology, proofs of correctness, types, verification.C4.20 5.24
2941 | Early Experience with Mesa | The experiences of Mesa's first users-primarilyits implementers-are discussed, and some implications for Mesa and similar programming languages are suggested.The specific topics addressed are: module structure and its use in defining abstractions, data-structuringfacilities in Mesa, an equivalence algorithm for types and type coercions, the benefits of the type systemand why it is breached occasionally, and the difficulty of making the treatment of variant records safe. | Geschke, C. M.Morris, J. H. Jr.Satterthwaite, E. H..Kprogramming languages, types, modules,data structures, systems programming.C4.22
2942 | An Algol-Based Implementation of SNOBOL 4 Patterns | Brownlee, J. N..Kpatterns SNOBOL 4, pattern matching, string processing,pattern implementation, algorithms in Pascal.C4.29
2943 | Lucid, a Nonprocedural Language with Iteration | Lucid is a formal system in which programscan be written and proofs of programs carried out.  The proofs are particularly easy to follow and straightforwardto produce because the statements in a Lucid program are simply axioms from which the proofproceeds by (almost) conventional logical reasoning, with the help of a few axioms and rules of inferencefor the special Lucid functions.  As a programming language, Lucid is unconventional because, among otherthings, the order of statements is irrelevant and assignment statements are equations.  Nevertheless,Lucid programs need not look much different than iterative programs in a conventional structured programminglanguage using assignment and conditional statements and loops. | Ashcrof, E. A.Wadge, W. W..Kprogram proving, formal systems, semantics,iteration, structured programming.C5.21 5.24
2944 | Shifting Garbage Collection Overhead to Compile Time | This paper discusses techniques which enable automaticstorage reclamation overhead to be partially shifted to compile time.  The paper assumes a transactionoriented collection scheme, as proposed by Deutsch and Bobrow, the necessary features of which aresummarized.  Implementing the described optimizations requires global flow analysis to be performed on thesource program.  It is shown that at compile time certain program actions that affect the reference countsof cells can be deduced.  This information is used to find actions that cancel when the code is executedand those that can be grouped to achieve improved efficiency. | Barth, J. M..Kgarbage collection, global flow analysis, list processing,optimization, reference counts, storage management.C3.80 4.12 4.20 4.34
2945 | Certification of Programs for Secure Information Flow | This paper presents a certification mechanismfor verifying the secure flow of information through a program.  Because it exploits the propertiesof a lattice structure among security classes, the procedure is sufficiently simple that it can easilybe included in the analysis phase of most existing compilers.  Appropriate semantics are presented andproved correct.  An important application is the confinement problem: The mechanism can prove that a programcannot cause supposedly nonconfidential results to depend on confidential input data. | Denning, D. E.Denning, P. J..Kprotection, security, information flow, program certification,lattice, confinement, security classes.C4.3 4.35 5.24
2946 | An Alternative to Event Queues for Synchronization in Monitors | In the monitor concept, as proposed by BrinchHansen and Hoare, event are used for synchronization.  This paper describes another synchronizing primitivewhich is nearly as expressive as the conditional wait, but can be implemented more efficiently.  An implementationof this primitive in terms of P and V operations is given together with a correctness proof. Two examples are presented: the readers and writers problem and the problem of informationstreams sharing a finite buffer pool. | Kessels, J. L. W..Kmonitor, operating system, mutual exclusion, synchronization,conditional critical region, structuring concept.C4.31
2947 | SITAR: An Interactive Text Processing System for Small Computers | SITAR, a low-cost in teractive text handlingand text analysis system for nontechnical users, is in many ways comparable to in teractive bibliographicalsearch and retrieval systems, but has several additional features. It is implemented on a PDP/11 time-sharingcomputer invoked by a CRT with microprogrammed editing functions.  It uses a simple command language designatinga function, a file, and a search template consisting of the textual string desired and stringsdelimiting the context in which the hit is to be delivered.  Extensive experience with SITAR shows thatthe combined powers of simple commands, string orientation, circular file structure, a CRT with localmemory, and conversational computing produce a system much more powerful than the sum of its parts. | Schneider, B. R. Jr.Watts, R. M..Kinformation retrieval, text editing, minicomputers,CRTs,time sharing, bibliographic search and retrieval, literary analysis, linguistic analysis, command languages.C3.4 3.7
2948 | A Terminal-Oriented Communication System | This paper describes a system for full-duplexcommunication between a time-shared computer and its terminals.  The system consists of a communicationscomputer directly connected to the time-shared system, a number of small remote computers to whichthe terminals are attached, and connecting medium speed telephone lines.  It can service a large numberof terminals of various types.  The overall system design is presented along with the algorithms used tosolve three specific problems: local echoing, error detection and correction on the telephone lines,and multiplexing of character output. | Heckel, P. G.Lampson, B. W..Kterminal system, error correction, multiplexing,local echoing, communication system, network.C3.81 4.31
2949 | A Correctness Proof of a Topology InformationMain tenance Protocol for a Distributed Computer Network | In order for the nodes of a distributed computernetwork to communicate, each node must have information about the network's topology.  Since nodesand links sometimes crash, a scheme is needed to update this information.  One of the major constrain tson such a topology information scheme is that it may not involve a central controller.  The TopologyInformation Protocol that was implemented on the MERIT Computer Network is presented and explained; thisprotocol is quite general and could be implemented on any computer network.  It is based on Baran's "HotPotato Heuristic Routing Doctrine."  A correctness proof of this Topology Information Protocol is also presented. | Tajibnapis, W. D..Kdistributed computer network, correctness proofs,computer networks, distributed control, network topology, routing problem in networks, distributed operatingsystem, store and forward packet switching, store and forward message switching, traffic control.C3.81 4.32
2950 | A Unifying Approach to Scheduling | This paper presents a scheme for classifyingscheduling algorithms based on an abstract model of a scheduling system which formalizes the notion ofpriority.  Various classes of scheduling algorithmsare defined and related to existing algorithms.  Acriterion for the implementation efficiency of an algorithm is developed and results in the definitionof time-invariant algorithms, which include most of the commonly implemented ones.  For time-invariantalgorithms, the dependence of processing rates on priorities is derived.  The abstract model providesa framework for implementing flexible schedulers in real operating systems.  The policy-driven schedulerof Bernstein and Sharp is discussed as an example of such an implementation | Ruschitzka, M.Fabry, R. S..Kscheduling algorithms, scheduling models, priority,operating systems,processor sharing, implementation efficiency.C4.31 4.32 4.34 4.35 8.1
2951 | Dynamic Response Time Prediction for Computer Networks | If the ultimate aim of a computing networkis resource sharing, then the human component as well as the technical component of networking mustbe fully investigated to achieve this goal.  This research is a first step toward assisting the user in participatingin the vast store of resources available on a network. Analytical, simulation, and statistical performanceevaluation tools are employed to investigate the feasibility of a dynamic response time monitorthat is capable of providing comparative response time information for users wishing to process variouscomputing applications at some network computing node.  The research clearly reveals that sufficientsystem data are currently obtainable, at least for the five diverse ARPA network systems studied in detail,to describe and predict the response time for network time-sharing systems as it depends on somemeasure of system activity or load level. | Mamrak, S. A..Kresponse time monitor, computer networks, time-sharingsystems, comparative response time, ARPA network, anlytic modeling, simulation, benchmark jobs, system measurement.C4.6 6.20 8.1
2952 | Functions Realizable with Word-Parallel Logicaland Two's-Complement Addition Instructions | Warren, H. S. Jr..KBoolean functions, two's-complement, sign propagation.C4.0 6.32
2953 | Notes on Recursion Elimination | Various methods of recursion elimination areapplied to the schematic recursive procedure: proc S(x); px then N(x); S(fx); S(gx); M(x) fi.  Procedureswith this general form arise in connection with tree traversal and sorting algorithms.  Each methodof recursion removal involves the use of one or more stacks, and the solutions are comparedon the basis of their running time. | Bird, R. S..Krecursion elimination, optimization of programs,stacks, trees, sorting algorithms, computational induction.C4.0 4.2 5.20 5.24 5.25 5.31
2954 | A Bounded Storage Algorithm for Copying Cyclic Structures | A new algorithm is presented which copies cycliclist structures using bounded workspace and linear time. Unlike a previous similar algorithm, thisone makes no assumptions about the storage allocation system in use and uses only operations likely to be availablein a high-level language.  The distinctive feature of this algorithm is a technique for traversingthe structure twice, using the same spanning tree in each case, first from left to right and then from right to left. | Robson J. M..Kcopying, shared subtrees, cyclic structures.C4.49 5.25
2955 | Buddy Systems | Two algorithms are presented for implementingany of a class of buddy systems for dynamic storage allocation.  Each buddy system corresponds to a set ofrecurrence relations which relate the block sizes provided to each other. Analyses of the in ternal fragmentationof the binary buddy system, the Fibonacci buddy system, and the weighted buddy system are given.Comparative simulation results are also presented for in ternal, external, and total fragmentation. | Peterson, J. L.Norman, T. A..Kdynamic storage allocation, buddy system, fragmentation,Fibonacci buddy system, weighted buddy system.C3.89 4.32 4.39
2956 | Some Ideas on Data Types in High-Level Languages | A number of issues are explored concerning thenotion that a data type is a set of values together with a set of primitive operations on those values.  Amongthese are the need for a notation for iterating over the elements of any finite set (instead of themore narrow for i:= 1 to n notation), the use of the domain of an array as a data type, the need fora simple notation for allowing types of parameters to be themselves parameters (but in a restrictive fashion),and resulting problems with conversion of values from one type to another. | Gries, D.Gehani, N..Kdata types, generic procedures, programming languages.C4.12 4.20 4.22
2957 | Database Abstractions: Aggregation | Aggregation is in troduced as an abstractionwhich is important in conceptualizing the real world.  Aggregation transforms a relationship betweenobjects into a higher-level object.  A new data type, called aggregation, is developed which, undercertain criteria of "well-definedness," specifies aggregation abstractions.  Relational databases definedas collections of aggregates are structured as a hierarchy on n-ary relations.  To main tain well-definedness,update operations on such databases must preserve two invariants.  Well-defined relations aredistinct from relations in third normal form.  It is shown that these notions are complementary and both areimportant in database design.  A top-down methodology for database design is described which separatesdecisions concerning aggregate structure from decisions concerning key identification.  It issuggested that aggregate types, and other types which support real-world abstractions without in troducingimplementation detail, should be incorporated into programming languages. | Smith, J. M.Smith, D. C. P..Kdata abstraction, relational database, data type,aggregation, database design, data structure, knowledge representation, data definition language.C3.65 3.69 3.79 4.29 4.33 4.34
2958 | Abstract Data Types and the Development of Data Structures | Abstract data types can play a significant rolein the development of software that is reliable, efficient, and flexible.  This paper presents and discussesthe application of an algebraic technique for the specification of abstract data types.  Amongthe examples presented is a top-down development of a symbol table for a block structured language; a discussionof the proof of its correctness is given.  The paper also contains a brief discussion of the problemsinvolved in constructing algebraic specifications that are both consistent and complete. | Guttag, J..Kabstract data type, correctness proof, data type,data structure, specification, software specification.C4.34 5.24
2959 | The System for Business Automation (SBA): Programming Language | The system for business automation (SBA) is a systemwithin which application experts-nonprogrammers-can describe and execute their applications on a computer. The user of SBA views his application as manipulation of information in two-dimensional pictures of tables,business forms, and reports on a display terminal.  He can gradually automate this application by giving "examples"to the system of how he manually manipulates the information.  The Query-by-Example database languageis a subset of the SBA programming language. | Zloof, M. M.de Jong, S. P..Kprogramming language, graphics, user in terface,data flow, forms flow, data abstraction, database, query, data processing, business system specification, application programming.C3.73 3.74 4.22 4.33 4.34
2960 | Two Views of Data Abstraction | Ledgard, H. F.Taylor, R. W.
2961 | Experimental Investigations of the Utilityof Detailed Flowcharts in Programming | This paper describes previous research onflowcharts and a series of controlled experiments to test the utility of detailed flowcharts as an aidto program composition, comprehension, debugging, and modification.  No statistically significant differencebetween flowchart and nonflowchart groups has been shown, thereby calling into question the utilityof detailed flowcharting.  A program of further research is suggested. | Shneiderman, B.Mayer, R.McKay, D.Heller, P..Kflowcharts, program composition, program comprehension,debugging, modification, experimental testing, human factors.C1.5 4.0
2962 | Production and Employment of Ph.D.'s in Computer Science-1976 | Statistics are presented on the productionand employment of Ph.D.'s in computer science for the calendar year 1975-76.  Data include profiles of graduatestudents and of faculty at 60 Ph.D.-producing departments as well as a breakdown of degrees grantedby specialty areas.  Significant trends are noted and comparisons with comparable data gatheredfor the 1974-75 calendar year are made. | Taulbee, O. E.Conte, S. D..Kcomputer science, production of Ph.D.'s, employment, students.C1.3 1.52 1.53 1.59
2963 | A Fast Algorithm for Computing Longest Common Subsequences | Previously published algorithms for findingthe longest common subsequence of two sequences of length n have had a best-case running time of O(n^2). An algorithm for this problem is presented which has a running time of O((r + n)log n), where ris the total number of ordered pairs of positions at which the two sequences match.  Thus in the worstcase the algorithm has a running time of O(n^2 log n).  However, for those applications where most positionsof one sequence match relatively few positions in the other sequence, a running time of O(n log n) can be expected. | Hunt, J. W.Szymanski, T. G..KLongest common subsequence, efficient algorithms.C3.73 3.63 5.25
2964 | An Approach to Optimal Design of Storage Parameters in Databases | Milman, Y..Kdatabase organization, storage parameteroptimization, resident, overflow storage.C3.73 3.74
2965 | An Optimal Evaluation of Boolean Expressions in an Online Query System | Hanani, M. Z..Kquery, Boolean expression, information retrieval, file organization.C3.5 3.70 3.74
2966 | The Choice of Reference Poin ts in Best-Match File Searching | Improvements to the exhaustive search methodof best-match file searching have previously been achieved by doing a preprocessing step involving thecalculation of distances from a reference poin t.   This paper discusses the proper choice of referencepoin ts and extends the previous algorithm to use more than one reference poin t.  It is shown that referencepoin ts should be located outside of data clusters.  The results of computer simulations are presented whichshow that large improvements can be achieved by the proper choice and location of multiple reference poin ts. | Shapiro, M..Kmatching, file searching, best match, nearest-neighbor classification.C3.73 3.74
2967 | A Comparison of Hardware and Software AssociativeMemories in the Context of Computer Graphics | The Associative Processing of Line Drawings (APLD)System utilizes a hardware associative memory and creates, modifies, deletes, stores, and retrievestwo-dimensional line drawings consisting of poin ts,lines, rectangles, and triangles. The APLD functionswere duplicated on the TX-2 computer at M.I.T.'s Lincoln Laboratory under the LEAP Language and DataStructure,  A comparison of the hardware approach with the software simulation illustrates the advantagesof the hardware associative memory in three areas: (1) processing speed, (2) storage requirements, and (3)flexibility.  The major problem areas of hardware associative memory technology, namely input/outputand cost effectiveness, are also addressed. | Stillman, N. J.Berra, P. B..Kassociative memory, associative processor, content-addressablememory, graphics, information retrieval, data structures, software evaluation, hardware evaluation,parallel processing, database management.C3.71 3.72 3.73 3.74 4.34 4.6 6.22 8.2
2968 | A Comparison of Tree-Balancing Algorithms | Several algorithms-height-balance (i.e. AVLand extensions), weight-balance (i.e. BB and WB), and total restructuring-for building balanced binary searchtrees are compared.  The criteria for comparison encompass theoretical aspects (e.g. path lengths) and implementationindependent and machine/algorithm-dependent measures (e.g. run time).  A detailed analysis of code isalso presented at a level believed to be language-and compiler-independent.  The quality of the resultingtrees and the overhead spent on building them are analyzed, and some guidelines are given for an efficientuse of the methods.  If insertion and subsequent queries are the only operations of in terest, then "pure"AVL trees present the overall best qualities. | Baer, J. L.Schwab, B..Kbinary search trees, AVL trees, weight-balanced trees,path length, analysis of algorithms, information storage and retrieval.C3.7 3.72 3.74 5.31
2969 | Optimal Program and Data Locations in Computer Networks | An optimization procedure for the allocationof program and data files in a computer network is presented.  This algorithm takes into account thedependencies between files and programs such as occur in real heterogeneous computer networks.  Insightsinto whether or not to convert programs from one computer to another can also be gained from themodel.  A search procedure for the file location problem is described, along with an exampleand a possible application of the model. | Morgan, H. L.Levin, K. D..Kcomputer networks, databases, distributeddatabases, optimal file location.C3.81 3.51 4.33
2970 | Achieving Specific Accuracy in Simulation Output Analysis | This paper extends the use of the regenerativeproperty of queueing systems in the analysis of simulation output.  In particular, it describes asequential estimation method which when used with the regenerative property allows results to be obtainedwith specified statistical accuracy.  This method includes a test to check the normality assumption onwhich the sequential procedure relies.  The paper illustrates the method using the empty and idle stateas the regenerative state.  A second example then describes how using the most frequently entered stateas the regenerative state reduces the chance of making a costly error in a preliminary simulation run. The paper also described how a variance reduction method due to Page [9] can be used to obtain a specifiedaccuracy with considerably fewer job completions than are required when no variance reduction technique is applied. | Fishman, G. S..Kconfidence in terval, ratio estimator, regenerativeproperty, sequential estimator, simulation, stopping rule, variance reduction.C5.5 8.1
2971 | SP/k: A System for Teaching Computer Programming | SP/k is a compatible subset of the PL/I  languagethat has been designed for teaching programming. The features of the SP/k language were chosen to encouragestructured problem solving by computers, to make the language easy to learn and use, to eliminateconfusing and redundant constructs, and to make the language easy to compile.  The resulting languageis suitable for in troducing programming concepts used in various applications, including business dataprocessing, scientific calculations and non-numeric computation.  SP/k is actually a sequence of languagesubsets called SP/1, SP/2,...SP/8.  Each subset in troduces new programming language constructs whileretaining all the constructs of preceding subsets. Each subset is precisely defined and can be learnedor implemented without the following subsets. | Holt, R. C.Wortman, D. B.Barnard, D. T.Cordy, J. R..Kprogrammer education, universities, community colleges,high schools, PL/I, SP/k, minicomputers, programming language design, teaching programming, in troductory computing.C1.5 4.2 4.12 4.13
2972 | Proof Techniques for Hierarchically Structured Programs | A method for describing and structuring programsthat simplifies proofs of their correctness is presented.  The method formally represents a programin terms of levels of abstraction, each level of which can be described by a self-contained nonproceduralspecification.  The proofs, like the programs, are structured by levels.  Although only manual proofsare described in the paper, the method is also applicable to semi-automatic and automatic proofs.  Preliminaryresults are encouraging, indicating that the method can be applied to large programs, such as operating systems. | Robinson, L.Levitt, K. N..Khierarchical structure, program verification, structuredprogramming, formal specification, abstraction, and programming methodology.C4.0 4.29 4.9 5.24
2973 | Sorting on a Mesh-Connected Parallel Computer | Two algorithms are presented for sorting n^2elements on an n X n mesh-connected processor array that require O(n) routing and comparison steps. The best previous algorithm takes time O(n log n).  The algorithms of this paper are shown to be optimalin time within small constant factors.  Extensions to higher-dimensional arrays are also given. | Thompson, C. D.Kung, H. T..Kparallel computer, parallel sorting, parallel merge,routing and comparison steps, perfect shuffle. processor in terconnection pattern.C4.32 5.25 5.31
2974 | Comment on Weighted Increment Linear Search for Scatter Tables | Bandyopadhyay, S. K..Khash address, primary clustering, index,sequence, complementary relation, search.C3.73 3.74 4.9 4.11 4.12
2975 | Remark on Uniform Insertion in Structured Data Structures | Hollander, C.R..Kdata structures, directed graphs, uniform insertion.C4.34
2976 | Approximating Block Accesses in Database Organizations | Yao, S. B..Kdatabase, inverted file organization, database performanceand measurement, information retrieval, query answering.C3.70 3.72 4.33
2977 | The Stage Hypothesis and the S-Curve: Some Contradictory Evidence | This paper presents the results of a studytesting the s-shaped budget curve of Nolan's stage model of computer development in an organization.  Researchon the data processing budgets of California counties fails to support the s-shaped curve or the useof budgets as a basis for a stage model.  However, the results do not invalidate the concept of a stagemodel.  The analysis suggests an alternative model of budget growth and a separation between models of budgetinggrowth and growth stages in the development of the computer resource. | Lucac, H. C. Jr.Sutton, J. A..Kbudgets, stage theories, stage hypothesis.C3.50 3.59
2978 | Analysis of Design Alternatives for Virtual Memory Indexes | A class of index structures for use in a virtualmemory environment is described.  Design alternatives within this class of index structures are analyzed.  Thesealternatives include a choice of search strategy, whether or not pages in the index are structured, andwhether or not keys are compressed.  The average cost of retrieving entries from these indexes is expressedas a wieghted sum of the cost of a basic key comparison and the cost of crossing a page boundary inthe index structure.  Formulas for the retrieval costs for possible combinations of design alternativesare given.  These are used in numerical case studies which compare the retrieval costs of the alternatives. Qualitative comparisons of the main tenance costs (insertion, deletion, reorganization) of thedesign alternatives are also included. | Maruyama, K.Smith, S. E..Kindex, index structure, pages, virtual memory,files, retrieval, main tenance, search strategy, key compression.C3.50 3.51 3.02 3.73 3.74
2979 | Studies in Machine Cognition Using The Game of Poker | A progress report is presented of on-goingresearch efforts concerning human decision making under uncertainly and risk and human problem solvingand learning processes on the one hand, and machine learning, large scale programming systems, and novelprogramming techniques on the other.  There has also been in terest in how humans make deductive and inductiveinferences and form and optimize heuristic rules, and how machines can reach similar results. Although the vehicle of these investigations has been the game of poker, a conceptual framework has beenprovided that should have a fairly wide range of applicability.  The models of human judgment, choice,and decision making are incorporated in a large scale complex program.  They represent both descriptiveand normative theories of behavior. An in teractive game environment has been recently established which,besides its usefulness for experiments in game playing, enables humans to construct machine strategies"on-line" in a question answering, advice taking mode. | Findler, N. V..Kmachine learning, game playing programs, decisionmaking under uncertain ty and risk, automatic forming and optimizing of heuristic rules, automaticinductive and deductive inference making, models of game learning, poker, gambling and bluffing.C3.36 3.62 3.61 3.64 3.65 3.66
2980 | The Editing  of Picture Segmentations Using Local Analysis of Graphs | A major problem in picture processing is theelimination of the large number of spurious regions that result from an initial segmentation by region growingtechniques.  Such regions have been eliminated either on the basis of semantic information or on thebasis of size and contrast.  A scheme is presented which performs eliminations on the basis of local propertiesof the region adjacency graph.  The scheme is based on definitions of graph properties which aresatisfied when a spurious region is present; then editing is equivalent to fast graph operations.  A number of examples are shown. | Tanimoto, S. L.Pavlidis, T..Kpicture processing, pattern recognition, segmentation, region editing .C3.63
2981 | Subgoal Induction | A proof method, subgoal induction, is presentedas an alternative or supplement to the commonly used inductive assertion method.  Its major virtue is thatit can often be used to prove a loop's correctness directly from its input-output specification without theuse of an invariant.  The relation between subgoal induction and other commonly used induction rules is exploredand, in particular, it is shown that subgoal induction can be viewed as a specialized form of computationinduction.  A set of sufficient conditions are presented which guarantee that an input-output specificationis strong enough for the induction steps of a proof by subgoal induction to be valid. | Morris, J. H. Jr.Wegbreit, B..Kprogram verification, proving programs correct,induction rule, computation induction, inductive assertions, structural induction, proof rule,recursive programs, iterative programs.C4.19 4.22 5.21 5.24
2982 | The Storage Requirement in Precedence Parsing | Bertsch, E..Kprecedence parsing, storage requirement, value table.C4.12 5.22
2983 | A Comparison of Next-fit, First-fit, and Best-fit | Bays, C..Kmemory allocation, first-fit, best-fit, next-fit.C4.32 4.35
2984 | Cost/Utilization: A Measure of System Performance | A method is presented for evaluating computersystem performance in terms of a cost/utilization factor and a measure of imbalance.  These coefficientsindicate the extent to which the total system cost is effectively utilized.  The method includes atechnique for the visual representation of system performance. | Borovits, I.Ein-Dor, P..Kcomputer system, performance evaluation, cost/utilization, system balance.C2.44
2985 | Effects of Chargeout on User/Manager Attitudes | The relationship of in ternal pricing systemsfor computer services (chargeout systems) and user management attitudes about their computer-basedinformation systems is investigated. Evidence is provided that the relationship conforms to a generalpattern that would be expected from the hypothesis of the four stages of EDP growth [15].  The results alsoindicate that the chargeout systems characteristic of advanced EDP stage environments are associated withrelatively high levels of positive user attitudes and marked increases in EDP training for users. Both factorsare important to the user/manager involvement necessary for effective control of computer-based systems. Development and main tenance of computer-based systems is asserted to be a category of organizationalchange.  A "felt need" for the change on the part of the user/manager is prerequisite to any change takingplace.  The research methods of behavioral science are applied to investigate the user/managerenvironment and the effects of chargeout. | Nolan, R. L..Kcomputer management, computer budget,chargeout, stage hypothesis, control.C2.41 2.43 3.50
2986 | Operations on Sparse Relations | Various computations on relations, Boolean matrices,or directed graphs, such as the computation of precedence relations for a context-free grammar, can bedone by a practical algorithm that is asymptotically faster than those in common use.  For example, how to computeoperator precedence or Wirth-Weber precedence relations in O(n^2) steps is shown, as well as how tocompute linear precedence functions in O(n^2) steps is shown, as well as how to compute linear precedencefunctions in O(n) steps, where n is the size of a grammer.  The heart of the algorithms is a generaltheorem giving sufficient conditions under which an expression whose operands are sparse relations andwhose operators are composition, transitive closure, union, and inverse, can be computed efficiently. | Hunt, H. B. IIISzymanski, T. G.Ullman, J. D..Kcomputational complexity, sparse relation, Booleanmatrix, directed graph, Wirth-Weber precedence relation, linear precedence function, SLRgrammar, T-canonical precedence relation.C4.12 5.23 5.25
2987 | Representation of Many-Sided Polygonsand Polygonal Lines for Rapid Processing | A representation for polygons and polygonallines is described which allows sets of consecutive sides to be collectively examined.  The set of sides arearranged in a binary tree hierarchy by inclusion.  A fast algorithm for testing the inclusion of a poin tin a many-sided polygon is given.  The speed of the algorithm is discussed for both ideal and practicalexamples.  It is shown that the poin ts of intersection of two polygonal lines can be located by what is essentiallya binary tree search.  The algorithm and a practical example are discussed.  The representationovercomes many of the disadvantages associated with the various fixed-grid methods for representing curves and regions | Burton W..Kboundary line representation, cartography, computergraphics computer-searchable structures, contour representation, geographic information processing, graphicdata retrieval, in tersection of curves, line-drawing processing, poin ts in polygons, regional boundaryrepresentation, spatial information.C3.14 3.23 3.30 3.79 8.2
2988 | Memory Management and Response Time | This paper presents a computationally tractablemethodology for including accurately the effects of finite memory size and workload memory requirementsin queueing network models of computer systems.  Empirical analyses and analytic studies based on applyingthis methodology to an actual multiaccess in teractive system are reported.  Relations between workloadvariables such as memory requirement distribution and job swap time, and performance measures such as responsetime and memory utilization are graphically displayed. A multiphase, analytically soluble model isproposed as being broadly applicable to the analysis of in teractive computer systems which use nonpaged memories. | Brown, R. M.Browne, J. C.Chandy, K. M..Kmemory management, system performance, queueingnetwork models, in teractive computer systems.C4.32
2989 | Empirical Evaluation of Some Featuresof Instruction Set Processor Architectures | This paper presents methods for empirical evaluationof features of Instruction Set Processors (ISPs).  ISP features are evaluated in terms of the timeused or saved by having or not having the feature.  The methods are based on analysis of traces of programexecutions.  The concept of a register life is in troduced, and used to answer questions like: How manyregisters are used simultaneously? How many would be sufficient all of the time? Most of the time? Whatwould the overhead be if the number of registers were reduced? What are registers used for during theirlives? The paper also discusses the problem of detecting desirable but non-existing instructions. Otherproblems are briefly discussed.  Experimental results are presented, obtained by analyzing 41programs running on the DEC system 10 ISP. | Lunde, A..Kcomputer architecture, program behavior, instructionsets, op code utilization, register structures, register utilization, simultaneous registerlives, instruction tracing, execution time.C6.20 6.21 6.33
2990 | Effective Information Retrieval Using Term Accuracy | The performance of information retrieval systemscan be evaluated in a number of different ways.  Much of the published evaluation work is basedon measuring the retrieval performance of an average user query.  Unfortunately, formal proofs are difficultto construct for the average case.  In the present study, retrieval evaluation is based on optimizing theperformance of a specific user query.  The concept of query term accuracy is in troduced as the probabilityof occurrence of a query term in the documents relevant to that query.  By relating term accuracyto the frequency of occurrence of the term in the documents of a collection it is possible to give formalproofs of the effectiveness with respect to a given user query of a number of automatic indexing systemsthat have been used successfully in experimental situations.  Among these are inverse document frequencyweighting, thesaurus construction, and phrase generation. | Yu, C. T.Salton, G..Kinformation retrieval, automatic indexing, contentanalysis, term accuracy, frequency weighting, thesaurus and phrase transformations.C3.71 3.72 3.75
2991 | Improving the Access Time for Random Access Files | Clustering in the key set is decreased bysmoothing the key-to-address transformation, and by adding shadow buckets to an open chaining file.  Thekeys are pre-hashed before the address division, to remove the effect of sequential properties in thekey set.  Shadow buckets in the key search sequence reduce the effect of nonuniformity in file loading,and decrease the number of maximum probes needed to locate a record.  The combined effects of these techniqueslead to improved file performance for secondary storage devices, as shown by empirical studies. | Clapson, P..Khashing, hashing techniques, hashing methods, hashcoding, keys, key transformation, key-to-address transformation, direct addressing, direct access, directaccess method, randomizing, random access, file addressing, file organizations, file structures, scatterstorage, search method, collisions, synonyms, clustering, information retrieval, open addressing, openchaining, buckets, bucket size, shadow buckets, combinatorics.C3.7 3.72 3.73 3.74 4.9 5.39
2992 | A Numbering System for Binary Trees | Knott, G. D..Kbinary trees, permutations, binary search trees, ranking function.C3.79 5.39
2993 | Occurrences of Cycling and Other PhenomenaArising in a Class of Linear Programming Models | An investigation into the average queue sizefor a certain class of queues has resulted in the formulation of linear programming problems whichare ill-conditioned in some cases.  In attempting to solve these linear programming models, using IBM'sMPS package, instances of cycling were encountered.  Small perturbations in the input data resulted in problemswhich did not cycle.  This fact, plus several other observed phenomena suggest that the primary reasonthat cycling is not known to occur more frequently is the round-off errors in the computations perturbthe problem sufficiently to prevent cycling (or at least to prevent indefinite cycling).  In one case maximizingand minimizing an objective function subject to the same constrain t set was attempted, but MPS solvedonly one of these while giving an indication of infeasibility for the other. | Kotiah, T. C. T.Steinberg, D. I..Klinear programming, cycling, queueing models.C5.41 5.9
2994 | A Linear Algorithm for Incremental Digital Display of Circular Arcs | Circular arcs can be drawn on an incrementaldisplay device such as a cathode ray tube, digital plotter, or matrix prin ter using only sign testing andelementary addition and subtraction.  This paper describes methodology for producing dot orstep patterns closet to the true circle. | Bresenham, J..Kgraphics, circle drawing, step generation, dotgeneration, incremental digital plotting, raster display, integer arithmetic, circle algorithm.C4.41 8.2
2995 | Decomposability, Instabilities, and Saturationin Multiprogramming Systems (Corrigendum) | Courtois, P. J.
2996 | Transient-Free Working-Set Statistics | Transient-free average working set size and transient-freemissing-page rate for a finite sample of a reference string are defined.  Use of these statisticsis appropriate if the contents of the working set at the start of the recorded string are unknown. If a certain stationarity condition holds, these statistics provide unbiased estimates of expected working-setsizes, missing-page probabilities, and in terreference distance probabilities.  Two other pairsof estimators are shown to be biased.  Expressions for the transient-free statistics are obtained in termsof in terval statistics. Several methods of computation are discussed, the usefulness of each depending on lengthof the sample, number of distinct references, and the amount of main storage available to the computerperforming the calculations.  In particular, methods are described for handling long stringscontaining many distinct page names. | Easton, M. C.Bennett, B. T..Kworking set, estimation program behavior.C4.3 4.6 5.5
2997 | Convex Hulls of Finite Sets of Poin ts in Two and Three Dimensions | The convex hulls of sets of n poin ts in twoand three dimensions can be determined with O(n log n) operations.  The presented algorithms use the "divideand conquer" technique and recursively apply a merge procedure for two nonin tersecting convex hulls. Since any convex hull algorithm requires at least O(n log n) operations, the time complexity of theproposed algorithms is optimal within a multiplicative constant. | Preparata, F. P.Hong, S. J..Kcomputational complexity, convex hull, optimal algorithms,planar set of poin ts, spatial set of poin ts.C4.49 5.25 5.32
2998 | An Empirical Study of List Structure in Lisp | Static measurements of the list structure offive large Lisp programs are reported and analyzed in this paper.  These measurements reveal substantialregularity, or predictability, among poin ters to atoms and especially among poin ters to lists.  Pointersto atoms are found to obey, roughly, Zipf's law, which governs word frequencies in natural languages; poin tersto lists usually poin t to a location physically nearby in memory.  The use of such regularities in thespace-efficient representation of list structure is discussed.  Linearization of lists, whereby successivecdrs (or cars) are placed in consecutive memory locations whenever possible, greatly strengthens theobserved regularity of list structure.  It is shown that under some reasonable assumptions, the entropy orinformation content of a car-cdr pair in the programs measured is about 10 to 15 bits before linearization,and about 7 to 12 bits after. | Clark, D. W.Green, C. C..Klist structure measurement, Lisp, list structureregularity, poin ter compression, Zipf's law, list linearization, poin ter entropy.C3.69 4.29 4.34 4.6 5.6
2999 | An Approach to Multidimensional Data Array Processing by Computer | Some recent work on the development of general-purposecomputer-based statistical and data processing capabilities for handling multidimensionalarrays of data is presented. Attention is first given to some of the general problems of multidimensionaltable and array processing.  This is followed by a summary of some recent developments in array processingcapabilities at the World Bank, in particular, the system identified as WRAPS(World BankRetrieval and Array Processing System). | Muller, M. E..Karray processing, table processing, statisticalanalysis, data retrieval, data processing, syntax for data structures, computing techniques, time series, cross tabulation.C3.10 3.20 3.30 3.70 4.0
3000 | Segment Sizes and Lifetimes in Algol 60 Programs | The characteristics of the virtual memory requirementsof a sample of Algol 60 programs have been measured.  Distributions are presented for thesizesof memory requests and for their holding times (lifetimes).  The results are presented in terms of Johnston'scontour model and a simple abstract machine.  They provide new empirical evidence of certain aspectsof the construction and behavior of real programs, and some of their implications for the design of virtualmemory systems are presented and discussed. | Batson, A. P.Brundage, R. E..Kvirtual memory, program behavior, segmentation,storage allocation, Algol 60, contour model.C4.22 4.34 4.45 6.21
3001 | Detection of Combined Occurrences | In this paper it is supposed that the variablesX1,...,Xn each have finite range with the variable Xi taking on Pi possible values and that the values of thevariables are changing with time.  It is supposed further that it is desired to detect occurrences in whichsome subset of the variables achieve particular values.  Finally, it is supposed that the problem involvesthe detection of a large number of combined occurrences for a large number of changes of values ofvariables.  Two efficient solutions for this problem are described.  Both methods have the unusual propertyof being faster for systems where the sum P1 + ... + Pn is larger. The first solution is error-freeand suitable for most cases.  The second solution is slightly more elegant and allows negation as wellas conjunction, but is subject to the possibility of errors.  An error analysis is given for the secondmethod and an empirical study is reported. | Zobrist, A. L.Carlson, F. R. Jr..Kcoding, hash coding, retrieval, secondary keys, patternrecognition, artificial in telligence, demons, n-tuples, sorting, chess.C3.63 5.31
3002 | A Record and File Partitioning Model | One of the main objectives in the design ofa file system is the reduction of storage and data transfer costs.  This paper presents a model in whichseveral  requests access the file system, and each request requires information from one or more variablelength data-items.  The probabilities of access and the distribution of each data-item's length are assumedto be known, and to be mutually independent. The file system uses one or more storage devices, andeach record may be partitioned into subrecords that are stored on different devices.  One of the subrecordsis designated as the primary record; when a request for a record is made, the primary record isfirst accessed, and other subrecords are accessed only if the pertinent information is not stored in theprimary record.  The model that is presented in this paper, both as a nonlinear programming model anda mixed integer programming model, is a very general one; several types of file systems may be derived fromit by an appropriate selection of its parameters.  This model has already been used in the optimization oflibrary routines' storage at a large scale operating system. | Babad, J. M..Kfile system, file design, file partitioning, record partitioning.C3.73
3003 | A Survey of the Literature in ComputerScience Education Since Curriculum '68 | A bibliography of approximately two hundredreferences in computer science education appearing in the literature since the publication of "Curriculum'68" is presented.  The bibliography itself is preceded by brief descriptive materials organizing thereferences into the categories of survey reports, activities of professional organizations, philosophyof programs, description of  programs, description of courses and other materials. | Austing, R. H.Barnes, B. H..Keducation, computer science, curricula.C1.5
3004 | Structured Programming in Cobol: An Approach for Application Programmers | Techniques for designing and writing Cobol programsare presented.  Previous work in structured programming is drawn upon and adapted.  The presentationis informal: the terminology is nonmathematical as far as possible, no theorems are proved, and examplesare used frequently.  Top-down program design is implemented through the use of structured flowcharts,disciplined specifications, and step by step verification.  A well-formed Cobol program is defined. The proper use of the GO TO and other Cobol coding practices are discussed. | Van Gelder, A..Kstructured programming, top-down, well-formed program,GO TO statement, repeat statement, flowchart, application programming, Cobol, software reliability, program verification.C4.0 4.22 5.24
3005 | Implications of Structured Programming for Machine Architecture | Based on an empirical study of more than 10,000lines of program text written in a GOTO-less language, a machine architecture specifically designed forstructured programs is proposed.  Since assignment, CALL, RETURN, and IF statements together account for93 percent of all executable statements, special care is given to ensure that these statements can be implementedefficiently.  A highly compact instruction encoding scheme is presented, which can reduce programsize by a factor of 3.  Unlike a Huffman code, which utilizes variable length fields, this method usesonly fixed length (1-byte) op code and address fields.  The most frequent instructions consist of asingle 1-byte field.  As a consequence, instruction decoding time is minimized, and the machine isefficient with respect to both space and time. | Tanenbaum, A.S..Kmachine architecture, computer architecture, computerorganization, instruction set design, program characteristics.C4.12 4.22 4.9 6.21
3006 | Anomalies with Variable Partition Paging Algorithms | Five types of anomalous behavior which mayoccur in paged virtual memory operating systems a redefined.  One type of anomaly, for example, concernsthe fact that, with certain reference strings and paging algorithms, an increase in mean memory allocationmay result in an increase in fault rate.  Two paging algorithms, are examined in terms of theiranomaly potential, and reference string examples of various anomalies are presented.  Two paging algorithmproperties, the inclusion property and the generalized inclusion property, are discussed and theanomaly implications of these properties presented. | Franklin, M.A.Graham, G.S.Gupta, R.K..Kanomaly, memory management, program behavior, stackalgorithms, virtual memory, working set, page fault frequency, paging algorithms.C4.32 4.35 4.6 8.1
3007 | Complexity of Computations (Corrigendum) | Rabin, M.O.
3008 | Preserving Average Proximity in Arrays | Programmers and data structure designers are oftenforced to choose between alternative structures.  In storing these structures, preserving logical adjacenciesor "proximity" is usually an important consideration.  The combinatorial problem of storing arrays as variouskinds of list structures is examined.  Embeddings of graphs are used to model the loss of proximity involvedin such storage schemes, and an elementary proof that arrays cannot be stored as linear lists withbounded loss of proximity is presented.  Average loss of proximity is then considered, and it is shownthat arrays cannot be stored as linear lists with only bounded loss of average proximity, but can be sostored in binary trees.  The former result implies, for instance, that row major order is an asymptoticallyoptimal storage strategy for arrays. | DeMillo, R.A.Eisenstat, S.C.Lipton, R.J..Karrays, graph embedding, linear lists,proximity, average proximity, trees.C4.34 5.24 5.25 5.32
3009 | Insertions and Deletions In One-Sided Height-Balanced Trees | Recently Hirschberg has established that insertionsinto one-sided height-balanced trees can be done in 0(log^2N) steps.  It is proved here that deletionscan also be performed in 0(log^2N) steps, which answers the open problem posed by Hirschberg. | Kosaraju, S.R..KAVL trees, balanced trees, binary search, dynamic balancing.C3.73 3.74 4.34 5.25 5.31
3010 | Value Orientation of Computer Science Students | Technological and nontechnological value orientationsare investigated with special attention to the complexity of value structures.  Computer sciencestudents, who are closely associated with technology, contrast with social science students, who are oftentechnologically aloof.  This is confirmed by the value ratings of 313 students at the University of Minnesotain 1972.  Computer science majors were found to have a more complex value structure than social science majors. | Anderson, R.E..Kvalues, attitudes, students, public, social effects.C2.11 2.12
3011 | Management Utilization of Computers in American Local Governments | Traditional concepts of management informationsystems (MIS) bear little relation to the information systems currently in use by top management in most US localgovernments.  What exists is management-oriented computing, involving the use of relatively unsophisticatedapplications.  Despite the unsophisticated nature of these systems, management use of computing issurprisingly common, but also varied in its extent among local governments.  Management computing is mostprevalent in those governments with professional management practices where top management is supportiveof computing and tends to control computing decisions and where department users have less control over designand implementation activities.  Finally, management computing clearly has impacts for top managers, mostlyinvolving improvements in decision information. | Dutton, W.H.Kraemer, K.L..Kcomputer utilization, management information system,American local government, city government computers, county government computers, computer impacts, management computing.C2.0 2.1 2.11 2.19 2.4 2.45 2.9 3.5 3.53
3012 | The Use of an Interactive Information Storageand Retrieval System in Medical Research | This paper presents the results of a studyof the use of an interactive computerized storage and retrieval system.  A monitor built into the computersystem provided usage data for the study.  Additional data on user reactions were gathe red from a questionnaire. The results show the important role played by frequently chosen laboratory reference leaders in influencingthe use of this system.  The implications of the study for the design of similar systems are discussed. | Lucas, H.C.Jr..Kimplementation, system use, information storage and retrieval system.C2.10 3.50 3.72
3013 | Some New Methods of Detecting Step Edges in Digital Pictures | This note describes two operators that respondto step edges, but not to ramps.  The first is similar to the digital Laplacian, but uses the max, ratherthan the sum, of the x and y second differences.  The second uses the difference between the mean andmedian gray levels in a neighborhood.  The outputs obtained from these operators applied to a set of testpictures are compared with each other and with the standard digital Laplacian and gradient.  A thirdoperator, which uses the distance between the center and centroid of a neighborhood as an edge value, is alsobriefly considered; it turns out to be equivalent to one of the standard digital approximations to the gradient. | Schachter, B.J.Rosenfeld, A..Kimage processing, pattern recognition, edge detection.C3.63
3014 | Is "Sometime" Sometimes Better than "Always"? (IntermittentAssertions in Proving Program Correctness) | This paper explores a technique for proving thecorrectness and termination of programs simultaneously.  This approach, the intermittent-assertion method, involvesdocumenting the program with assertions that must be true at some time when control passes throughthe corresponding point, but that need not be true every time.  The method, introduced by Burstall, promisesto provide a valuable complement to the more conventional methods.  The intermittent-assertion methodis presented with a number of examples of correctness and termination proofs.  Some of these proofs are markedlysimpler than their conventional counterparts.  On the other hand, it is shown that a proof of correctnessor termination by any of the conventional techniques can be rephrased directly as a proof usingintermittent assertions.  Finally, it is shown how the intermittent-assertion method can be appliedto prove the validity of program transformations and the correctness of continuously operating programs. | Manna, Z.Waldinger, R..Kintermittent assertions, correctness of programs,termination of programs, program verification, program transformation, continuously operating programs..C5.24
3015 | Relaxation Methods for Image Reconstruction | The problem of recovering an image (a functionof two variables) from experimentally available integrals of its grayness over thin strips is of greatimportance in a large number of scientific areas.  An important version of the problem in medicine isthat of obtaining the exact density distribution within the human body from X-ray projections.One approachthat has been taken to solve this problem consists of translating the available information intoa system of linear inequalities.  The size and the sparsity of the resulting system (typically, 25,000inequalities with fewer than 1 percent of the coefficients nonzero) makes methods using successiverelaxations computationally attractive, as compared to other ways of solving systems of inequalities. In this paper, it is shown that, for a consistent system of linear inequalities, any sequence of relaxarion parameterslying strictly between 0 and 2 generates a sequence of vectors which converges to a solution. Under the same assumptions, for a system of linear equations, the relaxation method converges to the minimumnorm solution.  Previously proposed techniquesare shown to be special cases of our procedure withdifferent choices of relaxation parameters.  The practical consequences for image reconstruction of thechoice of the relaxation parameters are discussed. | Herman, G.T.Lent, A.Lutz, P.H..Kbiomedical image processing, image reconstruction,X-ray tomography, mathematical programming, linear inequalities, relaxation techniques.C3.12 3.17 3.34 3.63 5.14 5.18 5.41
3016 | A Comparison of Numerical Techniques in Markov Modeling | This paper presents several numerical methods whichmay be used to obtain the stationary probability vectors of Markovian models.  An example of a nearlydecomposable system is considered, and the results obtained by the different methods examined.  A postmortem reveals why standard techniques often fail to yield the correct results.  Finally, a means of estimatingthe error inherent in the decomposition of certain models is presented. | Stewart, W.J..KMarkov models, numerical techniques, simultaneousiteration, near-decomposability.C4.6 5.14 8.1
3017 | B-trees Re-examined | The B-tree and its variants have, with increasingfrequency, been proposed as a basic storage structure for multiuser database applications.  Here,three potential problems which must be dealt with in such a structure that do not arise in more traditionalstatic directory structures are indicated.  One problem is a possible performance penalty. | Held, G.Stonebraker, M..KB-tree, directory, static directory, dynamicdirectory, index sequential access method.C3.70 3.73 3.74 4.33 4.34
3018 | Covering Edges by Cliques with Regard toKeyword Conflicts and Intersection Graphs | Kellerman has presented a method for determiningkeyword conflicts and described a heuristic algorithm which solves a certain combinatorial optimizationproblem in connection with this method.  This optimization problem is here shown to be equivalentto the problem of covering the edges of a graph by complete subgraphs with the objective of minimizingthe number of complete subgraphs.  A relationship between this edge-clique-cover problem and the graph coloringproblem is established which allows algorithms for either one of these problems to be constructedfrom algorithm for the other.  As consequences of this relationship, the keyword conflict problem and theedge-clique-cover problem are shown to be NP-complete, and if P=/NP then they do not admit polynomial-time approximationalgorithms which always produce solutions within a factor less than 2 from the optimum. | Kou, L.T.Stockmeyer, L.J.Wong, C.K.Watson, T.J..Kkeyword conflicts, intersection graphs, node cliquecover, edge clique cover, computational complexity, NP-complete problems, polynomial-time heuristics.C4.12 5.25 5.32
3019 | The GRE Advanced Test in Computer Science | Austing, R.H.
3020 | Systematic Recursion Removal | The recursion removal algorithm presentedby Strong and Walker is amplified and applied to a relatively complex PL/I program.  The aim is to demonstratesystematic recursion-removal techniques on something more complex than Knuth's "sturdy toddler"and to obtain measurements of the cost of procedure linkage in PL/I and the savings achievable via procedureintegration in the presence of recursion.  First, the paper describes the recursion-removal process and theexample on which it will be illustrated.  Recursion removal is then applied to the two major parts of thisexample and the final result of the process is displayed.  Our performance comparison results are presentedand our conclusions are briefly discussed.  | Auslander, M.A.Strong, H.R..Krecursion removal, recursion elimination, optimization,procedure linkage, procedure integration.C4.19 4.49 4.9 5.24
3021 | A Method for Obtaining Digital Signatures and Public-Key Cryptosystems | An encryption method is presented with the novelproperty that publicly revealing an encryption key does not thereby reveal the corresponding decryptionkey.  This has two important consequences: (1) Couriers or other secure means are not needed to transmitkeys, since a message can be enciphered using an encryption key publicly revealed by the intended recipient. Only he can decipher the message, since only he knows the corresponding decryption key.  (2)A message can be "signed" using a privately held decryption key.  Anyone can verify this signature usingthe corresponding publicly revealed encryption key.  Signatures cannot be forged, and a signer cannotlater deny the validity of his signature.  This has obvious applications in "electronic mail" and "electronicfunds transfer" systems.  A message is encrypted by representing it as a number M, raisingM to a publicly specified power e, and then taking the remainder when the result is divided by the publiclyspecified product, n, of two large secret prime numbers p and q.  Decryption is similar;only a different,secret, power d is used, where e * d = 1 (mod(p-1) * (q-1)).  the security of the system rests in part onthe difficulty of factoring the published divisor, n. | Rivest, R.L.Shamir, A.Adleman, L..Kdigital signatures, public-key cryptosystems,privacy, authentication, security, factorization, prime number, electronic mail, message-passing,electronic funds transfer, cryptography..C2.12 3.15 3.50 3.81 5.25
3022 | Computer Science Faculties: The Current Status of Minorities and Women | The results of a survey conducted in the fallof 1975 to determine the status of women and minority faculty members in academic computer scienceare presented.  Faculty members were compared with respect to professional background, salaries, teachingload, publication records, and research grants.  Analysis of the data indicated that the over-all verdictis one of general equality among women, minorities, and men. | Mamrak, S.A.Montanelli, R.G.Jr..Kdiscrimination against women, discrimination againstminorities, faculty, computer science degree programs, affirmative action, teaching loads, salaries, publications.C1.52 1.53 2.2 2.3
3023 | Architecture of the IBM System/370 | This paper discusses the design considerationsfor the architectural extensions that distinguish System/370 from System/360.  It comments on some experienceswith the original objectives for System/360 and on the efforts to achieve them, and it describes thereasons and objectives for extending the architecture. It covers virtual storage, program control, data-manipulationinstructions, timing facilities, multiprocessing, debugging and monitoring, error handling, and input/outputoperations.  A final section tabulates some of the important parameters of the various IBMmachines which implement the architecture. | Case, R.P.Padges, A..Kcomputer systems, architecture, instructionsets, virtual storage, error handling.C6.0 6.21
3024 | The CRAY-1 Computer System | This paper describes the CRAY-1, discussesthe evolution of its architecture, and gives an account of some of the problems that were overcome duringits manufacture.  The CRAY-1 is the only computer to have been built to date that satisfies ERDA's ClassVI requirement (a computer capable of processing from 20 to 60 million floating point operations persecond) [1].  The CRAY-1's Fortran compiler (CFT) is designed to give the scientific user immediate accessto the benefits of the CRAY-1's vector processing architecture.  An optimizing compiler, CFT, "vectorizes"innermost DO loops.  Compatible with the ANSI 1966 Fortran Standard and with many commonly supportedFortran extensions, CFT does not require any source program modifications or the use of additional nonstandardFortran statements to achieve vectorization.  Thus the user's investment of hundreds of man monthsof effort to develop Fortran programs for other contemporary computers is protected. | Russell, R.M..Karchitecture, computer systems.C1.2 6.2 6.3
3025 | The Evolution of the DEC system 10 | The DEC system 10, also known as the PDP-10, evolvedfrom the PDP-6 (circa 1963) over five generations of implementations to presently include systems coveringa price range of five to one.  The origin and evolution of the hardware, operating system, and languagesare described in terms of technological change, user requirements, and user developments. The PDP-10'scontributions to computing technology include: accelerating the transition from batch oriented to timesharing computing systems; transferring hardware technology within DEC (and elsewhere) to minicomputerdesign and manufacturing; supporting minicomputer hardware and software development; and serving as amodel for single user and timeshared interactive minicomputer/microcomputer systems. | Bell, C.G.Kotok, A.Hastings, T.N.Hill, R..Kcomputer structures, architecture, operating system, timesharing.C4.32 6.21 6.3
3026 | The Evolution of the Sperry Univac 1100Series: A His tory, Analysis, and Projection | The 1100 series systems are Sperry Univac'slarge-scale main frame computer systems.  Beginning with the 1107 in 1962, the 1100 series has progressedthrough a succession of eight compatible computer models to the latest system, the 1100/80, introducedin 1977.  The 1100 series hardware architecture is based on a 36-bit word, ones complement structurewhich obtains one operand from storage and one from a high-speed register, or two operands from high-speedregisters.  The 1100 Operating System is designed to support a symmetrical multiprocessor configurationsimultaneously providing multiprogrammed batch, timesharing, and transaction environments. | Borgherson, B.R.Hanson, M.L.Hartley, P.A..K1100 computer series, computer architecture, multiprocessinglanguages, data management systems, end user facilities, executive control software.C1.3 4.0 4.20 4.30 4.32 4.33 4.35 6.0 6.21 6.30
3027 | The Development of the MU5 Computer System | Following a brief outline of the backgroundof the MU5 project, the aims and ideas for MU5 are discussed.  A description is then given of the instructionset, which includes a number of features conducive to the production of efficient compiled codefrom high-level language source programs.  The design of the processor is then traced from the initialideas for an associatively addressed "name store" to the final multistage pipeline structure involvinga prediction mechanism for instruction prefetching and a function queue for array element accessing.  Anoverall view of the complete MU5 complex is presented together with a brief indication of its performance. | Ibbett, R.N.Capon, P.C..Karchitecture, naming, virtual storage, instructionset, descriptor, pipeline, instruction buffering, associative storage, function queue, computer complex.C4.10 4.12 6.21 6.33
3028 | The Manchester Mark I and Atlas: A His torical Perspective | In 30 years of computer design at Manchester Universitytwo systems stand out: the Mark I (developed over the period 1946-49) and the Atlas (1955-62). This paper places each computer in its his torical context and then describes the architecture and systemsoftware in present-day terminology.  Several design concepts such as address-generation and storemanagement have evolved in the progression from Mark I to Atlas.  The wider impact of Manchester innovationsin these and other areas is discussed, and the contemporary performance of the Mark I and Atlas is evaluated. | Lavington, S.H..Karchitecture, index registers, paging, virtualstorage, extra codes, compilers, operating systems, Ferranti, Manchester Mark I, Atlas, ICL.C1.2 4.22 4.32 6.21 6.30
3029 | Foreword to the Special Issue on Computer Architecture | Fuller,S.H.
3030 | An Example of Hierarchical Design and Proof | Hierarchical programming is being increasinglyrecognized as helpful in the construction of large programs.  Users of hierarchical techniques claimor predict substantial increases in productivity and in the reliability of the programs produced.  In thispaper we describe a formal method for hierarchical program specification, implementation, and proof.  Weapply this method to a significant list processing problem and also discuss a number of extensions to currentprogramming languages that ease hierarchical program design and proof. | Spitzen, J.M.Levitt, K.N.Robinson, L..KProgram verification, specification, data abstraction,software modules, hierarchical structures.C4.0 4.6 5.21 5.24
3031 | Abstract Data Types and Software Validation | A data abstraction can be naturally specifiedusing algebraic axioms.  The virtue of these axioms is that they permit a representation-independentformal specification of a data type.  An example is given which shows how to employ algebraic axioms atsuccessive levels of implementation.  The  major thrust of the paper is twofold.  First, it is shown howthe use of algebraic axiomatizations can simplify the process of proving the correctness of an implementationof an abstract data type.  Second, semi-automatic tools are described which can be used both to automatesuch proofs of correctness and to derive an immediate implementation from the axioms.  This implementationallows for limited testing of programs at design time, before a conventional implementation is accomplished. | Guttag, J.V.Horowitz, E.Musser, D.R..KAbstract data type, correctness proof,data type, data structure, specification .C4.34 5.24
3032 | Reverse Path Forwarding of Broadcast Packets | A broadcast packet is for delivery to allnodes of a network.  Algorithms for accomplishing this delivery through a store-and-forward packet switching computer network include (1) transmission of separately addressed packets. (2) multidestinationaddressing, (3) hot potato forwarding,(4) spanning tree forwarding, and (5) source based forwarding.  Tothis list of algorithms we add (6) reverse path forwarding, a broadcast routing method which exploitsrouting procedures and data structures already available for packet switching.  Reverse path forwardingis a practical algorithm for broadcast routing  in store-and-forward packet switching computer networks. The algorithm is described as being practical  because it is not optimal according to metrics developedfor its analysis in this paper, and also because it can be implemented in existing networks with less complexitythan that required for the known alternatives.  | Dalal, Y.K.Metcalfe, R.M..KReverse path forwarding, broadcast packets, routing,computer networks, store-and-forward packet switching, broadcast protocols.C3.81 4.32 5.32
3033 | Optimizing Decision Trees Through Heuristically Guided Search | Optimal decision table conversion has beentackled in the literature using two approaches, dynamic programming and branch-and-bound.  The formertechnique is quite effective, but its time and space requirements are independent of how "easy" thegiven table is.  Furthermore, it cannot be used to produce good, quasi optimal solutions.  The branch-and-boundtechnique uses a good heuristic to direct the search, but is cluttered up by an enormous searchspace, since the number of solutions increases with the number of test variables according to a double exponential.  In this paper we suggest a heuristically guided top-down search algorithm which, like dynamicprogramming, recognizes identical subproblems but which can be used to find both optimal and quasi optimalsolutions.  The heuristic search method introduced in this paper combines the positive aspects of the abovetwo techniques.  Compressed tables with a large number of variables can be handled without deriving expanded tables first.  | Martelli, A.Montanari, U..KDecision table, optimal decision table conversion,decision tree, heuristic search, AND/OR graphs, dynamic programming, branch-and-bound.C3.59 3.66 5.42 8.3
3034 | Detection of Logical Errors in Decision Table Programs | In this paper an algorithm to detect logicalerrors in a limited-entry decision table and in loop-free programs with embedded decision tables is developed. All the conditions in the decision tables are assumed to be inequalities or equalities relatinglinear expressions.  It is also assumed that actions in a decision table are linear in variables which occurin the condition stub of the decision table (or tables) to which control is transferred from the table. The algorithm is based on determining whether a set of linear inequalities has or does not have asolution.  The algorithm described in the paper is implemented in Fortran IV. | Ibramsha, M.Rajaraman, V..KError diagnostics, decision tables.C3.5 4.1 4.42 5.24
3035 | A Strategic Planning Methodology for the ComputingEffort in Higher Education: An Empirical Evaluation | The findings of a study designed to addressthe pressing problems associated with the strategic planning of the computing effort in higher educationare presented here.  A planning methodology was developed and tested through implementation at a university. Two years after the methodology was implemented, the effectiveness of the planning methodology was assessedin terms of the improvement of the delivery of computing services to the major institutional rolesof instruction, research, and administration.  Two control institutions were employed to contrast theimprovements at the test institution.  The results of the research indicate the planning methodology significantlyenhanced the delivery of computing services.  | Wetherbe, J.C.Dock, V.T..KComputer management, computer budget,university computing, computer planning.C2.41 3.51
3036 | The Selection of Optimal Tab Settings | A new generation of computer terminals allowstab settings to be selected and set by the computer.  This feature can be used to reduce the number of charactersthat are needed to represent a document for transmission and printing.  In this note, an algorithmis given for selecting the optimal set of tab stops for minimizing the number of characters transmitted. An implementation of the algorithm has reduced the number of characters transmitted by from7 to 30 percent, but requires a prepass through the document to compute a matrix used in determiningthe optimal set tab stops.  The use of fixed tab stops, as a heuristic alternative, can achieveabout 80 percent of optimal with no prepass.  | Peterson, J.L.Bitner, J.R.Howard, J.H..KTabs, word processing, dynamic programming.C3.9 4.4
3037 | A Linear Sieve Algorithm for Finding Prime Numbers | A new algorithm is presented for finding allprimes between 2 and n.  The algorithm executes in time proportional to n (assuming that multiplicationof integers not larger than n can be performed in unit time).  The method has the same arithmetic complexityas the algorithm presented by Mairson [6]; however, our version is perhaps simpler and more elegant. It is also easily extended to find the prime factorization of all integers between 2 and n in time proportional to n.    | Gries, D.Misra, J..KPrimes, algorithms, data structures.C5.25 5.24 5.29
3038 | Using Encryption for Authentication in Large Networks of Computers | Use of encryption to achieve authenticatedcommunication in computer networks is discussed.  Example protocols are presented for the establishmentof authenticated connections, for the management of authenticated mail, and for signature verificationand document integrity guarantee.  Both conventional and public-key encryption algorithms are considered as the basis for protocols. | Needham, R.M.Schroeder, M.D..KEncryption, security, authentication, networks, protocols,public-key cryptosystems, data encryption standard.C3.81 4.31 4.35
3039 | On-the-Fly Garbage Collection: An Exercise in Cooperation | As an example of cooperation between sequentialprocesses with very little mutual interference despite frequent manipulations of a large shared dataspace,  a technique is developed which allows nearly all of the activity needed for garbage detection and collectionto be performed by an additional processor operating con-currently with the processor devoted to thecomputation proper.  Exclusion and synchronization constraints have been kept as weak as could be achieved;the severe complexities engendered by doing so are illustrated.  | Dijkstra, E.W.Lamport, L.Martin, A.J.Scholten, C.S.Steffens, E.F.M..KMultiprocessing, fine-grained interleaving, cooperationbetween sequential processes with minimized mutual exclusion, program correctness for multiprogrammingtasks, garbage collection .C4.32 4.34 4.35 4.39 5.24
3040 | Synthesizing Constraint Expressions | A constraint network representation is presentedfor a combinatorial search problem: finding values for a set of variables subject to a set of constraints. A theory of consistency levels in such networks is formulated, which is related to problemsof backtrack tree search efficiency.  An algorithm is developed that can achieve any level of consistencydesired, in order to preprocess the problem for subsequent backtrack search, or to function as an alternativeto backtrack search by explicitly determining all solutions. | Freuder, E.C..KBacktrack, combinatorial algorithms, constraintnetworks, constraint satisfaction, graph coloring, network consistency, relaxation, scene labeling, search.C3.63 3.64 5.25 5.30 5.32
3041 | Median Split Trees: A Fast Lookup Technique for Frequently Occuring Keys | Split trees are a new technique for searching setsof keys with highly skewed frequency distributions.  A split tree is a binary search tree each node of whichcontains two key values-a node value which is a maximally frequent key in that subtree, and a splitvalue which partitions the remaining keys (with respect to their lexical ordering) between the left andright subtrees.  A median split tree (MST) uses the lexical median of a node's descendents as its splitvalue to force the search tree to be perfectly balanced, achieving both a space efficient representationof the tree and high search speed.  Unlike frequency ordered binary search trees, the cost of asuccessful search of an MST is log n bounded and very stable around minimal values.  Further, an MSTcan be built for a given key ordering and set of frequencies in time n log n, as opposed to n2 for anoptimum binary search tree.  A discussion of the application of MST's to dictionary lookup for English ispresented, and the performance obtained is contrasted with that of other techniques. | Sheil, B.A..KTree search, dictionary lookup, binary search, heaps,balanced trees, Zipf's Law, information retrieval.C3.74 5.25 5.39
3042 | Power Trees | The new class of Pk trees is presented, whereheight balance is maintained for the nodes Iying on particular paths.  The number of nodes of a Pk treeasymptotically grows as a power of the height, in the worst case.  A procedure for node insertion is given,and the class of trees  considered is restricted to IPk trees, which are buildable by such a procedure. The average behavior of such trees, studied by an extensive set of simulation runs, is close to thatof AVL trees.  In particular, the family of IPO trees whose main advantage is the reduced number ofrestructurings required after node insertion, is analyzed. | Luccio, F.Pagli, L..KBinary search trees, Pk trees, IPk trees, searchlength, node insertion, subtree rotation.C3.73 3.74 4.34 5.25 5.31
3043 | Distributed Processes: A Concurrent Programming Concept | A language concept for concurrent processeswithout common variables is introduced.  These processes communicate and synchronize by means of procedurecalls and guarded regions.  This concept is proposed for real-time applications controlled bymicrocomputer networks with distributed storage.  The paper gives several examples of distributed processesand shows that they include procedures, coroutines, classes, monitors, processes, semaphores, buffers, pathexpressions, and input/output as special cases. | Hansen, P..KConcurrent programming, distributed processes,microprocessor networks, nondeterminism, guarded regions, programming languages, process communicationand scheduling, sorting arrays, coroutines, classes, monitors, processes, semaphores, buffers, path expressions, input/output .C3.8 4.2 4.22 4.32 5.24
3044 | A Note on Conditional Expressions | Evaluation of a conditional expression may succeedeven when the "deciding predicate" diverges and the alternatives are records (or nodes) whose fields have different content. | Friedman, D.P.Wise, D.S..KParallel evaluation, suspending cons, Lisp, conditionalforms, if-then-else, ambiguous function,infinite structures.C4.2 4.13 4.32 5.24
3045 | A Simple Recovery-Only Procedure For SImple Precedence Parsers | A simple method is described enabling simpleprecedence parsers to recover from syntax errors.  No attempt to repair errors is made, yet parsing andmost semantic processing can continue.  The result is a good "first approximation" to syntax error handlingwith negligible increase in parsing time, space, and complexity of both the parser and its table generator.  | Ripley, D.G..KSyntax errors, error recovery, parsing,simple precedence, compilers, debugging.C4.12 4.42 5.23
3046 | Computer Generation of Gamma Random Variables - II | A rejection method is proposed for generatinggamma variates with nonintegral shape parameter a, a > 1. This method is similar to other methods givenby Fishman, Wallace, and Tadikamalla and is faster than these methods for a> 2.  The core storage requirementsand the programming effort for the proposed method are similar to those of Wallace's or Tadikamalla'smethods.  The computational times for the proposed method remain fairly constant for medium and largevalues of a and are superior to times obtained by Ahrens and Dieter's method for all values of a.  Theproposed method is simpler than Ahrens and Dieter's method. | Tadikamalla, P.R..KGamma variables, rejection method, computer methods.C5.5 8.1
3047 | Using Synthetic Images to Register Real Images with Surface Models | A number of image analysis tasks can benefitfrom registration of the image with a model of the surface being imaged.  Automatic navigation using visiblelight or radar images requires exact alignment of such images with digital terrain models.  In addition,automatic classification of terrain, using satellite imagery, requires such alignment to deal correctlywith the effects of varying sun angle and surface slope.  Even inspection techniques for certainindustrial parts may be improved by this means. We achieve the required alignment by matching the realimage with a synthetic image obtained from a surface model and known positions of the light sources.  Thesynthetic image intensity is calculated using the reflectance map, a convenient way of describing surface reflectionas a function of surface gradient.  We illustrate the technique using LANDSAT images and digital terrain models. | Horn, B.K.P.Bachman, B.L..KImage registration, synthetic images, surface models,automatic hill shading, digital terrain models, image transformation, image matching, shaded images .C3.63 3.11 3.14 8.2 3.83
3048 | Performance Evaluation of Highly ConcurrentComputers by Deterministic Simulation | Simulation is presented as a practical techniquefor performance evaluation of alternative configurations of highly concurrent computers.  A techniqueis described for constructing a detailed deterministic simulation model of a system.  In the modela control stream replaces the instruction and data streams of the real system.  Simulation of thesystem model yields the timing and resource usage statistics needed for performance evaluation, withoutthe necessity of emulating the system.  As a case study, the implementation of a simulator of a modelof the CPU-memory subsystem of the IBM 360/91 is described.  The results of evaluating some alternativesystem designs are discussed.  The experiments reveal that, for the case study, the major bottlenecksin the system are the memory unit and the fixed point unit.  Further, it appears that many of the sophisticatedpipelining and buffering technique simplemented in the architecture of the IBM 360/91 are of littlevalue when high-speed (cache) memory is used, as in the IBM 360/195. | Kumar, B.Davidson, E.S..KPerformance evaluation, deterministic simulation,control stream, concurrent computers.C6.20 8.1
3049 | A Simply Extended and Modified BatchEnvironment Graphical System (SEMBEGS) | SEMBEGS is a complete batch environment graphicalsystem containing components for handling graphical data files, for displaying the contents ofthese files on a variety of graphical hardware, and for performing graphical batch input operations. SEMBEGS is easy to extend and modify to meet the growing needs of a large batch environment, and is evenextendable to a fully interactive system.  The paper presents the conceptual view of graphics leadingto the design of SEMBEGS and outlines the major components of the system.  The design of SEMBEGS is foundedupon the basic assumption that the true aim of computer graphics is to describe graphical entities,rather than, as commonly held, to provide graphical input and output functional capabilities.  SEMBEGSis built around a Basic Graphical Data Management System (BAGDAMS) which provides a common means of communicatingthe descriptions of graphical entities  between the various components of SEMBEGS.  BAGDAMSprovides facilities for storing, retrieving, and manipulating the descriptions of graphical entitiesprovided by, and received by application programs,graphics packages, and graphical devices.  | Wendorf, J.W..KComputer graphics, data structures, graphic display,graphic input, graphical database, device independent graphics.C4.33 4.34 8.2
3050 | Systems Design Education: A Gaming Approach | One of the problems facing managers of computerinstallations is the problem of configuring the computer system to meet the demands made by themix of jobs that the computer center must service.  This paper presents a management game that allowsthe player to configure a computer system to meet a hypothetical job mix is under the control of a game administratorand can be varied to simulate a variety of real-world situations (I/O bound jobs, compute boundjobs, etc.).  The player of the game receives a set of detailed reports on the cost of his choicesand a simulated run of the center operating under his choices.  | Lyons, N.R..KSystem design, configuration, management game.C2.43 2.44
3051 | A Comparison of Heaps and the TL Structure for the SImulation Event Set | None | Franta, W.R.Maly, K..KSimulation,event set, heaps, TL structure.C3.34 4.22 5.5 8.1
3052 | Cold-Start vs. Warm-Start Miss Ratios | In a two-level computer storage hierarchy, missratio measurements are often made from a "cold start," that is made with the first-level  store initiallyempty.  For large capacities the effect on the measured miss ratio of the misses incurred whilefilling the first-level store can be significant, even for long reference strings.  Use of "warm-start"rather than "cold-start" miss ratios cast doubt on the widespread belief that the observed "S-shape" oflifetime (reciprocal of miss ratio) versus capacity curve indicates a property of behavior of programs thatmaintain a constant number of pages in main storage.  On the other hand, if cold-start miss ratios are measuredas a function of capacity and measurement length, then they are useful in studying systems in whichoperation of a program is periodically interrupted by task switches.  It is shown how to obtain, under simpleassumptions, the cache miss ratio for multiprogramming from cold-start miss ratio values and how to obtainapproximate cold-start miss ratios from warm-start miss ratios. | Easton, M.C.Fagin, R..KMiss ratio, cold start, warm start, storage hierarchy,lifetime function, multiprogramming, S-shape.C3.70 4.32 9.35
3053 | Packed Scatter Tables | Scatter tables for open addressing benefitfrom recursive entry displacements, cutoffs for unsuccessful searches, and auxiliary cost functions.  Comparedwith conventional methods, the new techniques provide substantially improved tables that resemble exact-solutionoptimal packings.  The displacements are depth-limited approximations to an enumerative(exhaustive) optimization, although packing costs remain linear-O(n)-with table size n.  The techniques areprimarily suited for important fixed (but possibly quite large) tables for which reference frequencies maybe known: op-code tables,spelling dictionaries, access arrays.  Introduction of frequency weights furtherimproves retrievals, but the enhancement may degrade cutoffs.   | Lyon, G..KAssignment problem, backtrack programming, hashing, openaddressing, recursion, scatter table rearrangements .C3.74 4.0
3054 | Implementing Quicksort Programs | This paper is a practical study of how toimplement the Quicksort sorting algorithm and its best variants on real computers, including how to applyvarious code optimization techniques.  A detailed implementation combining the most effective improvementsto Quicksort is given, along with a discussion of how to implement it in assembly language.  Analyticresults describing the performance of the programs are summarized.  A variety of special situations are consideredfrom a practical standpoint to illustrate Quicksort's wide applicability as an internal sortingmethod which requires negligible extra storage.  | Sedgewick, R..KQuicksort, analysis of algorithms, code optimization, sorting.C4.0 4.6 5.25 5.31 5.5
3055 | An Analysis of Algorithms for the Dutch National Flag Problem | Solutions to the Dutch National Flag Problemhave been given by Dijkstra [1] and Meyer [3].  Dijkstra starts with a simple program and arrives atan improved program by refinement.  Both of the algorithms given by Dijkstra are shown to have an expected numberof swaps which is 2/3N + 0(1) and that these values differ at most by 1/3 of a swap and asymptoticallyby 1/4 of a swap.  The algorithm of Meyer is shown to have expected swap complexity 5/9N. | McMaster, C.L..KAlgorithmic analysis, Dutch National FlagProblem, refinement, structured programming.C4.0 5.24 5.25 5.3
3056 | Counting Large Numbers of Events in Small Registers | It is possible to use a small counter to keepapproximate counts of large numbers.  The resulting expected error can be rather precisely controlled.  Anexample is given in which 8-bit counters (bytes) are used to keep track of as many as 130,000 events witha relative error which is substantially independent of the number n of events.  This relative error canbe expected to be 24 percent or less 95 percent of the time (i.e.o = n/8).  The techniques could be usedto advantage in multichannel counting hardware or software used for the monitoring of experiments or processes. | Morris, R..KCounting.C5.11
3057 | Optimal His togram Matching by Monotone Gray Level Transformation | This paper investigates the problem of optimalhis togram matching using monotone gray level transformation, which always assigns all picture pointsof a given gray level i to another gray level T(i) such that if i > j, then T(i) > T(j).  The objectiveis to find a transformed digital picture of a given picture such that the sum of absolute errorsbetween the gray level his togram of the transformed picture and that of a reference picture is minimized. This is equivalent to placing k1 linearly ordered objects of different sized one by one into k2 linearly orderedboxes of assorted sizes, such that the accumulated error of space under packed or overpackedin the boxes is minimized; the placement function is monotonic, which ensures a polynomial time solutionto this problem.  A tree search algorithm for optimal his togram matching is presented which has timecomplexity O(k1 x k2).  If the monotone property is dropped, then the problem becomes NP-complete,even if it is restricted to k2 = 2.  | Chang, S.K.Wong, Y.W..KOptimal his togram matching, gray level transformation,packing problem, tree searching algorithm, picture processing.C3.24 5.25 5.42
3058 | Jump Searching: A Fast Sequential Search Technique | When sequential file structures must be usedand binary searching is not feasible, jump searching becomes an appealing alternative.  This paper exploresvariants of the classic jump searching scheme where the optimum jump size is the square root of thenumber of records.  Multiple level and variable size jump strategies are explored, appropriate applicationsare discussed and performance is evaluated. | Shneiderman, B..KJump searching, sequential files, file management,search strategies, database structures, index searching.C3.74 4.34
3059 | Models for Parallel Processing WIthin Programs:Application to CPU:I/O and I/O:I/O Overlap | Approximate queueing models for internal parallelprocessing by individual programs in a multiprogrammed system are developed in this paper.  The solution techniqueis developed by network decomposition.  The models are formulated in terms of CPU:I/O and I/O:I/O overlapand applied to the analysis of these problems.  The percentage performance improvement from CPU:I/Ooverlap is found to be greatest for systems which are in approximate CPU:I/O utilization balance and forlow degrees of multiprogramming.  The percentage improvement from I/O:I/O overlap is found to be greatestfor systemtems in which the I/O system is more utilized than the CPU. | Towsley, D.Chandy, K.M.Browne, J.C..KMultiprogramming, parallel processing, queueingnetwork models, multiprocessing of computation and I/O .C4.32 8.1
3060 | Fortran 77 | There is a new standard Fortran.  The officialtitle is "American National Standard Programming Language Fortran, X3.9-1978," but it is more commonlyreferred to as "Fortran 77," since its development was completed in 1977.  It replaces the Fortran standarddesignated X3.9-1966.  This paper describes many of the features of Fortran 77 and also providessome information about how and why the standard was developed.  | Brainerd, W..KNone.CNone
3061 | Simulations of Dynamic Sequential Search Algorithms | None | Tenenbaum, A..KSearching, list processing, sequentialsearching, dynamic reordering, simulation .C3.74 8.1
3062 | Real Time Plotting of Approximate Contour Maps | None | Ward, S.A..KContour map, digital plotting, graphical characters.C3.10 3.20 4.41 8.2
3063 | A Note on Virtual Memory Indexes | None | Maly, K..KIndex, B-tree, pages, file organization,linked representation, maintenance costs .C3.02 3.50 3.51 3.73 3.74
3064 | Event Manipulation for Discrete SimulationsRequiring Large Numbers of Events | The event-manipulation system presented here consists oftwo major parts.  The first part addresses the familiar problem of event scheduling efficiencywhen the number of scheduled events grows large.  The second part deals with the less apparent problemof providing efficiency and flexibility as scheduled events are accessed to be executed.  Additional featuresand problems dealt with include the proper handling of simultaneous events; that certain events must be created,scheduled, and executed at the same points in simulated time; that infinite loops caused by the concatenationof such "zero-time" events are possible and must be diagnosed; that maintaining various eventcounts is practical and economical; and that a capability for handling  "time-displaceable" events is desirable and possible.   | Ulrich, E.G..KSimulation, discrete systems simulation, discreteevent simulation, time-flow mechanisms.C3.65 3.74 4.22 8.1
3065 | Right Brother Trees | Insertion and deletion are provided for theclass of right (or one-sided) brother trees which have O (log n) performance.  The importance of theseresults stems from the close relationship of right brother trees which have an insertion algorithm operatingin O (log2 n).  Further, although both insertion and deletion can be  carried out in O (log n) time forright brother trees, it appears that the insertion algorithm is inherently much more difficult than thedeletion algorithm-the reverse of what one usually obtains.   | Ottmann, T.T.Six, H.W.Wood, D..KDictionary problem, search trees, AVL trees, brothertrees, right-balanced trees,one-sided height-balanced trees, insertion and deletion algorithms.C3.73 3.74 5.31
3066 | A Controlled Experiment in Program Testingand Code Walkthroughs/Inspections | This paper describes an experiment in programtesting, employing 59 highly experienced data processing professionals using seven methods to testa small PL/I program.  The results show that the popular code walk through/inspection method was as effectiveas other computer-based methods in finding errors and that the most effective methods (in terms oferrors found and cost) employed pairs of subjects who tested the program independently and then pooledtheir findings.  The study also shows that there is a tremendous amount of variability among subjectsand that the ability to detect certain types of errors varies from method to method. | Myers, G.J..KSoftware reliability, program verification, debugging,testing, code walkthroughs, code inspections, personnel selection.C4.6
3067 | Generalized Working Sets for Segment Reference Strings | The working-set concept is extended for programsthat reference segments of different sizes.  The generalized working-set policy (GWS) keeps as itsresident set those segments whose retention costs do not exceed their retrieval costs.  The GWS is a modelfor the entire class of demand-fetching memory policies that satisfy a resident-set inclusion property. A generalized optimal policy (GOPT) is also defined; at its operating points it minimizes aggregatedretention and swapping costs.  Special cases of the cost structure allow GWS and GOPT to simulateany known stack algorithm, the working set, and VMIN.  Efficient procedures for computing demand curvesshowing swapping load as a function of memory usage are developed for GWS and GOPT policies.  Empiricaldata from an actual system are included. | Denning, P.J.Slutz, D.R..KDatabase referencing, memory management, optimalmemory policies, paging, program behavior, program measurement, segmentation, working sets.C4.30 8.10
3068 | A Model for Verification of Data Security in Operating Systems | Program verification applied to kernel architecturesforms a promising method for providing uncircumventably secure, shared computer systems.  Aprecise definition of data security is developed here in terms of a general model for operating systems. This model is suitable as a basis for verifying many of those properties of an operating system whichare necessary to assure reliable enforcement of security.  The application of this approach to theUCLA secure operating system is also discussed.  | Popek, G.J..Farber, D.A..KOperating systems, security, protection, program verification.C4.35 5.24
3069 | A Practical Interprocedural Data Flow Analysis Algorithm | A new interprocedural  data flow analysis algorithmis presented and analyzed.  The algorithm associates with each procedure in a program informationabout which variables may be modified, which may be used, and which are possibly preserved by a callon the procedure, and all of its subcalls.  The algorithm is sufficiently powerful to be used on recursiveprograms and to deal with the sharing of variables which arises through reference parameters.  The algorithmis unique in that it can compute all of this information in a single pass, not requiring a prepass tocompute calling relationships or sharing patterns.  The algorithm is asymptotically optimal in time complexity. It has been implemented and is practical even on programs which are quite large. | Barth, J.M..KData flow analysis, global flow analysis, optimization,side effects, relations, reference parameters, incarnations.C4.12 4.20
3070 | Hybrid Simulation Models of Computer Systems | This paper describes the structure and operationof a hybrid simulation model in which both discrete-event simulation and analytic techniques arecombined to produce efficient yet accurate system models.  In an example based on a simple hypotheticalcomputer system, discrete-event simulation is used to model the arrival and activation of jobs, and acentral-server queueing network models the use of system processors.  The accuracy and efficiency of thehybrid technique are demonstrated by comparing the result and computational costs of the hybrid model ofthe example with those of an equivalent simulation-only model.   | Schwetman, H.D..KPerformance evaluation, simulation, queueingnetwork models, central server model.C4.32 4.35 8.1
3071 | An Algorithm Using Symbolic Techniques for theBel-Petrov Classification of Gravitational Fields | In this note, an algorithm is presented for thesymbolic calculation of certain algebraic invariants of the Weyl tensor which permits the determinationof the Bel-Petrov types of a gravitational field.  This algorithm, although more specialized than thatof D'Inverno and Russell-Clark, requires neither the use of a special coordinate system nor the spin coefficientformalism.  The algorithm has been implemented in FORMAC and is designed to complete the classificationscheme proposed by Petrov in his book.  An appendix contains examples illustrating the use of the algorithm. | Harris, R.A.Zund, J.D..KGeneral relativity, Bel-Petrov types,FORMAC, symbolic manipulation, tensors.C3.11 3.15 3.17
3072 | Feedback Coupled Resource Allocation Policiesin the Multiprogramming- Multiprocessor Computer System | Model studies of some integrated, feedback-drivenscheduling systems for multiprogrammed- multiprocessor computer systems are presented.  The basic control variablesused are the data-flow rates for the processes executing on the CPU.  The model systems feature simulatedcontinuous-flow and preempt-resume scheduling of input-output activity.  Attention is given to theamount of memory resource required for effective processing of the I/O activity (buffer space assignment). The model studies used both distribution-driven and trace-driven techniques.  Even relatively simple dynamicschedulers are shown to improve system performance (as measured by user CPU time) over that given by optimalor near-optimal static schedulers imbeded in identical system structures and workload environments. The improvement is greatest under a heavy I/O demand workload. | Brice, R.S.Browne, J.C..KIntegrated schedulers, feedback scheduling,multiprogramming systems, I/O system scheduling.C4.32 4.35
3073 | Communicating Sequential Processes | This paper suggests that input and output arebasic primitives of programming and that parallel composition of communicating sequential processes isa fundamental program structuring method.  When combined with a development of Dijkstra's guarded command,these concepts are surprisingly versatile.  Their use is illustrated by sample solutions ofa variety of familiar programming exercises. | Hoare, C.A.R..KProgramming, programming languages, programming primitives,program structures, parallel programming, concurrency, input, output, guarded commands, nondeterminacy,coroutines, procedures, multiple entries, multiple exits, classes, data representations, recursion,conditional critical regions, monitors, iterative arrays.C4.20 4.22 4.32
3074 | A Time- and Space- Efficient Garbage Compaction Algorithm | Given an area of storage containing scattered,marked nodes of differing sizes, one may wish to rearrange them into a compact mass at one end of thearea while revising all pointers to marked nodes to show their new locations.  An algorithm is describedhere which accomplishes this task in linear time relative to the size of the storage area, and in a spaceof the order of one bit for each pointer.  The algorithm operates by reversibly encoding the situation(that a collection of locations point to a single location) by a linear list, emanating from the pointed-tolocation, passing through the pointing locations, and terminating with the pointed-to location's transplanted contents. | Morris, F.L..KGarbage collection, compaction, compact ification,storage reclamation, storage allocation, record structures, relocation, list processing, free storage, pointers, data structures.C4.34 4.49 5.32
3075 | Fast Parallel Sorting Algorithms | A parallel bucket-sort algorithm is presentedthat requires time O(log n) and the use of n processors.  The algorithm makes use of a technique thatrequires more space than the product of processors and time.  A realistic model is used model is used in whichno memory contention is permitted.  A procedure is also presented to sort n numbers in time O(k logn) using n 1 + 1/k processors, for k an arbitrary integer.  The model of computation for this procedurepermits simultaneous fetches from the same memory location. | Hirschberg, D.S..KParallel processing, sorting, algorithms, bucket sort.C3.74 4.34 5.25 5.31
3076 | Value Conflicts and Social Choice in ElectronicFunds Transfer System Developments | During the last few years, computer-basedsystems which automate the transfer and recording of debits and credits have begun to be implemented ona large scale.  These systems promise both financial benefits for the institutions that use them and potentialconveniences to their customers.  However, they also raise significant social, legal, and technicalquestions that must be resolved if full scale systems for Electronic Funds Transfer (EFT) are notto cause more problems for the larger public than they solve.  This paper examines the incentives for EFTdevelopments and the social problems they raise in the context of conflicts between five different valuepositions that are often implicit in analyses of proposed EFT arrangements.  These conflicts reflectthe relative importance of certain problems for specific groups.  The value positions implicit in EFT proposalshelp to organize analyses of market arrangements, system reliability, and privacy of transactions.  Thesetopics are analyzed in this article and related to the value positions held by concerned parties.  Last,the ways in which the public can learn about the social qualities of different EFT arrangements andthe pace of EFT developments are both discussed in the context of social choice.  | Kling, R..KElectronic funds transfer systems, social impactsof computing, privacy, social choice, computer networks, network reliability, security, social values.C2.11 2.12 2.3 3.52 3.53 3.55
3077 | Can Programming Be Liberated from the von NeumannStyle?  A Functional Style and Its Algebra of Programs | Conventional programming languages are growingever more enormous, but not stronger.  Inherent defects at the most basic level cause them to be bothfat and weak: their primitive word-at-a-time style of programming inherited from their common ancestor-thevon Neumann computer, their close coupling off semantics to state transitions, their division of programminginto a world of expressions and a world of statements, their inability to effectively use powerfulcombining forms for building new programs from existing ones, and their lack of useful mathematicalproperties for reasoning about programs. An alternative functional style of programming is foundedon the use of combining forms for creating programs.  Functional programs deal with structured data, are oftennonrepetitive and nonrecursive, are hierarchically constructed, do not name their arguments, and do not requirethe complex machinery of procedure declarations to become generally applicable.  Combining forms canuse high level programs to build still higher levelones in a style not possible in conventional languages. Associated with the functional style of programming is an algebra of programs whose variables range overprograms and whose operations are combining forms.  This algebra can be used to transform programs andto solve equations whose "unknowns" are programs in much the same way one transforms equations in highschool algebra.  These transformations are given by algebraic laws and are carried out in the same languagein which programs are written.  Combining forms are chosen not only for their programming powerbut also for the power of their associated algebraic laws.  General theorems of of the algebra give the detailedbehavior and termination conditions for large classes of programs.  A new class of computing systemsuses the functional programming style both in its programming language and in its state transitionrules.  Unlike von Neumann languages, these systems have semantics loosely coupled to states-only onestate transition occurs per major computation.  | Backus, J..KFunctional programming, algebra of programs, combiningforms, functional forms, programming languages, von Neumann computers, von Neumann languages, models ofcomputing systems, applicative computing systems, applicative state transition systems, program transformation,program correctness, program termination, metacomposition.C4.20 4.29 5.20 5.24 5.26
3078 | Analysis of the Availability of ComputerSystems Using Computer- Aided Algebra | Analytical results, related to the availabilityof a computer system constructed of unreliable processors, are presented in this paper.  These resultsare obtained by using various computer-aided algebraic manipulation techniques.  A major purpose ofthis paper is to demonstrate that the difficulties of obtaining analytical solutions to Markov processescan be considerably reduced by the application of symbol manipulation programs.  Since many physicalsystems can be modeled by Markov and semi-Markov processes, the potential range of application of these techniquesis much wider than the problem of availability analyzed here. | Chattergy, R.Pooch, U.W..KComputer-aided algebra, symbol manipulation, Markovprocess, reliability, redundant structures, on-line computer system..C3.82 5.5 5.7 8.1 8.3
3079 | An Algorithm for Reasoning About Equality | A simple technique for reasoning about equalitiesthat is fast and complete for ground formulas with function symbols and equality is presented. A proof of correctness is given as well.  | Shostak, R.E..KTheorem proving, deduction, program verification, equality.C3.64 3.66 5.21
3080 | Proving the Correctness of Heuristically Optimized Code  | A system for proving that programs writtenin a high level language are correctly translated to a low level language is described.  A primary use ofthe system is as a post optimization step in code generation.  The low level language programs need notbe generated by a compiler and in fact could be hand coded.  Examples of the usefulness of such a systemare given.  Some interesting results are the ability to handle programs that implement recursion bybypassing the start of the program, and the detection and pinpointing of a wide class of errors in the lowlevel language programs.  The examples demonstrate that optimization of the genre of this paper can resultin substantially faster operation and the saving of memory in terms of program and stack sizes. | Samet, H..KCompilers, correctness, code optimization,debugging, program verification, Lisp.C4.12 4.21 4.22 5.24
3081 | Shallow Binding in Lisp 1.5 | Shallow binding is a scheme which allows thevalue of a variable to be accessed in a bounded amount of computation.  An elegant model for shallow bindingin  Lisp 1.5 is presented in which context-switching is an environment tree transformation called rerooting. Rerooting is completely general and reversible, and is optional in the sense that a Lisp 1.5 interpreterwill operate correctly whether or not rerooting is invoked one very context change.   Since rerootingleaves assoc [v, a] invariant, for all variables v and all environments a, the programmer can have accessto a rerooting primitive, shallow[], which gives him dynamic control over whether accesses are shallow ordeep, and which affects only the speed of execution of a program, not its semantics.  In addition, multipleprocesses can be active in the same environment structure, so long as rerooting is an indivisible operation. Finally, the concept of rerooting is shown to combine the concept of shallow binding in Lisp withDijkstra's display for Algol and hence is a general model for shallow binding. | Baker, H.G. Jr..KLisp 1.5, environment trees, FUNARG'S, shallow binding,deep binding, multiprogramming, Algol display.C4.13 4.22 4.32
3082 | Time, Clocks, and the Ordering of Events in a Distributed System | The concept of one event happening beforeanother in a distributed system is examined, andis shown to define a partial ordering of the events. A distributed algorithm is given for synchronizing a system of logical clocks which can be used to totallyorder the events.  The use of the total ordering is illustrated with a method for solving synchronizationproblems.  The algorithm is then specialized for synchronizing physical clocks, and a bound is derivedon how far out of synchrony the clocks can become.   | Lamport, L..KDistributed systems, computer networks,clock synchronization, multiprocess systems.C4.32 5.29
3083 | Pseudochaining in Hash Tables | This paper presents pseudochaining as a newcollision-resolution method.  Pseudochaining is half way between open addressing and chaining.  It owesits name to the fact that link fields are present in each cell of the hash table which permits "chaining"of the first overflow items in the table.  The efficiency of the method is derived and a tradeoff analysis is given. | Halatsis, C.Philokyprou, G..KHash code, scatter storage, open addressing, chaining,pseudochaining, collision resolution, searching, uniform probing..C3.7 3.73 3.74 4.9
3084 | Interpolation Search -A Log LogN Search | Interpolation search is a method of retrievinga desired record by key in an ordered file by using the value of the key and the statistical distributionof the keys.  It is shown that on the average log logN file accesses are required to retrieve a key,assuming that the N keys are uniformly distributed.  The number of extra accesses is also estimated and shownto be very low.  The same holds if the cumulative distribution function of the keys is known.  Computationalexperiments confirm these results.   | Perl, Y.Itai, A.Avni, H..KAverage number of accesses, binary search, database,interpolation search, retrieval, searching, uniform distribution .C4.4 4.6 5.25
3085 | An O(n) Algorithm for Determining a Near-OptimalComputation Order of Matrix Chain Products | This paper discusses the computation of matrixchain products of the form M1 x M2 x ... x Mn where Mi's are matrices.  The order in which the matricesare computed affects the number of operations.  A sufficient condition about the association of thematrices in the optimal order is presented.  An O(n) algorithm to find an order of computation whichtakes less than 25 percent longer than the optimal time Topt is also presented.  In most cases, the algorithmyields the optimal order or an order which takes only a few percent longer than Topt (less than 1 percent on the average). | Chin, F.Y..KApproximate algorithm, heuristic algorithm,matrix multiplication, matrix chain product.C5.14
3086 | On the Complexity of Computing the Measure of U[ai, bi] | The decision tree complexity of computing themeasure of the union of n (possibly overlapping) intervals is shown to be  (n log n), even if comparisonsbetween linear functions of the interval endpoints are allowed.  The existence of an   (n log n) lower boundto determine whether any two of n real numbers are within   of each other is also demonstrated.  Theseproblems provide an excellent opportunity for discussing the effects of the computational model onthe ease of analysis and on the results produced. | Fredman, M.L.Weide, B..KAnalysis of algorithms, combinatorial problems,computational complexity, computational models, decision tree programs, lower bounds.C5.25 5.26 5.30 5.39
3087 | An English Language Question Answering Systemfor a Large Relational Database | By typing requests in English, casual userswill be able to obtain explicit answers from a large relational database of aircraft flight and maintenancedata using a system called PLANES.  The design and implementation of this system is described andillustrated with detailed examples of the operation of system components and examples of overall systemoperation.  The language processing portion of the system uses a number of augmented transition networks,each of which matches phrases with a specific meaning, along with context registers (his tory keepers)and concept case frames; these are used for judging meaningfulness of questions, generating dialogue for clarifyingpartially understood questions, and resolving ellipsis and pronoun reference problems.  Other system componentsconstruct a formal query for the relational database, and optimize the order of searching relations. Methods are discussed for handling vague or complex questions and for providing browsing ability. Also included are discussions of important issues in programming natural language systems for limited domains,and the relationship of this system to others.  | Waltz, D.L..KQuestion answering, relational database, natural language,database front end, artificial intelligence, dialogue, query generation, information retrieval, natural language programming .C3.42 3.60 3.69 3.74 3.79
3088 | General Equations for Idealized CPU-I/O Overlap Configurations | General equations are derived for estimatingthe maximum possible utilization of main storage partitions, CPU and I/O devices under different conditionsin an idealized CPU-I/O overlap model of multiprogrammed computer systems.  The equations are directly applicableto any configuration consisting  of sets of identical CPU's I/O processors, main storage partitionsand user tasks.  Examples are provided to illustrate the use of the equations to compute effective processingtime per record and expected timesharing response time under both balanced and unbalanced resource utilization conditions.  | Teory, T.J..KBlocking, buffering, input/output, overlap, performance,resource allocation, throughput, timesharing.C3.72 4.30 4.41 8.1
3089 | Performance of Rollback Recovery Systems under Intermittent Failures | A mathematical model of a transaction-orientedsystem under intermittent failures is proposed.  The system is assumed to operate with a checkpointingand rollback/recovery method to ensure reliable information processing.  The model is used to derive theprincipal performance measures, including availability, response time, and the system saturation point.    | Gelenbe, E.Derochette, D..KDatabase reliability, file systems, checkpoints, recoveryprocedures, checking techniques, reliability and system performance evaluation.C3.72 3.73 4.33 4.35 4.6 5.5 8.1
3090 | Automated Welfare Client-Tracking and ServiceIntegration: The Political Economy of Computing | The impacts of an automated client-trackingsystem on the clients, caseworkers, administrators, and operations of the welfare agencies that use it arereported.  The major impact of this system was to enhance the administrative  attractiveness of theusing agencies in the eyes of funders rather than to increase their internal administrative efficiency. This impact is a joint product of both the technical features of the computer-based system and of the organizationaldemands placed upon different agencies, administrators, and caseworkers.  It illustrates theway "successful" automated information systems fit the political economies of the groups that use them.     | Kling, R..KSocial impacts of computing, organizational impactsof computing, management information systems, sociology of computing, information systems andservice integration, urban information systems.C2.11 3.53
3091 | Some Basic Determinants of Computer Programming Productivity | The propose of this research was to examinethe relationship between processing characteristics of programs and experience characteristics of programmersand program development time.  The ultimate objective was to develop a technique for predictingthe amount of time necessary to create a computer program.  The fifteen program characteristics hypothesizedas being associated with an increase in programming time required are objectively measurable from preprogrammingspecifications.  The five programmer characteristics are experience-related and are also measurable before a programmingtask is begun.  Nine program characteristics emerged as major influences on program development time,each associated with increased program development time.  All five programmer characteristics were foundto be related to reduced program development time.  A multiple regression  equation which contained one programmercharacteristic and four program characteristics gave evidence of good predictive power forforecasting program development time.    | Chrysler, E..KProgrammer performance standards, predicting programdevelopment time, program estimation techniques, program development equation, value of programming experience,programmer evaluation, programmer scheduling, programmer productivity, programming management, Cobol programming.C2.40 4.20
3092 | Characteristics of Application Software Maintenance | Maintenance and enhancement of applicationsoftware consume a major portion of the total life cycle cost of a system.  Rough estimates of the totalsystems and programming resources consumed range as high as 75-80 percent in each category.  However,the area has been given little attention in the literature.  To analyze the problems in this area aquestionnaire was developed and pretested.  It was then submitted to 120 organizations.  Respondents totaled69.  Responses were analyzed with the SPSS statistical package.  The results of the analysis indicatethat: (1) maintenance and enhancement do consume much of the total resources of systems and programminggroups; (2) maintenance and enhancement tend to be viewed by management as at least somewhat more importantthan new application software development; (3) in maintenance and enhancement, problems of a managementorientation tend to be more significant than those of a technical orientation; and (4) userdemands for enhancements and extension constitute the most important management problem area. | Lientz, B.P.Swanson, E.B.Tompkins, G.E..KSoftware maintenance, use of productivityaids, management and technical issues .C3.50 4.6
3093 | Automatic Error Recovery for LR Parsers | In this paper we present a scheme for detectingand recovering from syntax errors in programs.  The scheme, which is based on LR parsing, is drivenby information which is directly and automatically obtainable from the information that is already presentin an LR parser.  The approach, which is patterned after that of Levy and Graham and Rhodes, appears toprovide error recovery which is both simple and powerful. | Mickunas, M.D.Modry, J.A..KProgramming languages, error correction, automaticcorrection, parsing, LR, syntax errors, compilers.C4.12 4.42 5.23
3094 | Analyses of Deterministic Parsing Algorithms | This paper describes an approach for determiningthe minimum, maximum, and average times to parse sentences acceptable by a deterministic parser. These quantities are presented in the form of symbolic formulas, called time-formulas.  The variablesin these formulas represent not only the length of the input string but also the time to perform elementaryoperations such as pushing, popping, subscripting, iterating, etc.  By binding to the  variables actual numericalvalues corresponding to a given compiler-machine configuration, one can determine the execution timefor that configuration.  Time-formulas are derived by examining the grammar rules and the program representingthe algorithm one wishes to analyze.  The approach is described by using a specific grammar that definessimple arithmetic expressions.  Two deterministicparsers are analyzed: a top-down recursive descentLL(1) parser, and a bottom-up SLR(1) parser.  The paper provides estimates for the relative efficienciesof the two parsers.  The estimates applicable to a specific machine, the PDP-10, are presented andsubstantiated buy benchmarks.  Finally, the paper illustrates the proposed approach by applying it tothe analyses of parsers for a simple programming language.   | Cohen, J.Roth, M.S..KSyntactic analysis, analysis of algorithms,top-downand bottom-up parsing, relative efficiencies..C4.12 5.23 5.24 5.25 5.7
3095 | A Selective Traversal Algorithm for Binary Search Trees | The problem of selecting data items froma binary search tree according to a list of range conditions is considered.  The process of visiting aminimal number of nodes to retrieve data satisfying the range conditions is called selective traversal.  Presentedin this paper is an algorithm for selective traversal which uses a tag field for each node in thetree.  The algorithm is particularly useful and efficient when examination of data is more timeconsuming than examination of a tag field.  | Driscoll, J.R.Lien, Y.E..KData retrieval, range conditions, binary searchtree, tree traversal, selective traversal.C3.74 5.24 5.25
3096 | An Optimal Method for Deletion in One-Sided Height-Balanced Trees | A one-sided height-balanced tree is a binarytree in which every node's right subtree has a height which is equal to or exactly one greater than theheight of its left subtree.  It has an advantage over the more general AVL tree in that only one bitof balancing information is required (two bits are required for the ACL tree).  It is shown that deletion ofan arbitrary node of such a tree can be accomplished in O(logn) operations, where n is the number of nodesin the tree.  Moreover the method is optimal in the sense that its complexity cannot be reduced in orderof magnitude.  This result, coupled with earlier results by Hirschberg, indicates that, of the three basicproblems of insertion, deletion, and retrieval, only insertion is adversely affected by this modification of an AVL tree.    | Zweben, S.H.McDonald, M.A..KBalanced, binary, search, trees.C3.73 3.74 4.34 5.25 5.31
3097 | Optimal Shift Strategy for a Block-Transfer CCD Memory | For the purposes of this paper, a block-transferCCD memory is composed of serial shift registers whose shift rate can vary, but which have a definite minimumshift rate (the refresh rate) and a definite maximum shift rate.  The bits iin the shift registersare numbered 0 to N - 1, and blocks of N bits are always transferred, always starting at bit 0.   Whatis the best shift strategy so that a block transfer request occurring at a random time will have to wait theminimal amount of time before bit 0 can be reached?  The minimum shift rate requirement does not allow oneto  simply "park" at bit 0 and wait for a transfer request.  The optimal strategy involves shifting as slowlyas possible until bit 0 is passed, then shifting as quickly as possible until a critical boundary isreached, shortly before bit 0 comes around again.  This is called the "hurry up and wait" strategy and is wellknown outside the computer field.  The block-transfer CCD memory can also be viewed as a paging drumwith a variable (bounded) rotation speed. | Sites, R.L..KPaging drum, charge coupled devices, shift registermemory, memory hierarchy, electronic drum, latency.C3.72 5.39 6.34 6.35
3098 | Computer Generation of Gamma Random Variables | A new method for generating random variablesfrom the gamma distribution with nonintegral shape parameter a is proposed.  This method is similar to twoother methods recently given by Wallace and Fishman.  It is compared with Fishman's and Ahrens and Dieter's methods. The core storage requirements and programming effort for this method are similar to those of Fishman'smethod.  The proposed method is the same as Fishman's method for 1 < a < 2 and is faster than Fishman'smethod for 3 < a < 19.  Also, the proposed method is much simpler than Ahrens and Dieter's method and is faster for a < 8.  | Tadikamalla, P.R..KGamma variables, rejection method, computer methods.C5.5 8.1
3099 | New Sufficient Optimality Conditions forInteger Programming and their Application | The purpose of this report is to present anew class of sufficient optimality conditions for pure and mixed integer programming problems.  Some ofthe sets of sufficient conditions presented can be thought of as generalizations of optimality conditionsbased on primal-dual complementarity in linear programming.  These sufficient conditions are particularlyuseful for the construction of difficult integer programming problems with known optimal solutions.  Theseproblems may then be used to test and/or "benchmark" integer programming codes. | Fleisher, J.M.Meyer, R.R..KInteger programming, optimality conditions, testproblem construction, Kuhn-Tucker conditions, greatest common divisor .C3.15 5.39 5.49
3100 | An Interference Matching Technique for Inducing Abstractions | A method for inducing knowledge by abstractionfrom a sequence of training examples is described.  The proposed method, interference matching, induces abstractionsby finding relational properties common to two or more exemplars.  Three tasks solved by a programthat uses an interference-matching algorithm are presented.  Several problems concerning the descriptionof the training examples and the adequacy of interference matching are discussed, and directionsfor future research are considered. | Hayes-Roth, F.McDermott, J..KRule induction, knowledge acquisition, partialmatching, interference, graph matching, learning, induction, knowledge representation, informal retrieval,abstraction, generalization, language learning, complexity, predicate discovery..C3.36 3.61 3.62 3.66 3.70 5.32
3101 | The SL5 Procedure Mechanism | This paper describes an integrated proceduremechanism that permits procedures to be used as recursive functions or as coroutines.  This integrationis accomplished by treating procedures and their activation records (called environments) as data objectsand by decomposing procedure invocation into three separate components at the source-language level. In addition, argument binding is under the control of the programmer, permitting the definition of variousmethods of argument transmission in the source language itself.  The resulting procedure mechanism,whichis part of the SL5 programming language, is well suited to goal-oriented problems and to other problemsthat are more readily programmed by using coroutines. Several examples are given.  | Hanson, D.Griswold, R.E..KProcedures, coroutines, programming languages,interpreters, SNOBOL 4, backtracking.C4.2 4.20 4.22 4.13
3102 | Incorporation of Units into Programming Languages | The issues of how a programming language mightaid in keeping track of physical units (feet, sec, etc.) are discussed.  A method is given for theintroduction of relationships among units (a watt is volts*amps, a yard is three feet) and subsequent automaticconversion based upon these relationships. Various proposals for syntax are considered. | Karr, M.Loveman III, D.B..KUnits, language design, compiler construction, language syntax.C4.12 4.22
3103 | Automatic Data Structure Selection: An Example and Overview | The use of several levels of abstraction hasproved to be very helpful in constructing and maintaining programs.  When programs are designed with abstractdata types such as sets and lists, programmer time can be saved by automating the process of fillingin low-level implementation details.  In the past, programming systems have provided only a single generalpurpose implementation for an abstract type.  Thus the programs produced using abstract types werethen inefficient in space or time.  In this paper a system for automatically choosing efficient implementationsfor abstract types from a library of implementations is discussed.  This process is discussed in detail foran example program.  General issues in data structure selection are also reviewed.  | Low, J.R..KAbstract data types, automatic programming, datastructures, optimizing compilers, sets, lists.C4.12 4.22 4.6
3104 | Test Data as an Aid in Proving Program Correctness | Proofs of program correctness tend to be longand tedious, whereas testing, though useful in detecting errors, usually does not guarantee correctness. This paper introduces a techniques whereby test data can be used in proving program correctness. In addition to simplifying the process of proving correctness, this method simplifies the process of providingaccurate specification for a program.  The applicability of this technique to proceduresand recursive programs is demonstrated. | Geller, M..KProgram verification, program testing, recursive programs.C4.22 4.6 5.24
3105 | A Language Extension for Expressing Constraints on Data Access | Controlled sharing of information is needed anddesirable for many applications and is supported in operating systems by access control mechanisms.  Thispaper shows how to extend programming languages to provide controlled sharing.  The extension permitsexpression of access constraints on shared data.  Access constraints can apply both to simple objects, andto objects that are components of larger objects, such as bank account records in a bank's data base. The constraints are stated declaratively, and can be enforced by static checking similar to type checking. The approach can be used to extend any strongly-typed language, but is particularly suitable for extendinglanguages that support the notion of abstract data types.  | Jones, A.K.Liskov,B.H..KProgramming languages, access control, data types,abstract data types, type checking, capabilities.C4.20 4.35
3106 | A Fast Algorithm for Copying List Structures | An algorithm is presented for copying an arbitrarilylinked list structure into a block of contiguous storage locations without destroying  the originallist.  Apart from a fixed number of program variables, no auxiliary storage, such as a stack, is used. The algorithm needs no mark bits and operates in linear time.  It is shown to be significantly fasterthan Fisher's algorithm, the fastest previous linear-time algorithm for the same problem.  Its speedcomes mainly from its efficient list-traversal technique, which folds the processing stack into thestructure being built, and from its classification of list cells into nine types, which enables processingoperations to be optimized for each type. | Clark, D.W..KList copying, Lisp, space complexity, constant workspace.C4.34 4.49 5.25
3107 | Generating Beta Variates with Nonintegrel Shape Parameters | A new rejection method is described for generatingbeta variates.  The method is compared with previously published methods both theoretically and throughcomputer timings.  It is suggested that the method has advantages in both speed and programmingsimplicity over previous methods, especially for "difficult" combinations of parameter values. | Cheng, R.C.H..KBeta variates, random numbers, simulation.C5.5 8.1
3108 | Economical Encoding of Commas Between Strings | A method for insertion of delimiters betweenstrings without using new symbols is presented.  As the lengths of the strings increase, the extra cost,in terms of prolongation, becomes vanishingly small compared to the lengths of the strings. | Even, S.Rodeh, M..KString transmission, delimiters, commas, encoding of the integers.C3.57 3.81 5.6
3109 | A Data Structure for Manipulating Priority Queues | A data structure is described which can be usedfor representing a collection of priority queues.  The primitive operations are insertion, deletion,union, update, and search for an item of earliest priority. | Vuillemin, J..KData structures, implementation of set operations,priorityqueues, mergeable heaps, binary trees.C4.34 5.24 5.25 5.32 8.1
3110 | Assembling Code for Machines with Span-Dependent Instructions | Many modern computers contain instructionswhose lengths depend on the distance from a given instance of such an instruction to the operand of thatinstruction.  This paper considers the problem of minimizing the lengths of programs for such machines. An efficient solution is presented for the case in which the operand of every such "span-dependent"instruction is either a label or an assembly-time expression of a certain restricted form.If this restrictionis relaxed by allowing these operands to be more general assembly-time expressions, thenthe problem is shown to be NP-complete. | Szymanski, T.G..KSpan-dependent instructions, variable-length addressing,code generation, assemblers, compilers, NP-complete, computational complexity..C4.11 4.12 5.25
3111 | Secure Communications Over Insecure Channels | According to traditional conceptions of cryptographicsecurity, it is necessary to transmit a key, by secret means, before encrypted messages canbe sent securely.  This paper shows that it is possible to select a key over open communications channelsin such a fashion that communications security can be maintained.  A method is described which forcesany enemy to expend an amount of work which increases as the square of the work required of the two communicantsto select the key.  The method provides a logically new kind of protection against the passiveeaves dropper.  It suggests that further research on this topic will be highly rewarding, bothin a theoretical and a practical sense. | Merkle, R.C..KSecurity, cryptography, cryptology, communicationssecurity, wiretap, computer network security, passive eavesdropping, key distribution, public key cryptosystem.C3.56 3.81
3112 | List Processing in Real Time on a Serial Computer | A real-time list processing system is onein which the time required by the elementary list operations (e.g. CONS, CAR, CDR, RPLACA, REPLACD, EQ,and ATOM in LISP) is bounded by a (small) constant.  Classical implementations of list processing systemslack this property because allocating a list cell from the heap may cause a garbage collection, which processrequires time proportional to the heap size to finish.  A real-time list processing system is presentedwhich continuously reclaims garbage, including directed cycles, while linearizing and compacting theaccessible cells into contiguous locations to avoid fragmenting the free storage pool.  The program is smalland requires no time-sharing interrupts, making it suitable for microcode.  Finally, the system requiresthe same average time, and not more than twice the space, of a classical implementation, and thosespace requirements can be reduced to approximately classical proportions by compact list representation. Arrays of different sizes, a program stack, and hash linking are simple extensions to our system, andreference counting is found to be inferior for many applications. | Baker, H.G..KReal-time, compacting,garbage collection, list processing,virtual memory, file or database management, storage management, storage allocation, LISP, CDR-coding, reference counting.  .C3.50 3.60 3.73 3.80 4.13 4.22 4.32 4.33 4.35 4.49
3113 | Optimal Conversion of Extended-EntryDecision Tables with General Cost Criteria | A general dynamic programming algorithm for convertinglimited, extended, or mixed entry decision tables to optimal decision trees is presented which cantake into account rule frequencies or probabilities, minimum time and/or space cost criteria, common actionsets, compressed rules and ELSE rules, sequencing constraints on condition tests, excludable combinationsof conditions, certain ambiguities, and interrupted rule masking.  | Lew, A..KDecision table, optimal programs, dynamic programming.C3.59 4.19 4.29 4.49 5.39 5.42 8.3
3114 | A Technique for Isolating Differences Between Files | A simple algorithm is described for isolatingthe differences between two files.  One application is the comparing of two versions of a source programor other file in order to display all differences.  The algorithm isolates differences in a way that correspondsclosely to our intuitive notion of difference, is easy to implement, and is computationally efficient,with time linear in the file length.  For most applications the algorithm isolates differences similarto those isolated by the longest common subsequence.  Another application of this algorithm merges filescontaining independently generated changes into a single file.  The algorithm can also be used to generateefficient encodings of a file in the form of the differences between itself and a given "datum" file,permitting reconstruction of the original file from the difference and datum files.    | Heckel, P..KDifference isolation, word processing, text editing,program maintenance, hash coding, file compression, bandwidth compression, longest common subsequence,file comparison, molecular evolution.C3.63 3.73 3.81 4.43
3115 | Orderly Enumeration of Nonsingular BinaryMatrices Applied to Text Encryption | Nonsingular binary matrices of order N, i.e.,nonsingular over the field {0, 1}, and an initial segment of the natural numbers are placed in one-to-onecorrespondence.  Each natural number corresponds to two intermediate vectors.  These vectors are mapped intoa nonsingular binary matrix.  Examples of complete enumeration of all 2 x 2 and 3 x 3 nonsingularbinary matrices were produced by mapping the intermediate vectors to the matrices.  The mappinghas application to the Vernam encipherment method using pseudorandom number sequences.  A bit string formedform bytes of text of a data encryption key can be used as a representation of a natural number. This natural number is transformed to a nonsingular binary matrix.  key leverage is obtained by using thematrix as a"seed" in a shift register sequence pseudorandom number generator.   | Payne, W.H.McMillen, K.L..KBinary matrices, combinatorics, combinations, nonsingularmatrices, encryption, Vernam, pseudorandom numbers, feedback shiftregister sequences, random numbers..C3.7 5.3
3116 | Interference Detection Among Solids and Surfaces | In many industrial environments it is necessary to determine whetherr there is interference among components.  There are many potentialinterference problems in products made up of assemblies of components and in product manufacturing and testing.  Typically, drawingsare used in an attempt to detect such unwanted interferences,but the two-dimensional, static drafting medium does not always showinterferences among three-dimensional, moving parts.  This paper presents a computer representation for solids and surfaces and algorithmswhich carry out interference checking among objects so represented.  Objects are represented as polyhedra or as piecewise planarsurfaces.  Two types of interference checking are discussed:detection of intersections among objects in fixed positions and detectionof collisions among objects moving along specified trajectories. | Boyse, J.W..KInterference checking, intersection detection, collision detection, solidrepresentation, polyhedral representation, graphics, polygons, surfaces.C3.2 8.2
3117 | The Impact and Use of Computer Technology by the Police | Over the past decade there has been a significant growthin the use of computer technology by U.S. police departments.  Thisgrowth, however, has been at a slower rate than predicted in theearly 1970's.  Further, when computer applications extendbeyond "routine" uses to "nonroutine" efforts, such as resource allocationor computer-aided-dispatch systems where the machine begins to becomea tool for decision making, strategic planning and person/machineinteraction, the results of the technology to date have beenmixed.  This paper reports on case studies and surveys which provinsights on the implementation and impact of police computer technologyand the relationship of this technology to law enforcement and society. | Colton, K.W..KComputer technology, innovation, police resource allocation, police command and control, computer aided dispatch,law enforcement, technology transfer.C2.1 2.11 2.12 2.45 3.33 3.39
3118 | Permutation of Data Blocks in a Bubble Memory | A common internal organization of bubble memories consists of a set of (minor) loops, connected through another (major) loop.  The problem of obtaining any give n permutation of the minor loop contents in minimum time is studiedin this paper.  A lower bound to the number of steps required buya permutation algorithm is derived, and the class of optimum algorithms is identified. | Bongiovanni, G.C.Luccio, F..KBubble memory, memory loops, permutation algorithm, data block shift.C4.34 5.30 6.34
3119 | The Impact of Distributions and Disciplineson Multiple Processor Systems | Simple queueing models are used to study the performance tradeoffs of multiple processor systems.  Issues considered include the impact of CPUservice disciplines and distributions, level of multiprogramming,multitasking, and job priorities.  | Sauer, C.H.Chandy, K.M..KMultiprogramming, multiprocessing, scheduling disciplines,performance evaluation, queueing models.C4.32 4.6 6.2 8.1
3120 | An Event-Driven Compiling Technique | Due to the linear structure of source text, difficulties may arise in a one-pass compilation process.  These difficulties occur when an entitycannot be processed because of a forward reference to informationonly obtainable from subsequent entities.  Classic solutionsask for data structures appropriate for each case.  A technique ispresented here which uses instead control structures, namely eventsand processes.  The work of the compiler-writer becomes easier bothconceptually and in practice because he can forget these problemsat the outset and he avoids special processing for each problem.This technique has been applied to the construction of an Algol68 compiler.  Three examples from that implementationare described and discussed here. | Banatre, J.P.Routeau, J.P.Trilling, L..KCompiling technique, one-pass compilation, semanticanalysis, event, process, parallelismcategories--4.12
3121 | Syntactic Source to Source Transforms and Program Manipulation | Syntactic transforms are the source to source program transformationswhich preserve the history of computation, and thus do notmodify the execution time.  Combined with a small number of primitivesemantic transforms, they provide a powerful tool for programmanipulation.  A catalogue of syntactic transforms, and its use forsolution of a system of program equations, is given.  Examples ofderivation of more complex source to source transformations are alsopresented.  Two case studies illustrate the way in which syntactic and semantic source to source transformations may be used fordevelopment of clear, simple, and reasonably efficient programs. | Arsac, J.J..KStructured programming, program transforms, control structures.C4.2 5.24 5.25
3122 | Production and Employment of Ph.D.'s in Computer Science - 1977 and 1978 | Taulbee, O.E.Conte, S.D..KComputer science, production of Ph.D.'s, employment, students.C1.3 1.52 1.53 1.59
3123 | Employment Characteristics of Doctoral Level Computer Scientists | Fairley, R.E..KEmployment characteristics, manpower utilization,occupational trends.C1.5 2.1 2.2
3124 | Recursive Data Structures in APL | A mathematical study of three approaches for defining nestedarrays in APL is presented.  Theorems exhibiting the relationshipsbetween the definitional systems are given and illustrated through graphrepresentations.  One of the approaches is used to define anAPL array to be a recursive data structure equivalent to a tree structurein which all data is stored at the leaves as homogeneousarrays of numbers and characters.  An extension of APL is proposed thatincludes new primitive functions to manipulate the nestinglevel of arrays and new operators to assist in theconstruction of data-driven algorithms.   | Gull,W.E.Jenkins, M.A..KNested arrays, APL arrays, recursive data structures,trees, data-driven algorithms, theory of arrays.C4.22 5.29
3125 | Global Optimization by Suppression of Partial Redundancies | The elimination of redundant computations and the moving of invariantcomputations out of loops are often done separately, with invariants moved outward loop by loop.  We propose to do both at once andto move each expression directly to the entrance of the outermostloop in which it is invariant.  This is done by solving a moregeneral problem, i.e. the elimination of computations performedtwice on a given execution path.  Such computations are termed partiallyredundant.  Moreover, the algorithm does not require any graphicalinformation or restrictions on the shape of the program graph.Testing this algorithm has shown that its execution cost is nearlylinear with the size of the program, and that it leadsto a smaller optimizer that requires less execution time. | Morel, E.Renvoise, C..KOptimizer, optimization, compiler, compilation,redundancy elimination, invariant computation elimination, partial redundancy,data flow analysis, Boolean systems.C4.12 5.21 5.24
3126 | Comments on Perfect Hashing Functions: A SingleProbe Retrieving  Method for Static Sets | Anderson, M.G..KHashing, hashing methods, hash coding, direct addressing, identifier-to-address transformations, perfect hashing functions, perfecthash coding, reduction, retrieving, scatter storage, searching.C3.7 3.74 4.34
3127 | Thoth, a Portable Real-Time Operating System  | Thoth isa real-time operating system which is designed to be portableover a large set of machines.  It is currently running on two minicomputerswith quite different architectures.  Both the system and applicationprograms which use it are written in a high-level language.Because the system is implemented by the same software on differenthardware, it has the same interface to user programs.  Hence,application programs which use Thoth are  highly portable.  Thothencourages structuring programs as networks of communicating processes by providing efficient interprocess communication primitives. | Cheriton, D.R.Malcolm, M.A.Melen, L.A.Sager, G.R..KPortability, real time, operating systems, minicomputer.C3.80 4.30 4.35
3128 | Synchronization with Eventcounts and Sequencers | Synchronization of concurrent processes requires controlling the relative ordering of events in the processes.A new synchronization mechanism is proposed, using abstract objects called eventcounts and sequencers, that allows processesto control the ordering of events directly, rather than using mutualexclusion to protect manipulations of shared variables that controlordering of events.  Direct control of ordering seems to simplifycorrectness arguments and also simplifies implementation in distributedsystems.  The mechanism is defined formally, and then severalexamples of its use are given.  The relationship of the mechanismto protection mechanisms in the system is explained; in particular,eventcounts are shown to be applicable to situations where confinementof information matters.  An implementation of eventcounts and sequencers in a system with shared memory is described. | Reed, D.P.Kanodia, R.K..KProcess synchronization, interprocess communication, distributedsystems, security models, mutual exclusion, semaphores.C4.30 4.32
3129 | Optimal Storage Allocation for Serial Files | A computer system uses several serial files.  The files reside on a direct-access storage device in which storage space is limited.  Records are added to the files either by jobs in batch processing mode, or by on-line transactions. Each transaction (or job) generates a demand vector which designates the space required in each file for record addition. Whenever one file runs out of space, the system must be reorganized.  This paper considers several criteria for best allocating storage space to the files. | Mendelson, H.Pliskin, J.S.Yechiali, U..KSerial files, storage allocation, reorganization, partitioned dataset.C3.5 3.7 4.33 4.6
3130 | CURRICULUM '78 - Recommendations for theUndergraduate Program in Computer Science | Contained in this report are the recommendations forthe undergraduate degree program in Computer Science of theCurriculum Committee on Computer Science (C3S) of the Associationfor Computing Machinery (ACM).   The core curriculum common to allcomputer science undergraduate programs is presented in terms ofelementary level topics and courses, and intermediate level courses.Elective courses, used to round out an undergraduate program,are then discussed, and the entire program including the computerscience component and other material is presented.  Issues relatedto undergraduate computer science education, such as servicecourses, supporting areas, continuing education, facilities,staff, and articulation are presented. | Austing, R.H.Barnes, B.H.Bonnette, D.T.Engel, G.L.Stokes, G..KComputer sciences courses, computer science curriculum, computerscience education, computer science undergraduate degreeprograms, service courses, continuing education.C1.52
3131 | FOCUS Microcomputer Number System | FOCUS is a number system and supporting computationalalgorithms especially useful for microcomputer control and othersignal processing applications.  FOCUS has the wide-rangingcharacter of floating-point numbers with a uniformity of state distributionsthat give FOCUS better than a twofold accuracy advantageover an equal word length floating-point system.  FOCUS computationsare typically five times faster than single precision fixed-pointor integer arithmetic for a mixture of operations, comparable inspeed with hardware arithmetic for many applications.  Algorithmsfor 8-bit and 16-bit implementations of FOCUS are included. | Edgar, A.D.Lee, S.C..KNumber representation, logarithmic arithmetic, computationalspeed, computational accuracy, microcomputer applications  .C3.24 3.80 4.0 4.22 5.11
3132 | Experiments with Some Algorithms that FindCentral Solutions for Pattern Classification | In two-class pattern recognition, it is a standardtechnique to have an algorithm finding hyperplaneswhich separates the two classes in a linearly separable trainingset.  The traditional methods find a hyperplane which separates allpoints in the other, but such a hyperplane is not necessarily centeredin the empty space between the two classes.  Since a centralhyperplane does not favor one class or the other, it should havea lower error rate in classifying new points and is therefore betterthan a noncentral hyperplane.  Six algorithms for finding centralhyperplanes are tested on three data sets.  Although frequentlyused practice, the modified relaxation algorithm is very poor. Three algorithms which are defined in the paper are found to bequite good. | Slagle, J..KPattern recognition, pattern classification, linear discriminants, centralhyperplanes, centering, centrality criteria, dead zone, hyperplane,linearly separable, relaxation algorithm, accelerated relaxation.C3.62 3.63
3133 | Logic and Semantic Networks | An extended form of semantic network is defined, which canbe regarded as a syntactic variant of the clausal form of logic.By virtue of its relationship with logic, the extendedsemantic network is provided with a precise semantics,inference rules, and a procedural interpretation.  Onthe other hand, by regarding semantic networks as an abstract data structure for the representation of clauses, we provide atheorem-prover with a potentially useful indexing scheme and path-followingstrategy for guiding the search for a proof. | Deliyanni, A.Kowalski, R.A..KLogic, semantic networks, theorem-proving, indexing, resolution, deduction, logic programming.C3.42 3.64 5.21
3134 | The Use of Normal Multiplication Tablesfor Information Storage and Retrieval | This paper describes a method for the organization and retrieval of attribute based information systems, using the normal multiplication table as a directoryfor the information system.  Algorithms for the organization and retrieval of information are described.  This method is particularlysuitable for queries requesting a group of information items, all of which possess a particular set of attributes (and possiblysome other attributes as well).  Several examples are given; theresults with respect to the number of disk accesses and disk spaceare compared to other common approaches.  Algorithms evaluatingthe appropriateness of the above approach to a given information systemare described.  For a certain class of information systems,the normal multiplication table method yields far more rapid retrievalwith a more economical space requirement than conventional systems.  Moreover this method incorporates an improved modification of the inverted file technique. | Motzkin, D..KInformation retrieval, inverted files, multiattribute retrieval,multilist file, normal multiplication table, queries,rapid retrieval, space economy.C3.70 3.73 3.79
3135 | Detection of Three-Dimensional Patterns of Atoms in Chemical Structures | An algorithm for detecting occurrences of a three-dimensional pattern ofobjects within a larger structure is presented.  The search techniquepresented uses the geometric structure of the pattern to definecharacteristics demanded of candidates for matching. This is usefulin cases where the properties of each atom, considered individually,do not adequately limit the number of sets of possible matchings.Several applications of this technique in the field of chemistryare: (1) in pharmacology: searching for a common constellationof atoms in molecules possessing similar biological activities;(2) in X-ray crystallography: fitting a structure or a structural fragmentto a set of peaks in the electron-density distribution ofa Fourier map; (3) in chemical documentation; retrieving froma file the structures containing specified substructures. | Lesk, A.M..KThree-dimensional pattern recognition, chemicalstructure search, information retrieval, crystal-structure analysis, drug analysis and design.C3.13 3.63 3.74
3136 | Price/Performance Patterns of U.S. Computer Systems | Econometric models of the U.S. computer market have been developed to study the relationships between system price and hardware performance.  Singlemeasures of price/performance such as "Grosch's Law" are shown tobe so over simplified as to be meaningless.  Multiple-regression modelspredicting system cost as a function of several hardwarecharacteristics do, however, reveal a market dichotomy.  On one hand thereexists a stable, price predictable market for larger, generalpurpose computer systems.  The other market is the developing onefor small business computer systems, a market which is relativelyunstable with low price predictability.  | Cale, E.G.Gremillion, L.L.McKenney, J.L..KPrice/performance, Grosch's law, U.S. computer market.C2.0 2.11 6.21
3137 | A Methodology for the Design of Distributed Information Systems | A macro model of a distributed information system in presented.  The modeldescribes the major costs of using an informationsystem from the perspective of the end-user.  The making evident the effect ofvarious design and operating parameters on overall cost per transaction. The technique is illustrated by application to the designof an interactive transaction processing system. | Bucci, G.Streeter, D.N..KDistributed processing, system design, cost minimization, distributeddatabase, interactive computing, economic modeling, transaction processing.C4.32 4.33 6.2 8.1
3138 | A Mathematical Programming Updating Method Using ModifiedGivens Transformations and Applied to LP Problems | An efficient and numerically stable method is presented for the problem ofupdating an orthogonal decomposition of a matrix of column (or row) vectors.The fundamental idea is to add a column (or row) analogousto adding an additional row of data in a linear least squares problem.A column (or row) is dropped by a formal scaling with theimaginary unit,  -1, followed by least squares addition of the column(or row).  The elimination process for the procedure is successivessive application of the Givens transformation in modified (more efficient)form.  These ideas are illustrated with an implementationof the revised simplex method.  The algorithm is a general purposeone that does not account for any particular structure or sparsityin the equations.  Some suggested computational tests for determiningsigns of various controlling parameters in the revised simplexalgorithm are mentioned.  A simple means of constructingtest cases and some sample computing times are presented.  | Hanson, R.J.Wisniewski, J.A..KLinear programming, numerical linear algebra, modified Givens transformations,linear programming test cases.C5 5.4 5.41 5.1 5.14
3139 | New Methods to Color the Vertices of a Graph | This paper describes efficient new heuristicmethods to color the vertices of a graph which relyupon the comparison of the degrees and structure of a graph.  A methodis developed which is exact for bipartite graphs and is animportant part of heuristic procedures to find maximal cliques in generalgraphs.  Finally an exact method is given which performs betterthan the Randall-Brown algorithm and is able to color largergraphs, and the new heuristic methods, the classical methods, andthe exact method are compared.   | Brelaz, D..KNP-complete, graph structure, balancing, graphcoloring, scheduling, comparison of the methods.C5.25 5.32
3140 | Social Processes and Proofs of Theorems and Programs | It is argued that formal verifications ofprograms, no matter how obtained, will not play thesame key role in the development of computer science and softwareengineering as proofs do in mathematics.  Furthermore the absenceof continuity, the inevitability of change, and the complexity ofspecification of significantly many real programs make the formal verification process difficult to justify and manage.  It is feltthat ease of formal verification should not dominate programlanguage design. | De Millo, R.A.Lipton, R.J.Perlis, A.J..KFormal mathematics, mathematical proofs,program verification, program specification.C2.10 4.6 5.24
3141 | An Improved Algorithm for Decentralized Extrema-Findingin Circular Configurations of Processes | This note presents an improvement to LeLann'salgorithm for finding the largest (or smallest) of a set of uniquelynumbered processes arranged in a circle, in which no centralcontroller exists and the number of processes is not known a priori.This decentralized algorithm uses a technique of selectivemessage extinction in order to achieve an average number ofmessage passes of order (n log n) rather than O(n2).   | Chang, E.Roberts, R..KDecentralized algorithms, distributed systems, operating systems.C4.32 4.35 5.25 5.32
3142 | Consumer Difficulties With Computerized Transactions: An Empirical Investigation | The prevalence with which errors may be encountered by the end targets of a computerized process is assessed.  How many andwhat type of errors occur?  How easily are they corrected?  Whatis the reaction of consumers to errors-to a failure to correctthem?  What can be learned by designers of large management packagesfrom such data? Results show that with the present state of theart, approximately 40 percent of individuals (or households) havingaverage contacts with different types of accounts experience oneor more errors per year.  Eighty percent relate to billing.  Attemptsto correct errors often turned out to be difficult and not alwayssuccessful. There appears to be some conflict between computer-usingorganizations and their public.  Also the role of poor management packages including poor software is indicated.  While mostmanagement systems may be adequate, results of the survey raiseconcerns about the timeliness and the number of designs of verylarge linked program packages (as EFT for instance).   | Sterling, T.D..KErrors, systems errors, billing errors, management systems, consumers.C2.0 2.1 2.12 2.2 3.50 3.52 3.55 4.19 4.6
3143 | Reasoning About Arrays | A variety of concepts, laws, and notations are presented which facilitatereasoning about arrays.  The basic concepts include intervals and theirpartitions, functional restriction, images, pointwise extension of relations,ordering, single-point variation of functions, various equivalence relations for array values, and concatenation.  The effectivenessof these ideas is illustrated by informal descriptions ofalgorithms for binary search and merging, and by a short formal proof. | Reynolds, J.C..KArrays, assertions, program proving, intervals, partitions, pointwiseextension, ordering, concatenation, binary search, merging.C4.0 4.22 5.21 5.24
3144 | A Model for and DIscussion of Multi-Interpreter Systems | A multi-interpreter system is a system in which programs executeby virtue of being interpreted by other programs, which themselves mayeither be interpreted (i.e. nested interpreters) or run directly onthe host machine.  The model reveals the anatomy of interpretersand how these differ from procedures, and exhibits linksto protection domains and multiprocessor architectures. | Manthey, M.J..KInterpreters, transfer-of-control, hierarchies.C4.13 3.65
3145 | An Implementation of Structured Walk-Throughsin Teaching Cobol Programming | The effectiveness of structuredwalk-throughs in teaching introductory Cobol programming was empiricallyassessed with a sample of 215 under-graduate business administrationmajors.  Cobol proficiency was measured by a final examinationtesting (a) knowledge of language rules, (b) ability to readand debug a program, and (c) the ability to write a program.  Analysisof multiple covariance was used to statistically adjust testscores for age and conditional reasoning scores. The findings provideempirical support for incorporating structured walk-throughsinto the programming learning process more effectivelydevelop student proficiency in writing Cobol programs. | Lemos, R.S..KStructured walk-throughs, Cobol programming, teachingof programming, testing programming proficiency.C3.51 1.52 2.42 4.22
3146 | An Academic Program Providing Realistic Training in Software Engineering | An academic program at Harvey Mudd College, calledthe Clinic program, brings projects from industry on campus to be studied and solved by student teams.  The objective ofthe Clinic is to provide students, working as small teams under careful faculty supervision, an opportunity to work on real worldproblems of sufficient magnitude and complexity.  Under this program,students can acquire essential skills of software engineering,such as team work, software project management, software designmethodology, and communication skills, in a realistic environment.Sample software projects undertaken by the Clinic are described. Experience so far has shown that the program is a viabletransition from an academic to industrial world. | Busenberg, S.N.Tam, W.C..KSoftware engineering, software engineering education, softwareprojects, student teams, software engineering skills.C1.52 4.0
3147 | A Model for Automating File and Program Design in Business Application Systems | This paper discusses a model for finding an efficient implementation of a business application system whose logical specifications have been determinedin advance.  The model views file and program design as a problemof systematically coordinating the configurations of datasets andcomputations.  It uses a straight forward search technique todetermine aggregations of computations, aggregations of datasets, device,organization, and key order for each data set, key order for each computation, and access method  for each dataset-computationpair.  Although computational results are presented for a sampleproblem involving 54 computations and 49 datasets, the main point ofthe paper is that the underlying model works computationally and is simple enough to be adapted to many file design situations. | Alter, S..KSystem design, automatic programming, searchmethods, system configurations, design choices.C4.12 4.22 4.6
3148 | High Level Programming for Distributed Computing | Programming for distributed and other loosely coupled systemsis a problem of growing interest.  This paper describes an approachto distributed computing at the level of general purpose programminglanguages.  Based on primitive notions of module, message,and transaction key, the methodology is shown to be independentof particular languages and machines.  It appears to be useful forprogramming a wide range of tasks.  This is part of an ambitiousprogram of development in advanced programming languages, and relationswith other aspects of the project are also discussed. | Feldman, J.A..KDistributed computing, modules, messages, assertions.C4.22 4.32
3149 | The Cyclic Order Property of Vertices as an Aid in Scene Analysis | A cyclic-order property is defined for bodies bounded by smooth-curved faces.The property is shown to be useful for analyzing pictures of such bodies,particularly when the line data extracted from the pictures are imperfect.This property augments previously known grammatical rules thatdetermine the existence of three-dimensional bodies correspondingto given two-dimensional line-structure data. | Shapira, R.Freeman, H..KScene analysis, cyclic order, artificial intelligence,three-dimensional reconstruction, picture processing, computer graphics, pattern recognition..C3.2 3.6 8.2
3150 | Beyond Programming Languages | As computer technology matures, our growing ability to create large systems is leading to basic changes in the nature of programming.  Current programming language concepts will not be adequate for building and maintainingsystems of the complexity called for by the tasks we attempt.  Justas high level languages enabled the programmer to escape from theintricacies of a machine's order code, higher level programming systemscan provide the means to understand and manipulate complexsystems and components.  In order to develop such systems, we needto shift our attention away from the detailed specification ofalgorithms, towards the description of the properties of the packagesand objects with which we build.  This paper analyzes some of theshortcomings of programming languages as they now exist,and lays out some possible directions for future research. | Winograd, T..KProgramming, programming languages, programming systems, systems development.C4.0 4.20 4.22 4.40
3151 | An Optimal Real-Time Algorithm for Planar Convex Hulls | An algorithm is described for the construction in real-time of theconvex hull of a set of n points in the plane.   Using an appropriate datastructure, the algorithm constructs the convex hull by successiveupdates, each taking time O(log n), thereby achieving a totalprocessing time O(n log n).   | Preparata, F.P..KComputational geometry, convex hull, planar set ofpoints, real-time algorithms, on-line algorithms.  .C4.49 5.25 5.32
3152 | Storage Reorganization Techniques forMatrix Computation in a Paging Environment | In order to multiply matrices while minimizingthe number of page fetches required, it is often more efficient toreorganize the data into submatrix form and to use block multiplication rather than to use the best known algorithms which leave thematrices stored in row-(or column-)oriented form.  An efficientmethod for accomplishing this reorganization is given.  This alsomakes possible the derivation of an asymptotically better boundfor multiplication of matrices given in row-oriented form by adaptingthe technique of Strassen to the reorganized data.  The reorganization/block multiplication scheme is shown to be advantageous formatrices and pages of realistic size; the Strassen adaptation isnot.  The former scheme is also shown to be advantageous even ifthe transpose of one of the matrices is available at no additional cost. | Fischer, P.C.Probert, R.L..KMatrix multiplication, paging, virtual memory,data reorganization, pagination, transpose..C4.34 5.14 5.25
3153 | The Control of Response Times in Multi-ClassSystems by Memory Allocations  | The possibility of giving different quality of service to jobs of differentclasses by regulating their memory allocation is examined inthe context of a paged computer system.  Two parameterized algorithmswhich partition the main memory between two classes of jobs areconsidered.  Initially, a closed system consisting of a processor and paging and file devices, with fixed numbers of jobs, is studiedto determine optimal degrees of multiprogramming and the proportionof processor time devoted to each class.  Applying a decompositionapproach and treating the closed system as a single server,the response times in an open system with external arrivals arestudied.  The object is to investigate the effect of the memoryalocation parameters on the expected response times under the two algorithms.Numerical solutions and economical lower bounds for theexpected response times as functions of the control parametersare obtained.  A way of applying the results to systems with morethan two job classes is indicated. | Hine, J.H.Mitrani, I.Tsur, S..KQueueing networks, paging, virtual memory, performance control.C4.32 8.1
3154 | Algorithm = Logic + Control | An algorithm can be regarded as consisting of a logic component,which specifies the knowledge to be used in solving problems,and a control component, which determines the problem-solvingstrategies by means of which that knowledge is used.  The logic componentdetermines the meaning of the algorithm whereas the controlcomponent only affects its efficiency.  The efficiency of analgorithm can often by improving the control component without changingthe logic of the algorithm.  We argue that computer programs wouldbe more often correct and more easily improved and modified iftheir logic and control aspects were identified and separated inthe program text.  | Kowalski, R..KControl language, logic programming, nonprocedural language, programmingmethodology, program specification, relational data structures .C3.64 4.20 4.30 5.21 5.24
3155 | The Paradigms of Programming | Floyd, R.W.
3156 | Computing Connected Components on Parallel Computers | We present a parallel algorithm which uses n2 processors to find the connectedcomponents of an undirected graph with n vertices in time O(log2n).  AnO(log2n) time bound also can be achieved using only n$n/$log2n)) processors.The algorithm can be used to find the transitive closureof a symmetric Boolean matrix.  We assume that the processors haveaccess to a common memory.  Simultaneous access to the same locationis permitted for fetch instructions but not for store instructions. | Hirschberg, D.S.Chandra, A.K.Sarwate, D.V..KGraph theory, parallel processing, algorithms,transitive closure, connected component.C5.25 5.32 6.22
3157 | Proving Termination with Multiset Orderings | A common tool for proving the termination of programs is the well-foundedset, a set ordered in such a way as to admit no infinite descending sequences.The basic approach is to find a termination function  that mapsthe values of the program variables into some well-founded set,such that the value of the termination function is repeatedly reducedthroughout the computation.  All too often, the termination functions required are difficult to find and are of a complexity outof proportion to the program under consideration. Multisets (bags)over a given well-founded set S are sets that admit multiple occurrencesof elements taken from S.  The given ordering on S inducesan ordering on the finite multisets over S.  This multiset orderingis shown to be well-founded.  The multiset ordering enables theuse of relatively simple and intuitive termination functions in otherwisedifficult termination proofs.  In particular, the multisetordering is used to prove the termination of production systems,programs defined in terms of sets of rewriting rules.  | Dershowitz, N.Manna, Z..KProgram correctness, program termination, program verification, well-foundedorderings, well-founded sets, multisets, bags, production systems,term rewriting systems, tree replacement systems, reduction rules.C5.24 5.7
3158 | Secure Personal Computing in an Insecure Network | A method for implementing secure personal computing in a networkwith one or more central facilities is proposed.  The method employs apublic-key encryption device and hardware keys.  Each user is responsible for his own security and need not rely on the security ofthe central facility or the communication links.  A user can safelystore confidential files in the central facility or transmit confidential data to other users on the network.  | Denning, D.E..KPersonal computing, security, privacy, networks, public-key encryption.C2.12 6.20
3159 | Further Remark on Stably Updating Mean and Standard Deviation Estimates | Nelson, L.S..KMean, standard deviation.C5.5 5.19
3160 | Rejuvenating Experimental Computer Science | This report is based on the results of an NSF sponsoredworkshop held in Wasington, D.C. on November 2, 1978.  The co-authors of the report are: Gordon Bell, Digital Equipment Corporation; Bernard A. Galler,University of Michigan; Patricia Goldberg, IBM Corporation; JohnHamblen, University of Missouri at Rolla; Elliot Pinson, Bell TelephoneLaboratories; and Ivan Sutherland, California Institute ofTechnology.  Also participating in the workshop were representativesof NSF and other government agencies.  In addition to the authors,a number of other people have contributed to the contents of thisreport.  In preparation for the original workshop, all doctorate-granting computer science departments in the nation were askedfor comments and suggestions on the problems of experimental computer science.A version of the current report dated January 15 was circulated to these departments and to a number of industrial and government groups for criticism.The editors and authors of this final version gratefully acknowledge the contribution of a large number of other people at all stages in the preparation of the report.$Note: Following this presentation of the report, there is aposition paper on the crisis in experimental computerscience written by the ACM Executive Committee.)   | Feldman, J.A.Sutherland, W.R.
3161 | An ACM Executive Committee Position on the Crisis in Experimental Computer Science | McCracken, D.D., CCPDenning, P.J.Brandin, D.H.
3162 | On Improving the Worst Case Running Timeof the Boyer-Moore String Matching Algorithm | It is shown how to modify the Boyer-Moore string matching algorithm so thatits worst case running time is linear even when multiple occurrences of the pattern are present in the text. | Galil, Z..KComputational complexity, linear time, worst case, string matching, periodicity.C3.74 4.40 5.25
3163 | An Optimal Insertion Algorithm for One-SidedHeight-Balanced BInary Search Trees | An algorithm for inserting an element into a one-sided height-balanced(OSHB) binary search tree is presented.  The algorithm operates in time O(log n), where n is the number of nodes inthe tree.  This represents an improvement over the best previously known insertion algorithms of Hirschberg and Kosaraju, which requiretime O(log 2n).  Moreover, the O(log n) complexity is optimal. Earlier results have shown that deletion in such a structure canalso be performed in O(log n) time.  Thus the result of this papergives a negative answer to the question of whether such trees shouldbe the first examples of their kind, where deletion has a smaller time complexity than insertion.  Furthermore, it can now be concludedthat insertion, deletion, and retrieval in OSHB trees canbe performed in the same time as the corresponding operations forthe more general AVL trees, to within a constant factor.  However,the insertion and deletion algorithms for OSHB trees appear muchmore complicated than the corresponding algorithms for AVL trees. | Raiha,K.J.Zweben, S.H..KInsertion, one-sided height-balanced trees, height-balancedtrees, binary trees, search trees..C3.73. 3.74 4.34 5.25 5.31
3164 | Progressive Acyclic Digraphs-A Tool for Database Integrity | A progressive acyclic digraph (PAD) algorithm accepts are requests andmaintains a graph in an acyclic state.  When a request creates a cycle,nodes are, "detached" until the new are can be entered acyclicallyThis process is important in certain areas of database implementationin which there are constraints on the permissible sequencesof actions. Two PAD algorithms are presented; one uses a simplepath matrix representation and the other uses a list with an"artificial gradient."  Experiments suggest that for large N the secondis considerably faster, though both are asymptotically O(NR),where N is the number of nodes and R is the expected numberof nodes reachable along paths from any given node. | Hansen, W.J..KList processing, data structures, topological sort,acyclic digraph, database integrity, network, deadlock.C4.34 5.32 4.33
3165 | Approximation of Polygonal Maps by Cellular Maps | The approximation of polygonal thematic maps by cellularmaps, an important operation in geographical data processing,is analyzed.  The data organization used for representing the polygonalmaps is a widely used segment-based data structure, where classlabels identify the regions bordering each segment on either side.The approximation algorithm presented operates on such anorganization, eliminating the need for the recognition of region boundaries.Each segment is examined only once.  The versatility ofthe new organization is further illustrated by the outline of algorithmsfor area computation and point inclusion.  The algorithm isapplied to a set of soil maps converted to computer-readableform by means of a coordinate digitizer. | Nagy, G.Wagle, S.G..KPolygon maps, cellularization, gridding, geographic data structures,computational geometry, computer cartography, automated cartography.C3.14 4.34 8.2
3166 | Computing Standard Deviations: Accuracy | Four algorithms for the numerical computationof the standard deviation of (unweighted) sampled dataare analyzed.  Two of the algorithms are well-known in the statisticaland computational literature; the other two are new algorithmsspecifically intended for automatic computation.  Our discussion is expository, with emphasis on reaching a suitable definition of"accuracy."  Each of the four algorithms is analyzed for the conditionsunder which it will be accurate.  We conclude that all fouralgorithms will provide accurate answers for many problems, but twoof the algorithms, one new, one old, are substantially more accurateon difficult problems than are the other two. | Chan, T.F.Lewis, J.G..KMean, standard deviation, least squares, updatingestimates, rounding error analysis, condition number..C5.5 5.11 5.19
3167 | Updating Mean and Variance Estimates: An Improved Method | A method of improved efficiencyis given for updating the mean and variance of weighted sampled datawhen an additional data value is included in the set.  Evidenceis presented that the method is stable and at leastas accurate as the best existing updating method.  | West, D.H.D..KMean, standard deviation, variance, updating estimates, removing data.C5.5 5.19
3168 | Comment on "An Optimal Evaluation of BooleanExpressions in an Online Query System." | Laird, P.D..KQuery, Boolean expression, information retrieval, file organization.C3.53.70 3.73 3.74
3169 | Note on "An Optimal Evaluation of Boolean Expressions in an Online Query System." | Gudes, E.Hoffman, A..KQuery, Boolean expression, optimal evaluation, information retrieval.C3.50 3.70 3.74
3170 | On the Proof of Correctness of a Calendar Program | A formal specification is given for a simple calendarprogram, and the derivation and proof of correctness of the program are sketched.  The specification is easy to understand, and its correctness is manifest to humans. | Lamport, L..KProgram specification, program verification, inductive assertions.C5.24
3171 | Line Numbers Made Cheap | A technique is described for run-time line number administrationto be used for implementations of high level languages.  Under suitablecircumstances, this method requires absolutely no overhead,in either time or space, during execution of the program.  | Klint, P..KLine number administration, diagnostic messages, abstract machine code .C4.12 4.13 4.20 4.42
3172 | An Algorithm for Planning Collision-FreePaths Among Polyhedral Obstacles | This paper describes a collision avoidance algorithmfor planning a safe path for a polyhedral object moving amongknown polyhedral objects.  The algorithm transforms the obstaclesso that they represent the locus of forbidden positions for an arbitraryreference point on the moving object.  A trajectory of thisreference point which avoids all forbidden regions is free of collisions.Trajectories are found by searching a network which indicates, for each vertex in the transformed obstacles, which other vertices can be reached safely. | Lozano-Perez, T.Wesley, M.A..KPath finding, collision-free paths, polyhedral objects,polyhedral obstacles, graph searching, growing objects.C3.15 3.64 3.66 8.1
3173 | A Psychology of Learning BASIC | This paper addresses the question: What does a person knowfollowing learning of BASIC programming?  Several underlying conceptualstructures are identified: (1) a transaction is an event thatoccurs in the computer and involves some operation on some objectat some location, (2) a prestatement is a set of transactions correspondingto a line of code, (3) chunks are frequently occurring configurations of prestatements corresponding to several lines of code. | Mayer, R.E..KBASIC, Learning, instruction.C1.50 3.36 4.22
3174 | Password Security: A Case History | This paper describes the history of the design of the passwordsecurity scheme on a remotely accessed time-sharing system.The present design was the result of countering observed attemptsto penetrate the system.  The result is a compromise betweenextreme security and ease of use. | Morris, R.Thompson, K..KOperating systems, passwords, computer security.C2.41 4.35
3175 | Breaking Substitution Ciphers Using a Relaxation Algorithm | Substitution ciphers are codes in which each letterof the alphabet has one fixed substitute, and the word divisions do not change.  In this paper the problem of breaking substitutionciphers is represented as a probabilistic labeling problem.Every code letter is assigned probabilities of representing plain textletters.  These probabilities are updated in parallel for allcode letters, using joint letter probabilities.  Iterating the updatingscheme results in improved estimates that finally lead tobreaking the cipher.  The method is applies successfully to two examples. | Peleg, S.Rosenfeld, A..KCryptography, substitution ciphers,probabilistic classification, relaxation.C3.42 3.63
3176 | Storing a Sparse Table | The problem of storing and searching large sparse tables is ubiquitous in computer science.  The standard technique for storing such tables ishashing, but hashing has poor worst-case performance.  We proposea good worst-case method for storing a static table of n entries,each an integer between 0 and N - 1.  The method requires 0(n) wwords of storage and allows O(logn N) access time.  Although our methodis a little complicated to use in practice, our analysis showswhy a simpler algorithm used for compressing LR parsing tables works so well. | Tarjan, R.E.Yao, A.C.C..KGaussian elimination, parsing, searching,sparse matrix, table compression, table lookup.C3.74 4.12 4.34 5.25
3177 | How to Share a Secret | In this paper we show how to divide data D inton pieces in such a way that D is easily reconstructable from anyk pieces, but even complete knowledge of k - 1 pieces revealsolutely no information about D.  This technique enables the constructionof robust key management schemes for cryptographic systemsthat can function securely and reliably even when misfortunes destroyhalf the pieces and security breaches expose all but one of theremaining pieces. | Shamir, A..KCryptography, key management, interpolation.C5.39 5.6
3178 | Introduction to the EFT Symposium | Kling, R.
3179 | Overview of the EFT Symposium | It is increasingly recognized that large-scale technologies such as EFThave the potential for aiding in the solution of current societal problems.Yet, these technologies also generate problems.  This symposiumpresents selected papers from a conference that sought to discoverwhat is currently known about EFT impacts in societyand what research is needed in the future.    | Kraemer, K.L.Colton, K.W..KEFT's, research agenda, conference results, public policy.C2.11 3.52 3.53 3.80
3180 | Costs of the Current U.S. Payments System | Neither the banking industry norpublic policy makers have good information on the comparative costsof alternative payment systems such as cash, checks, credit cards,and EFT transactions.  As a result, EFT systems and services arelikely to be implemented without a valid assessment of whether theyare cost-justified, lst alone justified in terms of other criteria. | Lipis, A.H..KEFT's,payment system costs, payment system volumes.C3.52
3181 | Public Protection and Education with EFT | Research has revealed the existence of widespreadmisinformation and lack of knowledge about EFT amongbusiness and government as well as consumers.  As a result, any effortto stimulate meaningful public participation in decisions onthe introduction of EFT systems will require a coordinated educationaleffort of considerable scale.  In addition, research has revealed shortcomings in the present system for defining responsibilities,liabilities, and avenues of recourse.  THis article presentsseveral possible alternatives for improving the current system, butongoing research is also needed to assure that actions taken willbe responsive to the changing environment and consumer needs. | Long, R.H..KElectronic funds transfer systems, consumer education, securityand fraud, privacy, system reliability, EFT ombudsman .C2.12
3182 | Vulnerabilities of EFTs to Intentionally Caused Losses | The hypothesis that consumersare provided greater accuracy and freedom from error and fraud withelectronic funds transfer systems (EFTs) is discussed in lightof the technical capabilities and potential of the computer to protectagainst both accidentally and intentionally caused losses.Although the nomenclature for business crimes remains the same as formanual depository and other financial service systems - for example, fraud, theft, embezzlement - the characteristics of the crimesare new. The changes resulting from the accelerating use of EFTs and its continual technological advances broaden the scope of securityissues to be examined.  Factors such as backup requirements, regulatory and legislative actions, and economics give rise tothe urgency for immediate research into solutions for emergingEFTs - related vulnerabilities. | Parker, D.B..KEFTs, computer abuse, crime, security, errors,losses, positions of trust, legislation.C2.11 2.3 3.52 3.80
3183 | Policy, Values, and EFT Research: Anatomy of a Research Agenda | There is an emerging recognition that EFT systems have the potential tovastly alter the payment and fund transfer system in American society.A number of forces and actors are involved in this evolution,and the values vary significantly depending on individual and institutional perspectives. These value conflicts are highlightedin a six-part research agenda: technological issues in EFT, EFT impacts on people, economic impact of EFT, regulation and control ofEFT, and evaluating and monitoring EFT systems. | Kraemer, K.L.Colton, K.W..KEFTs, research agenda, value conflicts, impacts on people,economic impacts, regulation and control, monitoring EFT.C2.11 2.3 3.52 3.53 3.80
3184 |    Revised Report on the Algorithmic Language ALGOL 60 |    The report gives a complete defining description of the internationalalgorithmic language ALGOL 60. This is a language suitable for expressing a large class of numerical processes in a form sufficiently concise for direct automatic translation into the language of programmed automaticcomputers. | Nuar, P.
3185 |    The Humble Programmer |    We shall do a much better programming job, provided that we approach thetask with a full appreciation if its tremendous difficulty, provided that we stick to modest and elegant programming languages, provided that we respectthe intrinsic limitations of the human mind and approach the task as VeryHumble Programmers. | Dijkstra, E. W.
3186 |    GO TO Statement Considerd Harmful | Dijkstra, E. W..Kgo to statement, jump instruction, branch instruction, conditional clause,repetitive clause, program intelligibility, program sequencing.C4.22 5.23 5.24
3187 |    Certification of Algorithm 271 (QUICKERSORT) |    QUICKERSORT compiled and run without correction through the ALDEP translatorfor the CDC 1604A. Comparison of average sorting items with other recentlypublished algorithms demonstrates QUICKERSORT's superior performance. | Blair, C.R.
3188 |    Semiotics and Programming Languages |    I have based my paper on semiotics and its three dimension. I should insertat this point that language has many aspects and that pragmatics, semantics andsyntactics do not necessary cover all of them. One can, however, project most aspects into the three semiotic dimension and there seems to be a strong tendency to do so today. | Zemanek, H.
3189 |    An Algebraic Compiler for the FORTRAN Assembly Program |    An algebraic compiler has been written which may be added to the FORTRAN Assembly Program. This compiler will expand all algebraic statements with the following operations: addition, subtraction, multiplication and division. Itwill compile multi-level expressions in floating-point arithmetic (this iseasily be revised to fixed-point). | Stiegler, A. D.
3190 |    Correction to Economies of Scale and the IBM System/360 |    On page 439, a "typical" instruction mix id discussed and the timing computedas outlined in that page. Through an undetected programming error, the times andthe resulting regression equation are slightly in error. | Solomon, M.B.
3191 |    Generating Permutations by Nested Cycling |    The purpose of this letter is two_fold: first to give due credit to theTompkins-Paige algorithm, and second to clarify a comment by Hill, CR Review13891 on "Programs for Permutations". | Langdon, Glen G..Kpermutations.C5.39
3192 | The Lincoln Keyboard - a Typewriter Keyboard Designed for Computers Input Flexibility |    A new typewriter keyboard, for direct and punched paper tape computer inputwill replace the usual commercial keyboard with 88 characters chosen for the convenience  of programmers. The Lincoln Keyboard is expected to facilitatethe programming of algorithmic process and should allow considerable flexibility in assembly and utility routines. | Vanderburgh, A.
3193 |    Work is in progress on a formula coding technique allowing direct entry | into the computer of formulae typed on an 84 character Flexo-writer. ThisFlexo-writer will be modified for automatic half-line advance and retract,without carriage return, to permit completely general sub and superscripting.
3194 |    A Non-heuristic Program for Proving Elementary Logical Theorems |    The paper discusses problems involved in designing a device capable ofdistinguishing among speech events that are normally recognized as different by native speakers of a particular language. Parallels between these problemsand those of chemical analysis are pointed out. | Dunham, B.Fridshal, R.Sward, G. L.
3195 |    Reiteration of ACM Policy Toward Standardization |    The periodic change in officers, chairman and editors which usually followsas election occasionally results in a change in policy. In the case of this department there is no radical change, but this is nevertheless the proper timeto reiterate ans underline ACM's policy with respect to standardization in the computer area. | Gorn, S.
3196 |    The Reactive Typewriter Program |    84-character keyboard including alphabetical upper and lower case for goodreadability. If the machine is restricted to only a single case, the lower caseis preferred. The reactive typewriter should be portable. the reactive typewriter should operate over any commercially used, dial-type telephone(voice) or telegraph (Telex) line or over leased (nondial) telegraph linesinterchangeably. | Mooers, C. N.
3197 |    Structures of Standards-Processing Organizations in the Computer Area |    In line with the ACM's policy statement [Comm. ACM 5 (Nov. 1962), 547-549],the following organizational descriptions have been provided in order todescribe standardization activities pertinent to computers and informationprocessing. | Gorn, S.Bemer, R. W.Green, J.
3198 |    Microprogramming, Emulators and Programming Languages |   The problem we have been concerned with is that of converting language toaction - or intellectual energy to mechanical energy. The medium that we use for this purpose is language and therefore we are preoccupied with the subjectof language. In the areas of language investigation we have concentrated first on formalizing syntax and then on semantics. | Greem, J.
3199 |    ALGEM - An Algebraic Manipulator |    ALGEM is a package of subprograms written in Slip, FORTRAN IV and MAP 7094 II to manipulate algebraic expressions. Algem's basic algebraic operations are additions, subtractions, multiplications, division and exponentiation. It is capable of handling any number of single letter variables, variable exponents, and of finding the highest common factor of two polynomials. Also included aresuch functions as substitution, differentiation, determining coefficients ofspecified variables, solving a linear equation, basic I/O routines plus otherspecial purpose and arithmetic routines. The major innovation of Algem over other manipulators is the assignment of types to all expressions and the use of a standard ordering procedure. | Gotlieb, C. C.Novak, R. J.
3200 |    A FORMAC Program for the Solution of Linear Boundary and Initial Value Problems |   A computer program is described which has been developed for obtainingapproximate solutions to linear initial and boundary-value problems involving differential equations. For each problem, input to the program includes:   1. The equations (in symbolic form) to be satisfied  -  the differentialequations, equations describing auxiliary conditions such as boundary conditions, etc.   2. A numerical description of the regions in which each of the equationsare to be satisfied.   3. Sets of functions (in symbolic form) to be used in linear combinationsto approximate the solution functions. Give the above input, the programgenerates an approximation to the solutions of the specified problemm in terms of the specified functions which is optimum in the least-squares sense. | Cuthill, E.
3201 |    Symbolic Manipulation of Poisson Series |    Poisson series of three variables are manageable symbolically through as a set of formal subroutines written partially in the IBM 7094 machine language,but to be called in the FORTRAN language for use in Fortran  programs. An effort has been made to supply those operations which are most required bycelestial mechanics. The routines are entirely self-contained subroutinesand require only standard Fortran input/output units 5 and 6; they are designto avoid waste and overflow of core storage space. | Danby, J.Deprit, A.Rom, A.
3202 |    MANIP: A Computer System for Algebra and Analytic Differentiation |    A mathematical expression to be operated upon is written in FORTRAN-like notation and stored in the computer as a string of BCD characters with allblanks removed. It may be as complicated as desired (parentheses nested withoutrestriction, etc.) so long as the entire expression (or any subsequent form)does not exceed 5000 characters. The problemm of performing algebraic operationsand obtaining analytic derivatives was translated into that of identifying andmanipulating character sequences. Programs which resulted were written inFORTRAN IV for a CDC 3600 and are discussed in detail. | Bender, B.
3203 |    GRAD Assistant - A Program for Symbolic Algebraic Manipulation and Differentiation |    The General Recursive Algebra and Differentiation Assistant (GRAD Assistant)now under development is a set of LISP functions which symbolically manipulateabd differentiate algebraic expressions. It is designed for use with problemms in which a large amount of routine manipulation is to be done by a program without human intervention. Thus, GRAD must recognize necessary simplificationswithout external guidance. While some complicated expressions (notably onesinvolving nested radicals and trigonometric functions) do not yield completelyto the present version, it has proved quite useful indeed. | Fletcher, J. G.
3204 |    An On-Line Program for Non-Numerical Algebra |    The goal of this program is to make a step toward te design of an automatedmathematical assistant. Some requirements for such a program are: it must beeasy to access, and that the result must be obtained in a reasonably shorttime. Accordingly the program is written for a time-shared computer. The Q-32computer as System Development Corporation, Santa Monica, California, was chosen because it also had a LISP 1.5 compiler. Programming and debugging wasdone from a remote teletype console at Stanford University. | Korsvold, K.
